<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式</title>
      <link href="/2023/06/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/06/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>原则的目的：高内聚，低耦合</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MMC移植</title>
      <link href="/2023/05/30/MMC%E7%A7%BB%E6%A4%8D/"/>
      <url>/2023/05/30/MMC%E7%A7%BB%E6%A4%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="FLASH移植（EMMC"><a href="#FLASH移植（EMMC" class="headerlink" title="FLASH移植（EMMC)"></a>FLASH移植（EMMC)</h1><h3 id="1、初始化EMMC"><a href="#1、初始化EMMC" class="headerlink" title="1、初始化EMMC"></a>1、初始化EMMC</h3><p>$cp  mmc文件/movi.c  arch/arm/cpu/armv7/exynos/</p><p>$vim  arch/arm/cpu/armv7/exynos/Makefile</p><p>在pinmux.o 后添加movi.o</p><p>修改板级文件</p><p>$vim  board/samsung/fs4412/fs4412.c</p><p>在</p><p>#include &lt;asm/arch/mmc.h&gt;</p><p>后面添加</p><p>#include &lt;asm/arch/clk.h&gt;</p><p>#include “origen_setup.h”</p><p>在</p><p>#ifdef CONFIG_GENERIC_MMC </p><p>后面添加</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">u32 sclk_mmc4; <span class="comment">/*clock source for emmc controller*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __REGMY(x) (*((volatile u32 *)(x)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLK_SRC_FSYS __REGMY(EXYNOS4_CLOCK_BASE + CLK_SRC_FSYS_OFFSET)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLK_DIV_FSYS3 __REGMY(EXYNOS4_CLOCK_BASE + CLK_DIV_FSYS3_OFFSET)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">emmc_init</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">     u32 tmp;</span><br><span class="line"></span><br><span class="line">     u32 clock;</span><br><span class="line"></span><br><span class="line">     u32 i;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* setup_hsmmc_clock */</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">/* MMC4 clock src = SCLKMPLL */</span></span><br><span class="line"></span><br><span class="line">     tmp = CLK_SRC_FSYS &amp; ~(<span class="number">0x000f0000</span>);</span><br><span class="line"></span><br><span class="line">     CLK_SRC_FSYS = tmp | <span class="number">0x00060000</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* MMC4 clock div */</span></span><br><span class="line"></span><br><span class="line">     tmp = CLK_DIV_FSYS3 &amp; ~(<span class="number">0x0000ff0f</span>);</span><br><span class="line"></span><br><span class="line">     clock = get_pll_clk(MPLL)/<span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span> ; i&lt;=<span class="number">0xf</span>; i++) {</span><br><span class="line"></span><br><span class="line"> sclk_mmc4=(clock/(i+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(sclk_mmc4 &lt;= <span class="number">160</span>)  <span class="comment">/*200*/</span></span><br><span class="line"></span><br><span class="line">     {</span><br><span class="line"></span><br><span class="line">             CLK_DIV_FSYS3 = tmp | (i&lt;&lt;<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">         }</span><br><span class="line"></span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line"> emmcdbg(<span class="string">"[mjdbg] sclk_mmc4:%d MHZ; mmc_ratio: %d\n"</span>,sclk_mmc4,i);</span><br><span class="line"></span><br><span class="line"> sclk_mmc4 *= <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \* MMC4 EMMC GPIO CONFIG</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \* GPK0[0]   SD_4_CLK</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \* GPK0[1]   SD_4_CMD</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \* GPK0[2]   SD_4_CDn</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \* GPK0[3:6]  SD_4_DATA[0:3]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> writel(readl(<span class="number">0x11000048</span>)&amp;~(<span class="number">0xf</span>),<span class="number">0x11000048</span>); <span class="comment">/*SD_4_CLK/SD_4_CMD pull-down enable*/</span></span><br><span class="line"></span><br><span class="line"> writel(readl(<span class="number">0x11000040</span>)&amp;~(<span class="number">0xff</span>),<span class="number">0x11000040</span>);<span class="comment">/*cdn set to be output*/</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> writel(readl(<span class="number">0x11000048</span>)&amp;~(<span class="number">3</span>&lt;&lt;<span class="number">4</span>),<span class="number">0x11000048</span>); <span class="comment">/*cdn pull-down disable*/</span></span><br><span class="line"></span><br><span class="line"> writel(readl(<span class="number">0x11000044</span>)&amp;~(<span class="number">1</span>&lt;&lt;<span class="number">2</span>),<span class="number">0x11000044</span>); <span class="comment">/*cdn output 0 to shutdown the emmc power*/</span></span><br><span class="line"></span><br><span class="line"> writel(readl(<span class="number">0x11000040</span>)&amp;~(<span class="number">0xf</span>&lt;&lt;<span class="number">8</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">8</span>),<span class="number">0x11000040</span>);<span class="comment">/*cdn set to be output*/</span></span><br><span class="line"></span><br><span class="line"> udelay(<span class="number">100</span>*<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"> writel(readl(<span class="number">0x11000044</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">2</span>),<span class="number">0x11000044</span>); <span class="comment">/*cdn output 1*/</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> writel(<span class="number">0x03333133</span>, <span class="number">0x11000040</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> writel(<span class="number">0x00003FF0</span>, <span class="number">0x11000048</span>);</span><br><span class="line"></span><br><span class="line"> writel(<span class="number">0x00002AAA</span>, <span class="number">0x1100004C</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_EMMC_8Bit</span></span><br><span class="line"></span><br><span class="line"> writel(<span class="number">0x04444000</span>, <span class="number">0x11000060</span>);</span><br><span class="line"></span><br><span class="line"> writel(<span class="number">0x00003FC0</span>, <span class="number">0x11000068</span>);</span><br><span class="line"></span><br><span class="line"> writel(<span class="number">0x00002AAA</span>, <span class="number">0x1100006C</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> USE_MMC4</span></span><br><span class="line"></span><br><span class="line"> smdk_s5p_mshc_init();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>将 int board_mmc_init(bd_t *bis)函数内容改写为</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">board_mmc_init</span><span class="params">(<span class="type">bd_t</span> *bis)</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">     <span class="type">int</span> i, err;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_EMMC</span></span><br><span class="line"></span><br><span class="line">     err = emmc_init();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​    在末尾添加</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_BOARD_LATE_INIT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;movi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">chk_bootdev</span><span class="params">(<span class="type">void</span>)</span>  <span class="comment">/*mj for boot device check*/</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">     <span class="type">char</span> run_cmd[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">mmc</span> *<span class="title">mmc</span>;</span></span><br><span class="line"></span><br><span class="line">     <span class="type">int</span> boot_dev = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="type">int</span> cmp_off = <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">     ulong start_blk, blkcnt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">     mmc = find_mmc_device(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (mmc == <span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line">     {</span><br><span class="line"></span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"There is no eMMC card, Booting device is SD card\n"</span>);</span><br><span class="line"></span><br><span class="line">         boot_dev = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> boot_dev;</span><br><span class="line"></span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line">     start_blk = (<span class="number">24</span>*<span class="number">1024</span>/MOVI_BLKSIZE);</span><br><span class="line"></span><br><span class="line">     blkcnt = <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">     <span class="built_in">sprintf</span>(run_cmd,<span class="string">"emmc open 0"</span>);</span><br><span class="line"></span><br><span class="line">     run_command(run_cmd, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">     <span class="built_in">sprintf</span>(run_cmd,<span class="string">"mmc read 0 %lx %lx %lx"</span>,CFG_PHY_KERNEL_BASE,start_blk,blkcnt);</span><br><span class="line"></span><br><span class="line"> run_command(run_cmd, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">     <span class="comment">/* switch mmc to normal paritition */</span></span><br><span class="line"></span><br><span class="line">     <span class="built_in">sprintf</span>(run_cmd,<span class="string">"emmc close 0"</span>);</span><br><span class="line"></span><br><span class="line">     run_command(run_cmd, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">board_late_init</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> boot_dev =<span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> boot_cmd[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">   boot_dev = chk_bootdev();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!boot_dev)</span><br><span class="line"></span><br><span class="line">   {</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\nChecking Boot Mode ... EMMC4.41\n"</span>);</span><br><span class="line"></span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>2、</strong>  <strong>添加相关命令</strong></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span>   mmc文件/cmd_movi.c common/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span>   mmc文件/cmd_mmc.c common/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span>    mmc文件/cmd_mmc_fdisk.c common/</span><br></pre></td></tr></tbody></table></figure><p>​    修改Makefile</p><p>$ vim  common/Makefile</p><p>​    在</p><p>COBJS-$(CONFIG_CMD_MMC) += cmd_mmc.o</p><p>​    后添加</p><p>COBJS-$(CONFIG_CMD_MMC) += cmd_mmc_fdisk.o</p><p>COBJS-$(CONFIG_CMD_MOVINAND) += cmd_movi.o</p><p>​    添加驱动</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> mmc文件/mmc.c drivers/mmc/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span>  mmc文件/s5p_mshc.c drivers/mmc/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span>  mmc文件/mmc.h include/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span>  mmc文件/movi.h include/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span>  mmc文件/s5p_mshc.h include/</span><br></pre></td></tr></tbody></table></figure><p>​    修改Makefile</p><p> $vim drivers/mmc/Makefile </p><p>​    添加</p><p>COBJS-$(CONFIG_S5P_MSHC) += s5p_mshc.o </p><p><strong>3、</strong> <strong>添加<strong><strong>EMMC</strong></strong>相关配置</strong></p><p> $vim  include/configs/fs4412.h</p><p>文件最后添加</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_EVT1   1    <span class="comment">/* EVT1 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_EVT1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_EMMC44_CH4 <span class="comment">/*eMMC44_CH4 (OMPIN[5:1] = 4)*/</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SDMMC_CH2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_S3C_HSMMC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> DEBUG_S3C_HSMMC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USE_MMC2 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_EMMC44_CH4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_S5P_MSHC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_EMMC       1        </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USE_MMC4 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_EMMC_EMERGENCY</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> emmcdbg(fmt,args...)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/*end CONFIG_EVT1*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_CMD_MOVINAND</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_CLK_1000_400_200</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CFG_PHY_UBOOT_BASE   CONFIG_SYS_SDRAM_BASE + 0x3e00000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CFG_PHY_KERNEL_BASE   CONFIG_SYS_SDRAM_BASE + 0x8000</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOOT_MMCSD   0x3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOOT_EMMC43   0x6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOOT_EMMC441  0x7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_BOARD_LATE_INIT</span></span><br></pre></td></tr></tbody></table></figure><p><strong>1、</strong>  <strong>重新进入<strong><strong>CodeSign4SecureBoot</strong></strong>编译****u-boot</strong></p><p>$ ./build.sh </p><p>​    烧写新的u.bin</p><p>​    A、通过sd启动方式将uboot烧写到emmc</p><p>   将拨码开关拨到100x SD启动</p><p>  【通过movi指令实现emmc自启动】</p><ol><li>内核、设备树、根文件系统的烧写：</li></ol><p>​    内核的烧写：</p><p>​         tftp 41000000 uImage</p><p>​         movi write kernel 41000000</p><p>​    设备树烧写：</p><p>​         tftp 41000000 exynos4412-fs4412.dtb</p><p>​         movi write dtb 41000000</p><p>​         </p><p>​    根文件系统烧写：</p><p>​         tftp 41000000 ramdisk.img</p><p>​         movi write rootfs 41000000 300000</p><ol start="2"><li>自启动参数的设置:</li></ol><p>​    set bootcmd movi read kernel 41000000;movi read dtb 42000000;movi rea</p><p>d rootfs 43000000 3000000;bootm 41000000 43000000 42000000</p><p>​    save</p><p>​    B、通过emmc启动开发板</p><p>​             将拨码开关拨到011x  EMMC启动</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络移植</title>
      <link href="/2023/05/30/%E7%BD%91%E7%BB%9C%E7%A7%BB%E6%A4%8D/"/>
      <url>/2023/05/30/%E7%BD%91%E7%BB%9C%E7%A7%BB%E6%A4%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>二、****网卡移植</strong></p><p><strong>1、</strong> <strong>添加网络初始化代码</strong></p><p>$vim  board/samsung/fs4412/fs4412.c</p><p>在struct exynos4_gpio_part2 *gpio2; 后添加</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DRIVER_DM9000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXYNOS4412_SROMC_BASE 0X12570000</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DM9000_Tacs   (0x1) </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DM9000_Tcos   (0x1) </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DM9000_Tacc   (0x5) </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DM9000_Tcoh   (0x1) </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DM9000_Tah   (0xC) </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DM9000_Tacp   (0x9)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DM9000_PMC   (0x1) </span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exynos_sromc</span> {</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> bw;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> bc[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \* s5p_config_sromc() - select the proper SROMC Bank and configure the</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \* band width control and bank control registers</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \* srom_bank  - SROM</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \* srom_bw_conf - SMC Band witdh reg configuration value</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \* srom_bc_conf - SMC Bank Control reg configuration value</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exynos_config_sromc</span><span class="params">(u32 srom_bank, u32 srom_bw_conf, u32 srom_bc_conf)</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> tmp;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exynos_sromc</span> *<span class="title">srom</span> =</span> (<span class="keyword">struct</span> exynos_sromc *)(EXYNOS4412_SROMC_BASE);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Configure SMC_BW register to handle proper SROMC bank */</span></span><br><span class="line"></span><br><span class="line">tmp = srom-&gt;bw;</span><br><span class="line"></span><br><span class="line">tmp&amp;= ~(<span class="number">0xF</span> &lt;&lt; (srom_bank * <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">tmp |= srom_bw_conf;</span><br><span class="line"></span><br><span class="line">srom-&gt;bw = tmp;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Configure SMC_BC register */</span></span><br><span class="line"></span><br><span class="line">srom-&gt;bc[srom_bank] = srom_bc_conf;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dm9000aep_pre_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> tmp;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> smc_bank_num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>   smc_bw_conf=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>   smc_bc_conf=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* gpio configuration */</span></span><br><span class="line"></span><br><span class="line">writel(<span class="number">0x00220020</span>, <span class="number">0x11000000</span> + <span class="number">0x120</span>);</span><br><span class="line"></span><br><span class="line">writel(<span class="number">0x00002222</span>, <span class="number">0x11000000</span> + <span class="number">0x140</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 16 Bit bus width */</span></span><br><span class="line"></span><br><span class="line">writel(<span class="number">0x22222222</span>, <span class="number">0x11000000</span> + <span class="number">0x180</span>);</span><br><span class="line"></span><br><span class="line">writel(<span class="number">0x0000FFFF</span>, <span class="number">0x11000000</span> + <span class="number">0x188</span>);</span><br><span class="line"></span><br><span class="line">writel(<span class="number">0x22222222</span>, <span class="number">0x11000000</span> + <span class="number">0x1C0</span>);</span><br><span class="line"></span><br><span class="line">writel(<span class="number">0x0000FFFF</span>, <span class="number">0x11000000</span> + <span class="number">0x1C8</span>);</span><br><span class="line"></span><br><span class="line">writel(<span class="number">0x22222222</span>, <span class="number">0x11000000</span> + <span class="number">0x1E0</span>);</span><br><span class="line"></span><br><span class="line">writel(<span class="number">0x0000FFFF</span>, <span class="number">0x11000000</span> + <span class="number">0x1E8</span>);       </span><br><span class="line"></span><br><span class="line">smc_bw_conf &amp;= ~(<span class="number">0xf</span>&lt;&lt;<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    smc_bw_conf |= (<span class="number">1</span>&lt;&lt;<span class="number">7</span>) | (<span class="number">1</span>&lt;&lt;<span class="number">6</span>) | (<span class="number">1</span>&lt;&lt;<span class="number">5</span>) | (<span class="number">1</span>&lt;&lt;<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"> smc_bc_conf = ((DM9000_Tacs &lt;&lt; <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">          | (DM9000_Tcos &lt;&lt; <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">          | (DM9000_Tacc &lt;&lt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">          | (DM9000_Tcoh &lt;&lt; <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">          | (DM9000_Tah &lt;&lt; <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">      | (DM9000_Tacp &lt;&lt; <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">           | (DM9000_PMC));</span><br><span class="line"></span><br><span class="line">    exynos_config_sromc(smc_bank_num,smc_bw_conf,smc_bc_conf);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>​    在gd-&gt;bd-&gt;bi_boot_params = (PHYS_SDRAM_1 + 0x100UL); 后添加</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DRIVER_DM9000</span></span><br><span class="line"></span><br><span class="line">dm9000aep_pre_init();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p>​    在文件末尾添加</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DRIVER_DM9000</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">board_eth_init</span><span class="params">(<span class="type">bd_t</span> *bis)</span>                         </span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> dm9000_initialize(bis);</span><br><span class="line">} </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>2、</strong>  <strong>修改配置文件添加网络相关配置</strong></p><p>$ vim  include/configs/fs4412.h</p><p>​    修改</p><p> #undef CONFIG_CMD_PING</p><p>​    为</p><p> #def ine CONFIG_CMD_PING</p><p>​    修改</p><p> #undef CONFIG_CMD_NET </p><p>​    为</p><p> #def ine CONFIG_CMD_NET</p><p>​    在文件末尾</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CMD_NET</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_NET_MULTI</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_DRIVER_DM9000 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_DM9000_BASE  0x05000000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DM9000_IO             CONFIG_DM9000_BASE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DM9000_DATA           (CONFIG_DM9000_BASE + 4)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_DM9000_USE_16BIT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_DM9000_NO_SROM 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_ETHADDR         11:22:33:44:55:66</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_IPADDR          192.168.9.233</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_SERVERIP     192.168.9.120</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_GATEWAYIP    192.168.9.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_NETMASK         255.255.255.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>3、</strong> <strong>重新进入<strong><strong>CodeSign4SecureBoot</strong></strong>编译****u-boot</strong></p><p>$ ./build.sh </p><p>​    烧写新的u.bin</p><p>​    复位后</p><p># ping 192.168.9.120</p><p> <img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/clip_image001.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>系统移植实操</title>
      <link href="/2023/05/29/%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D%E5%AE%9E%E6%93%8D/"/>
      <url>/2023/05/29/%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D%E5%AE%9E%E6%93%8D/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">gcc  binutils</span><br><span class="line"><span class="comment">//-----main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_NAME <span class="string">"yzg --- "</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    </span><br><span class="line">    p=<span class="literal">NULL</span>;</span><br><span class="line">    *p = <span class="number">0x33</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world \n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"my name is %s \n"</span>,MY_NAME);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------for gcc -E -S -c     </span></span><br><span class="line">$ gcc -E main.c &gt; main.pre</span><br><span class="line">$ vim main.pre  <span class="comment">//停在预编译阶段</span></span><br><span class="line">$ gcc -S main.c  <span class="comment">//停在编译阶段</span></span><br><span class="line">$ vim main.s     </span><br><span class="line">$ gcc -c main.c  <span class="comment">// for main.o  停在汇编阶段</span></span><br><span class="line">$ nm main.o </span><br><span class="line">$ gcc -v main.c <span class="comment">//for a.out  显示详细的编译过程信息</span></span><br><span class="line">$ nm a.out</span><br><span class="line">$ </span><br><span class="line"><span class="comment">//-----------------for nm strip </span></span><br><span class="line">$ gcc main.c  </span><br><span class="line">$ ls -l a.out</span><br><span class="line">$ file a.out  <span class="comment">//查看文件的信息</span></span><br><span class="line">$ nm a.out    <span class="comment">// 查看目标文件中的符号</span></span><br><span class="line">$ strip a.out <span class="comment">//去掉执行文件中的符号信息</span></span><br><span class="line">$ nm a.out   <span class="comment">//列出目标文件中的符号</span></span><br><span class="line">$ ls -l a.out</span><br><span class="line">$ file a.out</span><br><span class="line">$ </span><br><span class="line"><span class="comment">//------------------for addr2line ,null pointer</span></span><br><span class="line">$ </span><br><span class="line">$ gcc -g main.c</span><br><span class="line">$ ./a.out</span><br><span class="line">$ dmesg   <span class="comment">//查看内核打印的出错信息</span></span><br><span class="line">[<span class="number">63321.743235</span>] a.out[<span class="number">10662</span>]: segfault at <span class="number">0</span> ip <span class="number">08048409</span> sp bfd30050 error <span class="number">6</span> in a.out[<span class="number">8048000</span>+<span class="number">1000</span>]  </span><br><span class="line">$ addr2line <span class="number">08048409</span> -e a.out  -f  <span class="comment">//通过出错的地址找到对应代码的位置</span></span><br><span class="line">  main                                                  </span><br><span class="line">  /root/linux<span class="number">-2.6</span><span class="number">.35</span>-farsight/example/env/hello/main.c:<span class="number">9</span>         </span><br><span class="line">$ vim main.c </span><br><span class="line"> :<span class="built_in">set</span> number  <span class="comment">//显示行号</span></span><br><span class="line"></span><br><span class="line">$ objdump -d a.out <span class="comment">//查看反汇编代码</span></span><br></pre></td></tr></tbody></table></figure><h1 id="系统移植"><a href="#系统移植" class="headerlink" title="系统移植"></a>系统移植</h1><h3 id="linux系统：引导程序（BootLoader）、内核（kernel）-设备树-dtb-、根文件系统（rootfs）"><a href="#linux系统：引导程序（BootLoader）、内核（kernel）-设备树-dtb-、根文件系统（rootfs）" class="headerlink" title="linux系统：引导程序（BootLoader）、内核（kernel）+ 设备树(dtb)、根文件系统（rootfs）"></a>linux系统：引导程序（BootLoader）、内核（kernel）+ 设备树(dtb)、根文件系统（rootfs）</h3><p>【目标机】：开发板<br>【开发主机】：虚拟机<br>【宿主机】：pc机</p><h3 id="linux和window间共享"><a href="#linux和window间共享" class="headerlink" title="linux和window间共享"></a>linux和window间共享</h3><p>虚拟机 -&gt; 设置 -&gt; 选项 -&gt; 共享文件夹 -&gt; 添加 -&gt; 选择需要共享的位置（如E盘）<br>$ ls /mnt/hgfs/E/  //有共享的内容显示，表示成功</p><p>如果/mnt/hgfs下没有共享目录，则重新安装VMware tools工具，安装方法参考<a href="https://blog.csdn.net/love20165104027/article/details/83377758">https://blog.csdn.net/love20165104027/article/details/83377758</a><br>}</p><h3 id="网络的建立"><a href="#网络的建立" class="headerlink" title="网络的建立"></a>网络的建立</h3><p>设置【开发主机】的IP地址：也就是虚拟机的ip地址 192.168.9.120；</p><h4 id="确认电脑和虚拟机时能通信"><a href="#确认电脑和虚拟机时能通信" class="headerlink" title="确认电脑和虚拟机时能通信"></a>确认电脑和虚拟机时能通信</h4><p>编辑 -&gt; 虚拟网络编辑器  -&gt;  VMnet0 桥接到（选连板子的网卡） //注意不要用automic，应手动指定对应的网卡<br>虚拟机 -&gt; 设置 -&gt; 网卡适配器  -&gt; 自定义 (选 VMnet0)    /*使虚拟机内的虚拟网卡，关联到电脑实际用到的网卡<br>通过选VMnet0 和 VMnet1 。实现连板子，还是上internet的切换<br>点ubuntu右上角网络图标 -&gt; 右键选编辑连接 -&gt; 全删掉 -&gt; 添加（改新连接名称为board)<br>-&gt; IPV4 设置 -&gt; 方法（选手动） -&gt; 点添加 设置为 192.168.9.120 255.255.255.0 192.168.9.1 并保存退出<br>点右上角网络图标，先断开,再选board连接  // 通过选board,和internet 实现连板子，还是上internet的切换</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ifconfig //看ip是否已变为了192.168.9.120</span><br><span class="line">ping 192.168.9.100  //测试电脑和虚拟机是否联通 （如不通，可尝试修复一下网卡，重启虚拟机）   </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="设置【宿主机】的IP地址：也就是pc机的ip地址-192-168-9-100-；"><a href="#设置【宿主机】的IP地址：也就是pc机的ip地址-192-168-9-100-；" class="headerlink" title="设置【宿主机】的IP地址：也就是pc机的ip地址 192.168.9.100 ；"></a>设置【宿主机】的IP地址：也就是pc机的ip地址 192.168.9.100 ；</h4><p>打开windows网络与共享中心–&gt;本地连接–&gt;属性–&gt;IPV4地址配置–&gt;配置IP；192.168.9.100设置【目标机】的ip地址：<br>启动开发板</p><blockquote><p>printenv（pri）： 输出当前环境信息；<br>setenv（set）：设置环境变量；<br>saveenv（save）：保存环境变量；</p><p>set ipaddr 192.168.9.233//设置【目标机】开发板的ip地址；<br>set serverip 192.168.9.120//设置【开发主机】ubuntu的ip地址；<br>set gatewayip 192.168.9.1//设置网关<br>set netmask 255.255.255.0//设置子网掩码<br>saveenv//保存环境变量到emmc中；</p></blockquote><blockquote><p>注意：<br>保证开发主机和目标机在同一个网段；<br>设置的serverip要与开发主机的ip地址保持一致；<br>设置完成需要对数据进行保存，否则断电数据丢失；</p></blockquote><h4 id="确认是否建立好网络通信："><a href="#确认是否建立好网络通信：" class="headerlink" title="确认是否建立好网络通信："></a>确认是否建立好网络通信：</h4><p>在目标机上通过ping命令检测</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ping 192.168.9.120</span><br></pre></td></tr></tbody></table></figure><p>出现的结果：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ping failed; host 192.168.9.120 is not alive</span><br></pre></td></tr></tbody></table></figure><p>说明网络未连通；<br>分析错误原因：</p><blockquote><p>a. 检测网线是否连通；<br>b. 检测参数是否都正确；<br>c. 检测serverip是否和开发主机的ip一致;<br>d. 检测开发主机和宿主机是否桥接的是有线网卡；</p></blockquote><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">host 192.168.9.120 is alive</span><br></pre></td></tr></tbody></table></figure><p>说明网络连通；</p><h3 id="文件的传输"><a href="#文件的传输" class="headerlink" title="文件的传输"></a>文件的传输</h3><p>tftp服务来传输文件<br>【开发主机】建立tftp服务器：<br>检查是否安装过tftp</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-cache policy tftpd-hpa</span><br></pre></td></tr></tbody></table></figure><p>安装tftp服务器：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install tftpd-hpa tftp-hpa</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：虚拟机需要连外网，也就是能够ping <a href="http://www.baidu.com/">www.baidu.com</a> </p></blockquote><h4 id="配置tftp服务器"><a href="#配置tftp服务器" class="headerlink" title="配置tftp服务器"></a>配置tftp服务器</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/default/tftpd-hpa</span><br><span class="line">TFTP_USERNAME=<span class="string">"tftp"</span><span class="comment">#用户的使用命令；</span></span><br><span class="line">TFTP_DIRECTORY=<span class="string">"/tftpboot"</span><span class="comment">#共享文件的路径；</span></span><br><span class="line">TFTP_ADDRESS=<span class="string">"0.0.0.0:69"</span><span class="comment">#服务器的ip地址和端口号；</span></span><br><span class="line">TFTP_OPTIONS=<span class="string">"-l -c -s"</span></span><br><span class="line">根文件系统下面创建目录tftpboot,修改共享文件的权限</span><br><span class="line">sudo <span class="built_in">chmod</span> 0777 /tftpboot</span><br></pre></td></tr></tbody></table></figure><h4 id="启动tftp服务器"><a href="#启动tftp服务器" class="headerlink" title="启动tftp服务器"></a>启动tftp服务器</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo service tftpd-hpa restart//重启</span><br></pre></td></tr></tbody></table></figure><p>将需要传输的文件存储在共享目录中(/tftpboot)</p><p>测试是否成功安装</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">tftp 127.0.0.1    </span><br><span class="line">tftp&gt;get &lt;filename&gt;    </span><br><span class="line">tftp&gt;q</span><br></pre></td></tr></tbody></table></figure><h4 id="【目标机】下载文件"><a href="#【目标机】下载文件" class="headerlink" title="【目标机】下载文件"></a>【目标机】下载文件</h4><p>把day1的镜像目录下的uImage，exynos4412-fs4412.dtb，ramdisk.img拷贝到/tftpboot目录下</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tftp 41000000 uImage//下载内核</span><br><span class="line">tftp 42000000 exynos4412-fs4412.dtb//下载设备树</span><br><span class="line">tftp 43000000 ramdisk.img//下载根文件系统</span><br><span class="line">bootm 41000000 43000000 42000000</span><br></pre></td></tr></tbody></table></figure><p> 内核地址根文件系统地址设备树地址<br>注意：地址顺序不能出错；  </p><p>验证：当板子重启时，不能重新运行系统；<br>解决：设置启动参数</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> bootcmd tftp 41000000 uImage\; tftp 42000000 exynos4412-fs4412.dtb\;tftp 43000000 ramdisk.img\; bootm 41000000 43000000 42000000</span><br><span class="line">boot</span><br></pre></td></tr></tbody></table></figure><h3 id="交叉编译器安装"><a href="#交叉编译器安装" class="headerlink" title="交叉编译器安装"></a>交叉编译器安装</h3><ol><li>将gcc-4.6.4.tar.xz 拷贝到虚拟机的某一个目录中<br>cp gcc-4.6.4.tar.xz ~/workspace/fs4412</li><li>进入到所对应的目录中，解压gcc-4.6.4.tar.xz<br>cd ~/workspace/fs4412<br>tar -xvf gcc-4.6.4.tar.xz</li><li>进入到gcc-4.6.4目录中，通过pwd查看绝对路径；<br>cd gcc-4.6.4/bin<br>pwd   === &gt; /home/farsight/workspace/fs4412/gcc-4.6.4/bin</li><li>修改PATH的值；<br>进入到/etc/bash.bashrc,在文件的最前面添加<br>sudo vim /etc/bash.bashrc<br>export PATH=$PATH:/home/farsight/workspace/fs4412/gcc-4.6.4/bin</li><li>重启；<br>source /etc/bash.bashrc</li></ol><p>arm-nTAB键==》 </p><p>6.测试：<br>a.生成可执行文件：arm-none-linux-guneabi-gcc 1.c<br>b.拷贝执行文件到下载目录: cp a.out /tftpboot<br>c.在板子上使用tftp下载a.out到板子上： tftp -g -r a.out 192.168.9.120 （注：板子和Ubuntu必须在同一网段）<br>注：使用tftp上传文件到服务器 tftp -p -r a.out 192.168.9.120<br>d.修改a.out权限：chmod 777 a.out<br>e.执行a.out: ./a.out<br>}</p><h3 id="nfs挂载文件"><a href="#nfs挂载文件" class="headerlink" title="nfs挂载文件"></a>nfs挂载文件</h3><h4 id="【开发主机】"><a href="#【开发主机】" class="headerlink" title="【开发主机】"></a>【开发主机】</h4><ol start="0"><li>查看是否安装过nfs服务器：<br>sudo apt-cache policy nfs-kernel-server</li><li>安装nfs服务器<br>sudo apt-get install nfs-kernel-server</li><li>配置nfs服务器</li></ol><ol><li><p>拷贝day1镜像目录下的根文件系统rootfs.tar.xz到开发主机中的一个目录（例如/source/nfs）<br>cp rootfs.tar.xz /source/nfs</p></li><li><p>进入到rootfs.tar.xz所对应的目录中<br>cd /source/nfs</p></li><li><p>解压根文件系统<br>tar -xvf rootfs.tar.xz</p></li><li><p>进入到rootfs目录，使用pwd确定所对应的绝对路径<br>cd rootfs<br>pwd  —-&gt; /source/nfs/rootfs   就是用来挂载的共享路径；</p></li><li><p>修改nfs配置文件 sudo vim  /etc/exports<br>在文件的尾部添加代码：<br>/source/nfs/rootfs  *(rw,sync,no_root_squash,no_subtree_check)<br>注意：路径需要和根文件系统的实际路径一致；</p></li></ol><ol start="3"><li><p>启动nfs服务器：<br>sudo service nfs-kernel-server restart</p></li><li><p>测试是否配置成功<br>sudo mount -t nfs localhost:/source/nfs/rootfs/  /mnt/  //测试nfs服务是否安装成功。<br>ls /mnt/  /*如果其中的内容和/nfs/rootfs中一致。 表示有挂载成功<br>如显示下面内容，表示成功<br>bin  dev  etc  lib  linuxrc  mnt  proc  root  sbin  sys  tmp  usr  var<br> */<br> sudo umount /mnt   //解除挂载</p></li></ol><h4 id="【目标机】"><a href="#【目标机】" class="headerlink" title="【目标机】"></a>【目标机】</h4><p>设置启动参数：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> bootcmd tftp 41000000 uImage\; tftp 42000000 exynos4412-fs4412.dtb\; bootm 41000000 - 42000000</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> bootargs root=/dev/nfs nfsroot=192.168.12.130:/source/nfs/rootfs rw console=ttySAC2,115200 init=/linuxrc ip=192.168.12.133 clk_ignore_unused=<span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>第一个ip地址是服务器ip地址，第二个ip地址是板子ip地址</p><p>set之后需要保存 <code>save</code>不然只生效一次，关机消失</p></blockquote><p>2、开发板重新启动: 开发板自动进入 下面界面<br>[root@farsight ]#   — 成功</p><p>把文件放入虚拟机中Linux的共享目录/source/nfs/rootfs中，开发板中自然会出现这个文件<br>在虚拟机中 cp  a.out  /source/nfs/rootfs<br>开发板中出现下面界面：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@farsight ]<span class="comment"># ls</span></span><br><span class="line">1.c      bin      etc      linuxrc  proc     sbin     tmp      var</span><br><span class="line">a.out    dev      lib      mnt      root     sys      usr</span><br></pre></td></tr></tbody></table></figure><h4 id="【问题解决】"><a href="#【问题解决】" class="headerlink" title="【问题解决】"></a>【问题解决】</h4><p>nfs本机测试没问题，但是挂载到开发板失败</p><p>方法一：如果ubuntu是18.04<br>Ubuntu 18.04 nfs 默认为协议3和协议4，但是 我的uboot 默认启动的是协议2的形式<br>如:  /srv/homes    hostname1(rw,sync,no_subtree_check)<br>若想要求 nfs 支持协议2，就在/etc/default/nfs-kernel-server末尾加一句：<br>RPCNFSDOPTS=”–nfs-version 2,3,4 –debug –syslog”</p><p>方法二：如果ubuntu是20.04<br>1）把nfs配置文件备份<br>sudo mv /etc/default/nfs-kernel-server  /etc/default/nfs-kernel-server.back</p><ol start="2"><li>替换nfs配置文件<br> 把day1镜像目录下的nfs-kernel-server拷贝到/etc/default目录下</li></ol>  <figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> nfs-kernel-server  /etc/default</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>重启nfs服务</li></ol>  <figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo service nfs-kernel-server restart</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>重新挂载到开发板</li></ol><p>方法三：如果是ubuntu22.04</p><p>参考：<a href="https://blog.csdn.net/a_qwq_a/article/details/130651360">https://blog.csdn.net/a_qwq_a/article/details/130651360</a></p><p>【把内核设备树根文件系统烧写到EMMC上，直接启动】</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#a)拷贝第一天/镜像文件/ramdisk.img拷贝到虚拟机/tftpboot目录下</span></span><br><span class="line"><span class="comment">#b)烧写内核镜像到EMMC上</span></span><br><span class="line"></span><br><span class="line">tftp 41000000 uImage</span><br><span class="line"></span><br><span class="line">movi  write  kernel  41000000</span><br><span class="line"></span><br><span class="line"><span class="comment">#c)烧写设备树文件到EMMC上</span></span><br><span class="line"></span><br><span class="line">tftp  41000000 exynos4412-fs4412.dtb</span><br><span class="line"></span><br><span class="line">movi  write  dtb  41000000=</span><br><span class="line"></span><br><span class="line"><span class="comment">#d)烧写文件系统镜像到EMMC上</span></span><br><span class="line"></span><br><span class="line">tftp  41000000  ramdisk.img</span><br><span class="line"></span><br><span class="line"><span class="comment">#movi  write  rootfs  41000000  3000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#e)设置启动参数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> bootcmd movi <span class="built_in">read</span> kernel 41000000\;movi <span class="built_in">read</span> dtb 42000000\;movi <span class="built_in">read</span> rootfs 43000000 3000000\;bootm 41000000 43000000 42000000</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> bootargs</span><br><span class="line"></span><br><span class="line">saveenv</span><br><span class="line"></span><br><span class="line"><span class="comment">#f)重新启动开发板，u-boot自动加载、执行内核</span></span><br></pre></td></tr></tbody></table></figure><h3 id="BootLoader-移植"><a href="#BootLoader-移植" class="headerlink" title="BootLoader 移植"></a>BootLoader 移植</h3><h4 id="【移植方法】"><a href="#【移植方法】" class="headerlink" title="【移植方法】"></a>【移植方法】</h4><ol><li>善用Beyond来对比两个文件</li><li>选择官方源码版本，配置编译<ol><li>指定交叉编译工具链</li><li>指定cpu和board（参考最类似的配置origen）</li><li>编译</li></ol></li><li>实现串口信息输出<ol><li>跟踪运行路径（led点灯法）</li><li>串口输出（检查uart初始化相关代码部分，见lowlevel_init.s）</li></ol></li><li>网卡移植（实现能用tftp nfs方便调试开发）<ol><li>寄存器地址</li><li>参数设置</li></ol></li><li>FLASH移植（实现能下载软件到FLASH，产品能离线运行）</li></ol><h4 id="【目的】"><a href="#【目的】" class="headerlink" title="【目的】"></a>【目的】</h4><p>移植uboot使kernel能够正常启动起来</p><h4 id="【准备资料】"><a href="#【准备资料】" class="headerlink" title="【准备资料】"></a>【准备资料】</h4><p>原理图、芯片手册、参考代码</p><h4 id="【分析】"><a href="#【分析】" class="headerlink" title="【分析】"></a>【分析】</h4><p>架构：</p><ol><li>确认芯片的架构：ARMv7</li><li>uboot中是否支持ARM架构：arch/arm/cpu/armv7/<br>NO: 1) 找老大要； 2)找芯片厂商； 3) 找百度……<br>YES : goto</li></ol><p>板子：</p><ol><li>确认板子信息：fs4412</li><li>uboot中是否支持fs4412板子； board<br>NO :1) 找老大要; 2)找芯片厂商； 3) 找百度…… 4) 借鉴(我们这个板子，借鉴的是 board/samsung/origen/)<br>YES : goto</li></ol><p>【移植】</p><ol start="0"><li><p>准备工作：</p><ol><li><p>a、需要下载uboot：u-boot-2013.01.tar.bz2</p></li><li><p>b、拷贝u-boot到家目录下的某一个目录中；cp u-boot-2013.01.tar.bz2  ~/workspace/fs4412</p></li><li><p>进入到目录中，解压uboot并进入u-boot目录中；</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/workspace/fs4412</span><br><span class="line">tar xf u-boot-2013.01.tar.bz2</span><br><span class="line"><span class="built_in">cd</span> u-boot-2013.01</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><p>借鉴origen板子的信息；  </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">find . -name origen*</span><br><span class="line"><span class="comment">#拷贝板子头文件信息：</span></span><br><span class="line"><span class="built_in">cp</span> include/configs/origen.h include/configs/fs4412.h</span><br><span class="line"><span class="comment">#拷贝并且修改板级文件：</span></span><br><span class="line"><span class="built_in">cp</span> board/samsung/origen/ board/samsung/fs4412 -afr</span><br><span class="line"><span class="built_in">mv</span> board/samsung/fs4412/origen.c board/samsung/fs4412/fs4412.c</span><br></pre></td></tr></tbody></table></figure></li></ol><p>修改board/samsung/fs4412/Makefile的目标文件:<br>vim board/samsung/fs4412/Makefile<br>将 31行 的 origen.o 修改为 fs4412.o</p><p>修改u-boot目录下板级配置文件 boards.cfg<br>在origen后面添加新行</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">40 <span class="comment"># Target                     ARCH        CPU         Board name          Vendor         SoC         Options</span></span><br><span class="line">41 <span class="comment">###########################################################################################################</span></span><br><span class="line"></span><br><span class="line">284 origen                       arm         armv7       origen              samsung        exynos</span><br><span class="line">285 fs4412                       arm         armv7       fs4412              samsung        exynos</span><br></pre></td></tr></tbody></table></figure><p>重新编译：烧写到emmc启动开发板，</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">make distclean//清除原有的配置文件和生产的文件</span><br><span class="line">make fs4412_config//添加现有板子的配置文件</span><br><span class="line">make //编译uboot -&gt;生产u-boot.bin</span><br><span class="line"><span class="built_in">cp</span> u-boot.bin /tftpboot//将生成的u-boot.bin拷贝到tftp共享文件中；</span><br></pre></td></tr></tbody></table></figure><p>将拨码开关拨到100x SD启动</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tftp 41000000 u-boot.bin//在目标机上下载u-boot到41000000</span><br><span class="line">movi write u-boot 41000000//将41000000地址空间的数据写入到uboot对应的位置</span><br></pre></td></tr></tbody></table></figure><blockquote><p>将拨码开关拨到011x emmc启动<br>观察现象：串口没有数据输出，板子没有任何反应；（板砖）</p></blockquote><blockquote><p>分析原因：uboot是否执行：<br>解决办法： 通过点灯的方式验证uboot是否执行</p></blockquote><p>2、在 arch/arm/cpu/armv7/start.S 文件中添加点灯代码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">   /* led on */</span><br><span class="line">   ldr r0, =0x11000c40 @GPK2_7 led2</span><br><span class="line">   ldr r1, [r0]</span><br><span class="line">   bic r1, r1, #0xf0000000</span><br><span class="line">   orr r1, r1, #0x10000000</span><br><span class="line">   str r1, [r0]</span><br><span class="line">   </span><br><span class="line">ldr r0, =0x11000c44</span><br><span class="line">mov r1,#0xff</span><br><span class="line">str r1, [r0]</span><br></pre></td></tr></tbody></table></figure><p>重新编译：将uboot烧写到emmc，通过emmc启动开发板</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">make //编译uboot--&gt;生产u-boot.bin</span><br><span class="line"><span class="built_in">cp</span> u-boot.bin /tftpboot//将生成的u-boot.bin拷贝到tftp共享文件中；</span><br></pre></td></tr></tbody></table></figure><p>将拨码开关拨到100x SD启动</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tftp 41000000 u-boot.bin//在目标机上下载u-boot到41000000</span><br><span class="line">movi write u-boot 41000000//将41000000地址空间的数据写入到uboot对应的位置</span><br></pre></td></tr></tbody></table></figure><p>串口没有数据输出，led并未被点亮；（板砖） –&gt; uboot并未被执行；<br>分析原因：与板子的启动有关系；</p><blockquote><p>解决办法：查看芯片手册，看启动流程,需要添加启动代码：BL1、BL2<br>1） 将CodeSign4SecureBoot 三星提供的安全启动方式拷贝uboot的目录中；<br>2）进入到CodeSign4SecureBoot目录中修改build.sh文件中cp对应行<br>cp u.bin /tftpboot </p><p>3）重新编译 执行build.sh<br>编译的同时将生产的u.bin拷贝到tftp共享文件中；<br>4）通过sd启动方式将uboot烧写到emmc<br>将拨码开关拨到100x SD启动<br>#tftp 41000000 u.bin//在目标机上下载u-boot到41000000<br>#movi write u-boot 41000000//将41000000地址空间的数据写入到uboot对应的位置</p></blockquote><ol start="3"><li>通过emmc启动开发板<br>将拨码开关拨到011x emmc启动<br>观察现象：串口没有数据输出，led亮了，等一会灭了，又亮了，在等会led亮了，等一会灭了，又亮了 ……<br>分析原因：看门狗是否关闭、中断是否关闭、其它；<br>通过排除的方式，看门狗和中断没有问题，而是电源控制单元的问题<br>驱动电路过流或过热保护了。你这情况一般都是过热保护，驱动电路板散热不好，元件过热，电路就会自动断来，等温度降下来后，又再次启动。</li></ol><p>解决办法：添加电源管理相关代码，关闭看门狗</p><ol><li>代码修改<br> vim arch/arm/cpu/armv7/start.S中添加</li></ol>  <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/*for close watchdog */    </span><br><span class="line"> /* PS-Hold high */</span><br><span class="line"> ldr r0, =0x1002330c    /*PS_HOLD_CONTROL*/</span><br><span class="line"> ldr r1, [r0]</span><br><span class="line"> orr r1, r1, #0x300</span><br><span class="line"> str r1, [r0]         </span><br><span class="line"> ldr     r0, =0x11000c08</span><br><span class="line"> ldr r1, =0x0             /*Disables Pull-up/Pull-down*/</span><br><span class="line"> str r1, [r0]</span><br><span class="line"> /* Clear  MASK_WDT_RESET_REQUEST  */</span><br><span class="line"> ldr r0, =0x1002040c</span><br><span class="line"> ldr r1, =0x00</span><br><span class="line"> str r1, [r0]</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><p>重新编译：<br> cd CodeSign4SecureBoot<br> ./build.sh<br> –&gt; 生成的u.bin文件存储在tftp共享文件中</p></li><li><p>通过sd启动方式将uboot烧写到emmc<br> 将拨码开关拨到100x SD启动<br> #tftp 41000000 u.bin//在目标机上下载u-boot到41000000<br> #movi write u-boot 41000000//将41000000地址空间的数据写入到uboot对应的位置</p></li><li><p>通过emmc启动开发板<br> 将拨码开关拨到011x emmc启动</p></li></ol><p>重新观察结果： led常亮(说明uboot正常执行)，但是串口依然没有数据输出；<br>分析原因：串口初始化有问题，通过代码跟踪（串口时钟初始化的问题）；<br>解决办法：</p><ol><li>添加串口时钟初始化代码：board/samsung/fs4412/lowlevel_init.S<br> vim board/samsung/fs4412/lowlevel_init.S</li></ol><p>  在串口初始化代码中的<br>  str     r1, [r0, #EXYNOS4_GPIO_A1_CON_OFFSET]<br>  后面添加</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">     /* 添加串口相关的时钟初始化 */</span><br><span class="line">ldr     r0, =EXYNOS4_CLOCK_BASE      /*system_clock_init*/</span><br><span class="line">ldr     r1, =CLK_SRC_PERIL0_VAL /*uart[0:4]*/</span><br><span class="line">ldr     r2, =CLK_SRC_PERIL0_OFFSET</span><br><span class="line">str     r1, [r0, r2]</span><br><span class="line"></span><br><span class="line">ldr     r1, =CLK_DIV_PERIL0_VAL /*uart clock divisors*/</span><br><span class="line">ldr     r2, =CLK_DIV_PERIL0_OFFSET</span><br><span class="line">str     r1, [r0, r2]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>并且把串口初始化后面的</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#if 0</span><br><span class="line">bl tzpc_init </span><br><span class="line">#endif</span><br></pre></td></tr></tbody></table></figure><p>屏蔽掉</p><ol start="2"><li><p>重新编译：<br>cd CodeSign4SecureBoot<br>./build.sh<br>–&gt; 生成的u.bin文件存储在tftp共享文件中</p></li><li><p>通过sd启动方式将uboot烧写到emmc<br>将拨码开关拨到100x SD启动</p></li></ol><p>#tftp 41000000 u.bin//在目标机上下载u-boot到41000000<br>#movi write u-boot 41000000//将41000000地址空间的数据写入到uboot对应的位置<br>4) 通过emmc启动开发板<br>将拨码开关拨到011x SD启动</p><h3 id="内核移植"><a href="#内核移植" class="headerlink" title="内核移植"></a>内核移植</h3><h4 id="一、-内核准备："><a href="#一、-内核准备：" class="headerlink" title="一、 内核准备："></a>一、 内核准备：</h4><ol><li><p>内核源代码准<br> 1）官网下载Linux内核源代码<br> 2）找供应商要（得到Linux内核源代码：linux-3.14.tar.xz）</p></li><li><p>拷贝源代码到工作目录：<br> cp linux-3.14.tar.xz </p></li><li><p>进入Linux内核源代码所在目录，解压Linux内核源代码<br> cd<br> tar xf linux-3.14.tar.xz</p></li><li><p>进入到源代码目录中<br> cd linux-3.14</p></li></ol><h4 id="二、-内核编译："><a href="#二、-内核编译：" class="headerlink" title="二、 内核编译："></a>二、 内核编译：</h4><ol start="5"><li><p>修改编译平台和交叉编译环境<br> 进入Makefile文件，修改参数：<br> 修改：<br>199 ARCH?= $(SUBARCH)<br>200 CROSS_COMPILE?= $(CONFIG_CROSS_COMPILE:”%”=%)<br> 为：<br>199 ARCH            ?= arm<br>200 CROSS_COMPILE   ?= arm-none-linux-gnueabi-</p></li><li><p>导入默认配置，配置文件放在 arch/arm/configs下<br> make exynos_defconfig</p></li><li><p>配置内核<br> make menuconfig<br> 正常执行，会弹出一个菜单选项，我们可以去选择需要配置的内核；<br> 注意：<br> (如果在编译的时候出现了下面的错误，则说明图形界面库没有安装，需要安装库</p><p>   sudo apt-get install exuberant-ctags<br>   sudo apt-get install libncurses5-dev</p></li></ol><p>  )</p><blockquote><p>*** Unable to find the ncurses libraries or the<br> *** required header files.<br> *** ‘make menuconfig’ requires the ncurses libraries.</p><p> *** Install ncurses (ncurses-devel) and try again.</p><p>make[1]: *** [scripts/kconfig/dochecklxdialog] Error 1<br>make: *** [menuconfig] Error 2</p><p>第二种：<br>farsight@ubuntu:~/fs4412/1905/linux-3.14$ make menuconfig<br>scripts/kconfig/mconf Kconfig<br>Your display is too small to run Menuconfig!<br>It must be at least 19 lines by 80 columns.<br>make[1]: *** [menuconfig] Error 1<br>make: *** [menuconfig] Error 2</p><p>表示终端太小，全屏显示就可以解决</p><pre><code>正常执行菜单选项，选择串口信息：/* 将串口选择为 2  */System Type  ---&gt;    (2) S3C UART to use for low-level messages</code></pre></blockquote><ol start="8"><li>编译内核<br> make uImage<br> 编译成功会生成一个经过压缩后的镜像文件uImage，其生成的文件路径为：arch/arm/boot/uImage<br> 注意：(如果在编译的时候出现了下面的错误，则说明缺少mkimage工具，<br> 需将第一天工具中的mkimage拷贝到ubuntu的/usr/bin目录下)<br> “mkimage” command not found - U-Boot images will not be built<br> make[1]: *** [arch/arm/boot/uImage] Error 1<br> make: *** [uImage] Error 2</li></ol><h4 id="三、设备树编译："><a href="#三、设备树编译：" class="headerlink" title="三、设备树编译："></a>三、设备树编译：</h4><ol start="9"><li><p>修改设备树文件<br> 参考板origen的设备数文件为参考：<br> cp arch/arm/boot/dts/exynos4412-origen.dts arch/arm/boot/dts/exynos4412-fs4412.dts</p></li><li><p>修改Makefile，添加编译项：<br>vim arch/arm/boot/dts/Makefile<br>在<br>exynos4412-origen.dtb <br>下添加如下内容<br>exynos4412-fs4412.dtb \</p></li><li><p>编译设备树文件：<br>make dtbs</p></li><li><p>拷贝编译的内核和设备树到tftp共享文件中<br>cp arch/arm/boot/uImage /tftpboot<br>cp arch/arm/boot/dts/exynos4412-fs4412.dtb /tftpboot</p></li></ol><h4 id="四、调试内核和设备树；"><a href="#四、调试内核和设备树；" class="headerlink" title="四、调试内核和设备树；"></a>四、调试内核和设备树；</h4><p>采用tftp下载内核和设备树，nfs挂载根文件系统<br>    set tftp 41000000 uImage; tftp 42000000 exynos4412-fs4412.dtb; bootm 41000000 - 42000000<br>    set bootargs root=/dev/nfs nfsroot=192.168.12.135:/source/nfs/rootfs rw clk_ignore_unused console=ttySAC2,115200 init=/linuxrc ip=192.168.12.133</p><p>set bootargs root=/dev/nfs nfsroot=192.168.12.135:/home/yzy/rootfs/ rw clk_ignore_unused console=ttySAC2,115200 init=/linuxrc ip=192.168.12.133</p><p>​saveenv<br>掉电重启板子  //会看到内核信息输出。 但后面有报错，正常 （因为网卡等还没移植，nfs挂载肯定失败）</p><h4 id="【网卡驱动的移植】"><a href="#【网卡驱动的移植】" class="headerlink" title="【网卡驱动的移植】"></a>【网卡驱动的移植】</h4><ol><li>修改设备树文件</li></ol><p>添加：linux-3.14/arch/arm/boot/dts/exynos4412-fs4412.dts</p><pre><code>    srom-cs1@5000000 {        compatible = "simple-bus";        #address-cells = &lt;1&gt;;        #size-cells = &lt;1&gt;;        reg = &lt;0x5000000 0x1000000&gt;;        ranges;                ethernet@5000000 {        compatible = "davicom,dm9000";        reg = &lt;0x5000000 0x2 0x5000004 0x2&gt;;        interrupt-parent = &lt;&amp;gpx0&gt;;        interrupts = &lt;6 4&gt;;        davicom,no-eeprom;        mac-address = [00 0a 2d a6 55 a2];    };};</code></pre><p>添加设备编译参数<br>make menuconfig</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[*] Networking support  ---&gt;    //配置支持TCP/IP</span><br><span class="line">Networking options  ---&gt;</span><br><span class="line">&lt;*&gt; Packet socket</span><br><span class="line">&lt;*&gt;Unix domain sockets </span><br><span class="line">[*] TCP/IP networking</span><br><span class="line">[*]   IP: kernel level autoconfiguration</span><br><span class="line">Device Drivers  ---&gt;   //配置支持DM9000网卡驱动</span><br><span class="line">[*] Network device support  ---&gt;</span><br><span class="line">[*]   Ethernet driver support (NEW)  ---&gt;</span><br><span class="line">&lt;*&gt;   DM9000 support</span><br><span class="line">File systems  ---&gt;  //配置支持网络文件系统NFS</span><br><span class="line">[*] Network File Systems (NEW)  ---&gt;</span><br><span class="line">&lt;*&gt;   NFS client support</span><br><span class="line">[*]     NFS client support <span class="keyword">for</span> NFS version 2</span><br><span class="line">[*]     NFS client support <span class="keyword">for</span> NFS version 3</span><br><span class="line">[*]       NFS client support <span class="keyword">for</span> the NFSv3 ACL protocol extension</span><br><span class="line">[*]   Root file system on NFS</span><br></pre></td></tr></tbody></table></figure><p>重新编译内核和设备树<br>    make uImage<br>    make dtbs<br>将编译好的内核和设备树拷贝到tftp共享目录中<br>    cp arch/arm/boot/uImage /tftpboot<br>    cp arch/arm/boot/dts/exynos4412-fs4412.dtb /tftpboot<br>采用tftp下载内核和设备树，nfs挂载根文件系统<br>    set tftp 41000000 uImage; tftp 42000000 exynos4412-fs4412.dtb; bootm 41000000 - 42000000<br>    set bootargs root=/dev/nfs nfsroot=192.168.1.190:/source/nfs/rootfs rw clk_ignore_unused console=ttySAC2,115200 init=/linuxrc ip=192.168.1.191</p><p>如果挂载失败：修改文件drivers/clk/clk.c<br>    修改static bool clk_ignore_unused; 为：static bool clk_ignore_unused = true;    //忽略时钟</p><h4 id="【LED灯的移植】"><a href="#【LED灯的移植】" class="headerlink" title="【LED灯的移植】"></a>【LED灯的移植】</h4><p>把驱动fs4412_led_drv.c 放置在drivers/char目录下<br>第一种：<br>{<br>    $ vim  drivers/char/Makefile /* 把驱动加入编译列表中<br>       在末尾添加 obj-y += fs4412_led_drv.o<br>       */</p><p>  $ make uImage<br>  $ cp arch/arm/boot/uImage  /tftpboot<br>}</p><p>{第二种：<br>    $ vim  drivers/char/Makefile /* 把驱动加入编译列表中<br>       在末尾添加 obj-$(CONFIG_FS4412_LED) += fs4412_led_drv.o<br>       */</p><pre><code>$ vim  drivers/char/Kconfig  /* 增加驱动的菜单配置选项（make menuconfig时能看到）  在menu "Character devices"下面 添加   config FS4412_LED            bool "FS4412LED Device Support"       //bool--表示是否加载入内核            depends on ARCH_EXYNOS4          help                  support  led device on FS4412 develop board   */</code></pre><p>  $ make menuconfig  /* 配置编译驱动进内核<br>        Device Drivers  —&gt;<br>                Character devices  —&gt;<br>                    [*]FS4412  LED Device Support<br>     */</p><p>  $ make uImage<br>  $ cp arch/arm/boot/uImage  /tftpboot<br>}</p><p>  //—测试驱动<br>  $ arm-none-linux-gnueabi-gcc  fs4412_led_app.c   //编译用于测试驱动的应用程序,默认编译会生成 a.out<br>  $ cp a.out /source/nfs/rootfs<br>  重启板子,进入根文件系统</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mknod</span> /dev/led  c  500  0  /*创建设备节点</span><br><span class="line">    <span class="built_in">mknod</span>     专门用于创建设备节点的命令</span><br><span class="line">    /dev/led  是设备文件名</span><br><span class="line">    c         表示是字符设备</span><br><span class="line">    500       主设备号 </span><br><span class="line">    0         次设备号</span><br><span class="line">*/</span><br></pre></td></tr></tbody></table></figure><p>./a.out  //运行测试程序， 会看到灯闪烁</p><h3 id="根文件系统移植"><a href="#根文件系统移植" class="headerlink" title="根文件系统移植"></a>根文件系统移植</h3><h4 id="安装-BusyBox"><a href="#安装-BusyBox" class="headerlink" title="安装 BusyBox"></a>安装 BusyBox</h4><ol><li>将busybox-1.22.1.tar.bz2拷贝到你需要操作的目录<br> cp busybox-1.22.1.tar.bz2 /home/farsight/workpace/fs4412</li><li>解压busybox-1.22.1.tar.bz2<br> tar xf busybox-1.22.1.tar.bz2</li><li>进入到busybox目录中<br> cd busybox-1.22.1</li><li>配置编译信息<br> make menuconfig//弹出图像界面<br> Busybox Settings  —&gt; //设置busybox<br> Build Options  —&gt; //编译选项<br>     [*] Build BusyBox as a static binary (no shared libs)//采用静态编译<br>     (arm-linux-) Cross Compiler prefix//采用的编译器是arm-linux-<br> Installation Options (“make install” behavior)  —&gt;//设置安装路径<br>     (./rootfs) BusyBox installation prefix//设置安装路径为./rootfs,如果采用默认路径为./_install</li><li>编译busybox<br> make</li><li>安装busybox<br> make install</li><li>替换共享目录<br> rm -r /source/nfs/rootfs<br> cp -r rootfs /source/nfs</li></ol><p>启动开发板，观察现象：<br>此时的文件系统能够启动，但是缺少文件；</p><h4 id="创建缺少的目录"><a href="#创建缺少的目录" class="headerlink" title="创建缺少的目录"></a>创建缺少的目录</h4><p>mkdir etc dev tmp mnt proc sys var lib</p><h4 id="添加所需要的库代码"><a href="#添加所需要的库代码" class="headerlink" title="添加所需要的库代码"></a>添加所需要的库代码</h4><p>sudo cp -a /home/farsight/gcc-4.6.4/arm-arm1176jzfssf-linux-gnueabi/lib/* ./lib/      */<br>进入lib目录删除无用的库，用来保证rootfs足够小，但是要功能的实训；<br>sudo rm *.a<br>sudo chmod 0777 *<br>arm-none-linux-gnueabi-strip *</p><h4 id="sudo-mknod-dev-x2F-console-c-5-1"><a href="#sudo-mknod-dev-x2F-console-c-5-1" class="headerlink" title="sudo mknod dev/console c 5 1"></a>sudo mknod dev/console c 5 1</h4><h4 id="添加启动配置信息"><a href="#添加启动配置信息" class="headerlink" title="添加启动配置信息 {"></a>添加启动配置信息 {</h4><p>1)/etc/init.d/rcS<br>    #!/bin/sh<br>    # This is the first script called by init process<br>    /bin/mount  -a<br>    echo  /sbin/mdev  &gt;  /proc/sys/kernel/hotplug<br>    /sbin/mdev  -s</p><ol start="2"><li><p>/etc/inittab<br> #this is run first except when booting in single-user mode.<br> ::sysinit:/etc/init.d/rcS</p><p> /bin/sh invocations on selected ttys</p><p> start an “askfirst” shell on the console (whatever that may be)</p><p> ::askfirst:-/bin/sh</p><p> stuff to do when restarting the init process</p><p> ::restart:/sbin/init</p><p> stuff to do before rebooting</p><p> ::ctrlaltdel:/sbin/reboot</p></li><li><p>/etc/fstab<br> #device     mount-point         type            options         dump     fsck order<br> proc    /proc                   proc            defaults                0               0<br> tmpfs   /tmp                    tmpfs           defaults                0               0<br> sysfs   /sys                    sysfs           defaults                0               0<br> tmpfs   /dev                    tmpfs           defaults                0               0</p></li><li><p>/etc/profile<br> LD_LIBRARY_PATH=/lib:/usr/lib<br> export LD_LIBRARY_PAHT<br> PATH=/bin:/sbin:/usr/bin:/usr:/sbin<br> export PATH<br> export HOSTNAME=Farsight<br> export USER=root<br> export HOME=root<br> export PS1=”[$USER@$HOSTNAME:\W]# “</p><p> export QTDIR=/usr/local/Trolltech/QtEmbedded-4.8.6-arm<br> export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH<br> export PATH=$QTDIR/bin:$PATH<br> export QWS_SIZE=”1024x600”<br> export QT_QWS_FONTDIR=$QTDIR/lib/fonts</p></li></ol><p>如果根文件系统需要烧写flash里面，需要去制作镜像文件；<br>制作ramdisk.img<br>   $ cd ~<br>   $ dd if=/dev/zero of=initrd.img bs=1k count=8192  //创建一个8M的空磁盘， 表示把/dev/zero中数据读到initrd.img   if–表示输入设备  of–输出  bs–单元  count–数目<br>   $ mkfs.ext2 -F initrd.img         //把initrd.img制作成ext2格式的文件<br>   $ mount  -t  ext2   -o  loop  initrd.img  /mnt/     //把initrd.img挂载到/mnt/  设备需要挂载后才能拷贝<br>        //如果报错：cp: writing `/mnt/rootfs/lib/libBrokenLocale-2.17.so’: No space left on device<br>        //说明根文件太大，需要裁剪一部分<br>   $ cp /nfs/rootfs/* /mnt/ -a                     */    //把文件系统拷贝到/mnt中，也就是initrd.img中<br>   $ umount /mnt/<br>   $ gzip  –best  -c  initrd.img  &gt;  initrd.img.gz  //压缩之前，确认已umount ,避免数据正被使用，压缩出错<br>   $ mkimage -n “ramdisk” -A arm -O linux -T ramdisk -C gzip -d initrd.img.gz ramdisk.img   //把根文件系统制作成u-boot能识别的格式<br>   $ cp  ramdisk.img  /tftpboot</p><p>   //注意验证根文件系统时，使用的是第一天共享的完全OK的内核<br>   #setenv bootcmd tftp 41000000 uImage;tftp 42000000 exynos4412-fs4412.dtb;tftp 43000000  ramdisk.img;bootm 41000000 43000000 42000000   /* </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>系统移植</title>
      <link href="/2023/05/29/%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/"/>
      <url>/2023/05/29/%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="系统移植"><a href="#系统移植" class="headerlink" title="系统移植"></a>系统移植</h1><h2 id="系统启动顺序"><a href="#系统启动顺序" class="headerlink" title="系统启动顺序"></a>系统启动顺序</h2><blockquote><p>上电—&gt;bootloader—&gt;内核—&gt;根文件系统—&gt;application</p></blockquote><h2 id="gun工具"><a href="#gun工具" class="headerlink" title="gun工具"></a>gun工具</h2><p>dmesg :打印内核的调试信息</p><p>addr2line：把地址转化为行号</p><p>strip：丢弃目标文件的全部或者特定符号，减小文件体积                                                                                                   </p><h2 id="Bootloader"><a href="#Bootloader" class="headerlink" title="Bootloader"></a>Bootloader</h2><p>———–<strong>uboot是Bootloader的一种版本</strong></p><p>Bootloader是硬件的启动的引导程序，是运行操作系统的前提</p><h3 id="Bootloader命令"><a href="#Bootloader命令" class="headerlink" title="Bootloader命令"></a>Bootloader命令</h3><p><code>boot</code>：启动</p><p><code>bootcmd</code>：启动命令，当上电不打断时，u-boot自动按照<code>bootcmd</code>中的命令一天一天去执行</p><p><code>bootargs</code>：启动参数</p><h2 id="Bootloader问题"><a href="#Bootloader问题" class="headerlink" title="Bootloader问题"></a>Bootloader问题</h2><h3 id="第一条指令存放的位置？"><a href="#第一条指令存放的位置？" class="headerlink" title="第一条指令存放的位置？"></a>第一条指令存放的位置？</h3><h3 id="初始化哪些硬件？顺序如何？"><a href="#初始化哪些硬件？顺序如何？" class="headerlink" title="初始化哪些硬件？顺序如何？"></a>初始化哪些硬件？顺序如何？</h3><h3 id="内核存放的位置？"><a href="#内核存放的位置？" class="headerlink" title="内核存放的位置？"></a>内核存放的位置？</h3><h3 id="如何提升性能？"><a href="#如何提升性能？" class="headerlink" title="如何提升性能？"></a>如何提升性能？</h3><h3 id="开发语言？"><a href="#开发语言？" class="headerlink" title="开发语言？"></a>开发语言？</h3><h2 id="Bootloader启动流程"><a href="#Bootloader启动流程" class="headerlink" title="Bootloader启动流程"></a>Bootloader启动流程</h2><p>三个二：两种语言，两次搬移，两次初始化</p><p>汇编阶段：设置SVC；关闭看门狗、MMU、Cache；开启ETC、Flash、内存、串口；自搬移到内存中；准备运行C</p><p>C语言阶段：初始化大部分硬件；把内核搬移到内存中</p><h2 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h2><p>RISC： 精简指令集</p><p>linux中是用命令<code>ifconfig ethX XXX.XXX.XXX.XXX netmask XXX.XXX.XXX.XXX</code> 主要把ethx中的x换成对于的数字</p><h2 id="内核的启动流程"><a href="#内核的启动流程" class="headerlink" title="内核的启动流程"></a>内核的启动流程</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ARM架构</title>
      <link href="/2023/05/15/ARM%E6%9E%B6%E6%9E%84/"/>
      <url>/2023/05/15/ARM%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="ARM基础"><a href="#ARM基础" class="headerlink" title="ARM基础"></a>ARM基础</h3><h3 id="ARM硬件组成及运行原理"><a href="#ARM硬件组成及运行原理" class="headerlink" title="ARM硬件组成及运行原理"></a>ARM硬件组成及运行原理</h3><ol><li><p>硬件组成</p><ol><li>CPU：控制器 ALU预算期 寄存器</li><li>flash：存储程序</li><li>内存：运行程序</li></ol></li><li><p>运行原理</p><p>​设备上电之后，控制器寻址并译码，运算器进行预算，运算量及预算结果保存在寄存器</p></li></ol><h3 id="ARM介绍"><a href="#ARM介绍" class="headerlink" title="ARM介绍"></a>ARM介绍</h3><p>是一家公司，主要做RISC处理器，不生产芯片</p><ul><li>ARM的数据和指令类型<ul><li>ARM是32位机，即每个寄存器是4字节</li><li>数据类型<ul><li>Byte:字节 8bits</li><li>Word:字  4Byte</li><li>HalfWord:半字  2Byte</li><li>DoubleWord: 双字 8Byte</li></ul></li><li>指令集<ul><li>ARM指令集：每条指令4byte</li><li>Thumb指令集：每条指令2byte</li></ul></li></ul></li></ul><h3 id="star-ARM-Cortex-A-处理器的工作模式"><a href="#star-ARM-Cortex-A-处理器的工作模式" class="headerlink" title=":star:ARM Cortex-A 处理器的工作模式"></a><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>ARM Cortex-A 处理器的工作模式</h3><p>ARM架构共有七种基本工作模式，它们是：</p><ul><li>User : 非特权模式，大部分任务执行在这种模式</li><li>FIQ :   当一个高优先级（fast) 中断产生时将会进入这种模式</li><li>IRQ :   当一个低优先级（normal) 中断产生时将会进入这种模式</li><li>Supervisor :当复位或软中断指令执行时将会进入这种模式</li><li>Abort : 当存取异常时将会进入这种模式</li><li>Undef : 当执行未定义指令时会进入这种模式</li><li>System : 使用和User模式相同寄存器集的特权模式</li><li>Cortex-A特有模式：<ul><li>Monitor : 是为了安全而扩展出的用于执行安全监控代码的模式；也是一种特权模式</li></ul></li></ul><h3 id="ARM寄存器"><a href="#ARM寄存器" class="headerlink" title="ARM寄存器"></a>ARM寄存器</h3><ul><li>Cortex-A处理器：40个寄存器<br> r0-r12 + pc + cpsr + r13*7 + r14*7 + spsr*6 + FIQ(r8-r12 5个)</li><li>特殊寄存器<ul><li>r13(sp):栈顶指针寄存器 即异常时保存栈顶指针</li><li>r14(lr):链接寄存器 即异常时保存异常的返回地址</li><li>r15(pc):程序计数器 保存当前取指指令的地址</li><li>cpsr:当前程序状态寄存器 保存当前cpu的工作模式</li><li>spsr:保存程序状态寄存器 即异常时: spsr=cpsr   异常结束时:cpsr=spsr</li></ul></li></ul><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/image-20230515165445679.png" alt="image-20230515165445679"></p><blockquote><p>System模式和User模式共用</p><p>Monitor模式: <code>r13(sp)</code>,<code>r14(lr)</code>,<code>spsr</code></p></blockquote><h4 id="程序状态寄存器"><a href="#程序状态寄存器" class="headerlink" title="程序状态寄存器"></a>程序状态寄存器</h4><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/image-20230515170352180.png" alt="image-20230515170352180"></p><h4 id="程序计数寄存器PC-R15"><a href="#程序计数寄存器PC-R15" class="headerlink" title="程序计数寄存器PC(R15)"></a>程序计数寄存器PC(R15)</h4><blockquote><p>当处理器执行在ARM状态:<br>    所有指令32 bits宽<br>    所有指令必须word对齐<br>    所以pc值由bits [31:2]决定， bits [1:0] 未定义(所以指令不能halfword / byte对齐).<br>当处理器执行在Thumb状态:<br>    所有指令16 bits宽<br>    所有指令必须halfword 对齐<br>    所以pc值由bits [31:1]决定， bits [0] 未定义(所以指令不能byte对齐).</p></blockquote><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/image-20230515170717094.png" alt="image-20230515170717094"></p><h3 id="ARM处理器的发展历程"><a href="#ARM处理器的发展历程" class="headerlink" title="ARM处理器的发展历程"></a>ARM处理器的发展历程</h3><table><thead><tr><th>ARM体系</th><th>ARMv4</th><th>ARMv5</th><th>ARMv6</th><th>ARMv7</th><th>ARMv7</th></tr></thead><tbody><tr><td>ARM CPU</td><td>arm7</td><td>arm9</td><td>arm10</td><td>arm11</td><td>arm-cortex-a8</td></tr><tr><td>流水线</td><td>3</td><td>5</td><td>6</td><td>8</td><td>13</td></tr><tr><td>频率(MHz)</td><td>80</td><td>150</td><td>260</td><td>335</td><td>667</td></tr><tr><td>MMU</td><td>无/有</td><td>有</td><td>···</td><td>···</td><td>···</td></tr><tr><td>结构</td><td>冯诺依曼</td><td>哈佛</td><td>···</td><td>···</td><td>···</td></tr></tbody></table><blockquote><p>注意:<br>不同ARM体系采用不同指令集<br>哈佛结构是数据和指令分开存储并行<br>冯诺依曼（普林斯顿）结构是混合存储的</p></blockquote><h4 id="指令流水线"><a href="#指令流水线" class="headerlink" title="指令流水线"></a>指令流水线</h4><p>流水线是计算机处理器中的一种高效执行指令的技术。它将指令执行过程分为多个阶段，并允许同时执行多条指令的不同阶段，从而提高处理器的吞吐量和效率。</p><p>以下是常见的ARM处理器流水线阶段：</p><ol><li>取指（Instruction Fetch）：从内存中读取指令。</li><li>译码（Instruction Decode）：解析指令的操作码和操作数，并确定指令的类型和要执行的操作。</li><li>执行（Execute）：执行指令中的操作，可能涉及算术逻辑运算、内存访问等。</li><li>访存（Memory Access）：如果指令需要读取或写入内存，则在此阶段进行。</li><li>写回（Write Back）：将执行结果写回寄存器。</li></ol><p> 不同的ARM处理器架构可能具有不同的流水线结构和阶段数量。例如，ARM Cortex-A系列处理器通常具有更深的流水线，包含更多的阶段，以便更好地利用指令级并行性，提高性能。而较早的ARM处理器如ARM7、ARM9等则可能采用较短的流水线，阶段数量较少。</p><p> 流水线的优点是能够同时处理多条指令的不同阶段，从而提高指令的吞吐量和执行效率。然而，流水线也存在一些问题，如分支预测错误、数据相关性等，这可能导致流水线中断、数据冲突和性能下降。因此，在设计流水线时需要考虑这些问题，并采取相应的优化和技术手段来解决。</p><h5 id="3级流水线"><a href="#3级流水线" class="headerlink" title="3级流水线"></a>3级流水线</h5><p>允许多个操作同时进行,而非顺序执行</p><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/image-20230515171006676.png" alt="image-20230515171006676"></p><p>PC指向正被取值的指令，而非正在执行的指令</p><h3 id="ARM汇编指令"><a href="#ARM汇编指令" class="headerlink" title="ARM汇编指令"></a>ARM汇编指令</h3><h4 id="搬移指令"><a href="#搬移指令" class="headerlink" title="搬移指令"></a>搬移指令</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">@ 1. mov 搬移指令</span><br><span class="line">mov r0,#0x3 @r0 = 0x3</span><br><span class="line">mov r1,r0   @r1 = r0</span><br><span class="line">mov r2,r0,LSL#2  @r2 = r0 &lt;&lt; 2</span><br><span class="line"></span><br><span class="line">@ svc -&gt; user 模式切换</span><br><span class="line">@mov r3,#0xD0</span><br><span class="line">@msr cpsr,r3</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="条件执行"><a href="#条件执行" class="headerlink" title="条件执行"></a>条件执行</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@ 2.条件执行if (a==0)   x=0;</span><br><span class="line">@if (a&gt;0)    x=x+3;</span><br><span class="line">mov r5,#2</span><br><span class="line">mov r6,#4</span><br><span class="line"></span><br><span class="line">cmp r5,#0       @r5 与 0比较，若相等，则cpsr的z位自动置为1</span><br><span class="line">moveq r6,#0     @若 r5==0,则执行 r6 = 0,否则这条指令不执行</span><br><span class="line">addgt r6,r6,#3  @若 r5&gt;0,则执行 r6 = r6+3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@mov r0,#0x00001f80 @立即数不合法</span><br><span class="line">ldr r0,=0x12345678   @伪指令</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="逻辑指令"><a href="#逻辑指令" class="headerlink" title="逻辑指令"></a>逻辑指令</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@ 3.逻辑指令 </span><br><span class="line"></span><br><span class="line">@ 使能中断和快速中断</span><br><span class="line">mrs r0,cpsr</span><br><span class="line">bic r0,r0,#0xc0  @将cpsr的 7:6 清0</span><br><span class="line">msr cpsr,r0</span><br><span class="line"></span><br><span class="line">@ 判断当前工作状态是否是ARM状态，是则切换到user 工作模式</span><br><span class="line"></span><br><span class="line">mrs r0,cpsr</span><br><span class="line">tst r0,#0x20  @测试r0寄存器的5位是否为0，若为0，则cpsr的z位置1</span><br><span class="line">andeq r0,#0xffffffe0  @将r0的4:0 清0</span><br><span class="line">orreq r0,#0x10</span><br><span class="line">msr cpsr,r0</span><br></pre></td></tr></tbody></table></figure><h4 id="算术指令"><a href="#算术指令" class="headerlink" title="算术指令"></a>算术指令</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">@4.算术指令  add/sub/mul</span><br><span class="line">mov r0,#0x3</span><br><span class="line">mov r1,#0x4</span><br><span class="line">add r0,r1 @r0 = r0+r1</span><br><span class="line">sub r0,r1 @r0 = r0-r1</span><br><span class="line">mul r2,r0,r1 @r0 = r0*r1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">.text</span><br><span class="line"></span><br><span class="line">@ int add(int a,int b){return a+b;}</span><br><span class="line"></span><br><span class="line">main: @标号 是地址 函数名也是一个标号 </span><br><span class="line">mov r0,#3</span><br><span class="line">mov r1,#4</span><br><span class="line">bl add  @跳转到add位置执行 并保存下一条指令的地址到LR=pc+4</span><br><span class="line">mov r2,#6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main_end:</span><br><span class="line">b main_end </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add: @add函数</span><br><span class="line">add r0,r0,r1</span><br><span class="line">add_end:</span><br><span class="line">mov pc,lr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.end</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">.text</span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">mov r0,#9</span><br><span class="line">mov r1,#15</span><br><span class="line">bl gcd </span><br><span class="line">main_end:</span><br><span class="line">b main_end</span><br><span class="line"></span><br><span class="line">gcd:</span><br><span class="line">cmp r0,r1</span><br><span class="line">beq gcd_end</span><br><span class="line">subgt r0,r0,r1</span><br><span class="line">sublt r1,r1,r0</span><br><span class="line">b gcd</span><br><span class="line">gcd_end:</span><br><span class="line">mov pc,lr</span><br><span class="line"></span><br><span class="line">.end</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="load-x2F-store"><a href="#load-x2F-store" class="headerlink" title="load/store"></a>load/store</h4><p>LDR/STR访问的地址由基址寄存器加上偏移量来产生。LDR/STR访问的地址由基址寄存器加上偏移量来产生.</p><p>针对Word和无符号字节的访问，偏移量可以是：<br>一个无符号12位立即数(如0一4095字节).</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">LDR r0, [r1, #8]</span><br></pre></td></tr></tbody></table></figure><p>一个寄存器，或再加上移位(由立即数指定)</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">LDR r0, [r1 ,r2]</span><br><span class="line">LDR r0, [r1,r2 ,LSL#2] </span><br></pre></td></tr></tbody></table></figure><p>可以是从基址寄存器上加或减去偏移量：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">LDR r0, [r1, #-8]</span><br><span class="line">LDR r0, [r1,-r2 ] </span><br><span class="line">LDR r0, [r1,-r2, LSL#2]</span><br></pre></td></tr></tbody></table></figure><p>对于半字和带符号的半字/字节，偏移量可以是：<br>        一个无符号8位立即数(如0-255字节)。<br>        一个寄存器(不能有偏移操作)。<br>可选择采用pre-indexed或post- indexed方式寻址；上可选择采用预索引或后索引方式寻址</p><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/image-20230516170156255.png" alt="image-20230516170156255"></p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">.text</span><br><span class="line">@srcbuf中的内容拷贝到destbuf</span><br><span class="line"></span><br><span class="line">ldr r5,=srcBuf</span><br><span class="line">ldr r6,=destBuf</span><br><span class="line"></span><br><span class="line">mov r1,#0</span><br><span class="line">loop:</span><br><span class="line">cmp r1,#3</span><br><span class="line">add r1,#1</span><br><span class="line">beq loop_end</span><br><span class="line">ldrb r0,[r5],#1 @r0 = *r5 r5 = r5+1</span><br><span class="line">strb r0,[r6],#1 @*r6 = r0 r6 = r6+1</span><br><span class="line">b loop</span><br><span class="line">loop_end:</span><br><span class="line">b loop_end</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line"></span><br><span class="line">srcBuf:</span><br><span class="line">.byte 0x1,0x2,0x3,0x4  @char ch[] = {0x1,0x2,0x3,0x4};</span><br><span class="line"></span><br><span class="line">destBuf:</span><br><span class="line">.space 8 @定义8字节大小的空间</span><br><span class="line"></span><br><span class="line">.end</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="块数据传送"><a href="#块数据传送" class="headerlink" title="块数据传送"></a>块数据传送</h4><p>LDM / STM指令允许一次传送1到16个寄存器到/从存储器中。<br>寄存器传送顺序是固定的，不能被改变<br>最小数字的寄存器总是被对应到存储器的最低地址上。<br>基址寄存器指定存储器访问开始的地址</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">LDMIA r10!,{r0,r1,r4}</span><br></pre></td></tr></tbody></table></figure><p>块传送指令针对下列情况很有效：</p><ul><li>从存储器中搬运一块数据</li><li>保存或恢复堆栈中的内容</li></ul><p>如果是慢速存储器,会影响中断响应时间</p><p>语法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;LDM|STM&gt;{&lt;cond&gt;}&lt;寻址模式&gt;rb{！}，&lt;寄存器列表&gt;</span><br></pre></td></tr></tbody></table></figure><p>4种寻址操作：<br>LDMIA / STMIA        Increment After     (先操作，后增加)<br>LDMIB / STMIB        Increment Before   (先增加，后操作)<br>LDMDA / STMDA     Decrement After    (先操作，后递减)<br>LDMDB / STMDB     Decrement Before  (先递减，后操作)</p><h4 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h4><p>STMFD (Push)块存储- Full Descending stack STMDB块存储-全降堆栈[STMDB]<br>LDMFD (Pop)块装载- Full Descending stack LDMIA块装载-全降堆栈[LDMIA]</p><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/image-20230516164835576.png" alt="image-20230516164835576"></p><h4 id="swi"><a href="#swi" class="headerlink" title="swi"></a>swi</h4><blockquote><p>产生一个异常陷阱,跳转到SWI硬件向量。&gt;产生一个异常陷阱，跳转到SWI硬件向量。</p><p>SWI处理程序可以检测SW1号，从而决定采取何种操作。</p><p>通过SWI机制,运行在用户模式下的应用程序，可请求操作系统执行一系列特权操作。</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">SWI{&lt;cond&gt;} &lt;SWI number&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><p>中断:(重点)</p><h4 id="异常处理过程-中断为例"><a href="#异常处理过程-中断为例" class="headerlink" title="异常处理过程(中断为例)"></a>异常处理过程(中断为例)</h4><p>1)中断信号如何到达cpu???<br>        经过中断控制器 -&gt; irq/fiq -&gt; cpu<br>2)多个中断同时发生时，cpu先处理谁？？后处理谁？？？？<br>        中断控制器会给每个中断指定一个优先级，处理顺序由优先级决定；<br>3)当cpu正在处理一个中断时，产生了一个优先级同级或更低优先级的新中断，此时cpu如何处理？？？？<br>将新中断设置中断标志位，处理完当前中断之后再去处理新中断</p><blockquote><p>注意：中断处理完一定要清中断标志位！！！！！</p></blockquote><h4 id="异常向量表"><a href="#异常向量表" class="headerlink" title="异常向量表"></a>异常向量表</h4><p>​所有异常的入口地址的集合；<br>​当异常发生了，cpu就会根据异常向量表中指定的异常入口地址来跳转；<br>​</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">cpu模式：</span><br><span class="line">0x1c   ---&gt;   fiq         fiq</span><br><span class="line">0x18   ---&gt;   irq  irq</span><br><span class="line">0x14   ---&gt;   保留</span><br><span class="line">0x10   ---&gt;   data abort  Abort</span><br><span class="line">0x0c   ---&gt;   prefetch abort</span><br><span class="line">0x08   ---&gt;   swi  svc</span><br><span class="line">0x04   ---&gt;   undef  undef</span><br><span class="line">0x00   ---&gt;   reset  svc</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="异常处理过程"><a href="#异常处理过程" class="headerlink" title="异常处理过程"></a>异常处理过程</h4><p>​1)cpu做的事:<br>​spsr = cpsr<br>​修改cpsr的值为异常模式<br>​保存返回地址到lr<br>​设置pc的值<br>​</p><p>2)我们自己做的事:<br>    cpsr = spsr<br>    pc = lr</p><h4 id="异常的返回地址"><a href="#异常的返回地址" class="headerlink" title="异常的返回地址"></a>异常的返回地址</h4><ol><li>从SWI 和 Undef异常返回<br> MOVS pc,lr</li></ol><p>2)从FIQ, IRQ 和 预取异常(Prefect Abort)返回<br>        SUBS pc,lr,#4</p><p>3)从数据异常( Data Abort)返回<br>        SUBS pc,lr,#8</p><h6 id="异常指定了优先级和固定的服务顺序"><a href="#异常指定了优先级和固定的服务顺序" class="headerlink" title="异常指定了优先级和固定的服务顺序:"></a>异常指定了优先级和固定的服务顺序:</h6><p>Reset<br>Data Abort<br>FIQ<br>IRQ<br>Prefetch Abort<br>SWI<br>Undefined instruction</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">.text</span><br><span class="line"></span><br><span class="line">b reset@复位异常的入口</span><br><span class="line">nop@空指令 只占用空间和时间</span><br><span class="line">b swi_handler@软中断的入口</span><br><span class="line">nop</span><br><span class="line">nop</span><br><span class="line">nop</span><br><span class="line"></span><br><span class="line">swi_handler:@软中断的异常处理函数</span><br><span class="line"></span><br><span class="line">ldr sp,=stack_base</span><br><span class="line">@保护现场</span><br><span class="line">stmfd sp!,{r0-r12,lr}</span><br><span class="line">mov r1,#6</span><br><span class="line"></span><br><span class="line">@恢复现场</span><br><span class="line">ldmfd sp!,{r0-r12,pc}^@^ --&gt;cpsr=spsr</span><br><span class="line"></span><br><span class="line">reset:</span><br><span class="line"></span><br><span class="line">msr cpsr,#0xd0</span><br><span class="line">mov r0,#3</span><br><span class="line">mov r1,r0</span><br><span class="line">swi 0x2</span><br><span class="line"></span><br><span class="line">add r1,r0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">buf:</span><br><span class="line">.space 128</span><br><span class="line">stack_base:</span><br><span class="line"></span><br><span class="line">.end</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="led"><a href="#led" class="headerlink" title="led"></a>led</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">.text</span><br><span class="line"></span><br><span class="line">b reset</span><br><span class="line">nop</span><br><span class="line">nop</span><br><span class="line">nop</span><br><span class="line">nop</span><br><span class="line">nop</span><br><span class="line">nop</span><br><span class="line">nop</span><br><span class="line"></span><br><span class="line">reset:</span><br><span class="line"></span><br><span class="line">ldr r5,=0x11000c40</span><br><span class="line">ldr r6,=0x11000c44</span><br><span class="line"></span><br><span class="line">ldr r0,[r5]</span><br><span class="line">bic r0,#0xf0000000</span><br><span class="line">orr r0,#0x10000000</span><br><span class="line">str r0,[r5]</span><br><span class="line"></span><br><span class="line">ldr r0,[r6]</span><br><span class="line">bic r1,#0x80</span><br><span class="line">@ orr r1,#0x80</span><br><span class="line">str r0,[r6]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.end</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>一.GPIO C编程<br>1.看原理图<br>    GPX1_0<br>2.看芯片手册<br>    GPX1CON: 0x11000C20   3:0 -&gt; 0001<br>    GPX1DAT: 0x11000C24   0 -&gt; 1/0</p><p>3.编程<br>    1)汇编<br>        .text<br>            b reset  @reset<br>            nop      @undef<br>            nop @swi<br>            nop @prefetch<br>            nop @data abort<br>            nop      @保留<br>            nop      @irq<br>            nop      @fiq<br>        reset:<br>            ldr r0,=0x40008000<br>            mcrp15,0,r0,c12,c0,0<br>        init_stack:<br>            @初始化各种模式的栈</p><pre><code>        b main        .end2)C编程    int main()    {            //1.GPX1CON: 3:0 -&gt; 0x1                GPX1CON &amp;= ~0xf;        GPX1CON |= 0x1;</code></pre><p>​    <br>​    while(1)<br>​    {<br>​    //2. GPX1DAT: 0-&gt;1   led on<br>​    GPX1DAT |= 0x1;<br>​    mydelay();<br>​    <br>                //3.GPX1DAT: 0-&gt;0   led off<br>                GPX1DAT &amp;= ~0x1;<br>                mydelay();<br>            }<br>            return 0;<br>        }<br>    3)Makefile<br>        arm-linux-gcc -c start.s -o start.o<br>        arm-linux-gcc -c main.c -o main.o<br>        arm-linux-ld -Tmap.lds start.o main.o led.elf<br>        arm-linux-objcopy -O binary led.elf led.bin</p><pre><code>4)make</code></pre><p>二.串行通讯方式<br>    1.单线通讯<br>    2.uart<br>        特点：<br>            全双工 异步<br>    3.i2c<br>        特点：<br>            半双工 同步<br>    4.spi<br>        特点：<br>            全双工  同步<br>    5.编程<br>        1)看原理图<br>            GPA1_0 : RXD<br>            GPA1_1 : TXD<br>        2)看芯片手册<br>            a.对外设置<br>                GPA1CON: 7:0 -&gt; 0x22<br>            b.对内设置<br>                data:8<br>                stop:1<br>                parity:无<br>                bauspeed: 115200bps 9600bps</p><pre><code>            ULCON2: 0x3            UCON2: 3:0 -&gt; 0101            UTXH2: 发送buffer寄存器            URXH2:接收buffer寄存器            UBRDIV2:      53            UFRACVAL2:    4    3)编程</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2023/05/05/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/05/05/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p><strong>static 关键字 与 const(有一个严格类型检查) 关键字， static 关键字 变量存在什么地方</strong></p><p>static </p><ol><li><p>修饰全局变量</p><blockquote><p>使其只在本文件中可见，其他文件不可访问，限定作用域</p></blockquote></li><li><p>修饰局部变量</p><blockquote><p>改变生命周期，生命周期为程序的运行周期，而不是函数调用结束后销毁</p></blockquote></li><li><p>修饰函数</p><blockquote><p>使其只在本文件当中可见，其他文件不可访问，限定作用域</p></blockquote></li></ol><p>const</p><ol><li>用于声明常量</li><li>提供类型安全性，编译器会对其进行严格的类型检查，防止对常量进行意外修改</li></ol><p>数据存放</p><blockquote><p>static数据存放在静态数据区<br>const修饰的全局变量或者静态变量，存放在常量区，修饰局部变量，则存储在栈上</p></blockquote><p><strong>volatile 关键字作用</strong></p><p>声明某个变量是易变的，变量的值会被程序之外的因素所修改，因此编译器在对这个变量的读写操作时不能进行优化，必须直接读取变量的内存位置。</p><ol><li><p>静止编译器优化</p><blockquote><p>编译时在优化代码是会对变量进行缓存，重排序等</p></blockquote></li><li><p>处理中断和并发访问</p><blockquote><p>多个线程或中断可能会同时访问同一个变量，使用<code>volatile</code>可以确保每个线程或中断访问到的是最新的值，避免数据不一致导致的问题。</p></blockquote></li><li><p>访问硬件寄存器</p><blockquote><p>硬件寄存器的值可能会被硬件设备修改，而不是由程序控制，使用<code>volotile</code>关键字可以确保每次访问都是直接与寄存器通信，而不是从缓存或寄存器副本当中读取数据</p></blockquote></li></ol><p><strong>宏函数</strong></p><ol><li>替换：在预处理阶段，宏函数会被替换为其定义的代码片段。宏函数的调用形式和函数调用类似，但不涉及函数调用的开销。</li><li>文本替换：宏函数的参数在宏定义中会以文本替换的方式展开，而不是像函数调用那样传递参数的副本。因此，在宏定义中对参数的处理是直接操作参数的文本。</li><li>没有返回值：宏函数没有返回值的概念，其结果是宏定义展开后的代码片段。</li></ol><blockquote><p>优点：可以在编译时进行代码替换，提高执行效率。它们通常用于实现简单的代码块的重复使用，或者用于进行简单的宏替换操作，比如常量定义、条件编译等。</p><p>缺点：参数展开带来的副作用、可读性较差、没有类型检查等。</p></blockquote><p><strong>const关键字</strong></p><p>const修饰的数据类型是指常类型，常类型的变量或对象的值是不能更新的。</p><ol><li><p>可以定义const常量，使其具有不可变性</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> len =<span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> Array[len] <span class="comment">//允许常量初始化叔祖</span></span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> len = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> Array[len];<span class="comment">//在c90(包括c90)之前的版本不允许使用变量初始化数组</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>参数类型检查，消除一些隐患</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> i)</span></span><br><span class="line">{</span><br><span class="line"> ... <span class="comment">//形参 i 是一个常量，不允许被修改</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> i)</span></span><br><span class="line">{</span><br><span class="line"> i = <span class="number">10</span>; <span class="comment">//错误，i 不允许被修改</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>const 修饰普通变量</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a; <span class="comment">//ok!</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> a; <span class="comment">//ok!</span></span><br><span class="line"><span class="type">int</span> a <span class="type">const</span>;<span class="comment">//error! 语法错误</span></span><br><span class="line">a = <span class="number">5</span>;<span class="comment">//error! 不能改 a 的值</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>const修饰指针变量</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *a; <span class="comment">//常量指针写法，指向常量的指针</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> *a;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> <span class="type">const</span> *c;</span><br><span class="line"></span><br><span class="line">a = &amp;num; <span class="comment">//ok! 修改指针指向</span></span><br><span class="line">*a = <span class="number">20</span>; <span class="comment">//error! 不能间接寻址</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> b = &amp;num; <span class="comment">//指针常量写法，指针同时是一个常量</span></span><br><span class="line">b = null; <span class="comment">//error! 不能修改指针指向</span></span><br><span class="line">*b = <span class="number">20</span>; <span class="comment">//ok! 间接寻址</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> c = &amp;num; <span class="comment">//常用写法</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> * <span class="type">const</span> c = &amp;num;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> <span class="type">const</span> * <span class="type">const</span> c = &amp;num;</span><br><span class="line">c = null; <span class="comment">//error! 不能修改指针指向</span></span><br><span class="line">*c = <span class="number">20</span>; <span class="comment">//error! 不能间接寻址</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>可以节省空间，避免不必要的内存分配。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159 <span class="comment">//常量宏</span></span></span><br><span class="line"><span class="type">const</span> doulbe pi = <span class="number">3.14159</span>; <span class="comment">//此时并未将 pi 放入 ROM 中 i 放入 ROM 中</span></span><br><span class="line"><span class="type">double</span> i = pi; <span class="comment">//此时为 pi 分配内存，以后不再分配！</span></span><br><span class="line"><span class="type">double</span> j = pi; <span class="comment">//pi 没有内存分配</span></span><br><span class="line"><span class="type">double</span> I = PI; <span class="comment">//编译期间进行宏替换，分配内存</span></span><br><span class="line"><span class="type">double</span> J = PI; <span class="comment">//编译期间进行宏替换，又一次分配内存！</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>编译器通常不为普通 const 常量分配存储空间，而是将它们保存在符号表中。const 定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是像#define 一样给出的是立即数，所以 const 定义的常量在程序运行过程中只有一份拷贝，而#define 定义的常量在内存中有若干个拷贝。这使得它成为一个编译期间的常量，没有了存储与读内存的操作，使得它的效率也很高。</p></blockquote></li><li><p>为函数重载提供了参考（C++部分）</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">{</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> i)</span> </span>{ <span class="comment">//一个函数</span></span><br><span class="line"> ...</span><br><span class="line"> }</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> i)</span> <span class="type">const</span> <span class="comment">//函数重载</span></span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line"> ...</span><br><span class="line"> }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><blockquote><p>常函数中不允许修改变量，不允许调用非 常函数</p></blockquote></li></ol><p><strong>库函数 strcpy()和 memcpy()的区别</strong></p><table><thead><tr><th></th><th>char *strcpy(char *dest,const char *src);</th><th>void *memcpy(void *dest, const void *src, size_t n);</th></tr></thead><tbody><tr><td>操作对象</td><td>只能是字符串数组</td><td>任意类型的数据</td></tr><tr><td>只能是字符串数组</td><td>将指针src指向的数据依次拷贝到dest指向的单元，直至’\0’结束</td><td>将指针src指向的数据依次拷贝到dest指向的单元，拷贝n个字节数据</td></tr><tr><td>任意类型的数据</td><td>1）src 指向的字符串不能长于 dest 指向的空间，不然会覆盖其他数据；<br>2）src 指向的数据块必须有’\0’结尾，不然会数组越界；</td><td>1）src 指向数据不得长于 dest 指向的空间，然会覆盖其他数据；<br>2）n 不得大于 src 直线的数据块长度，不然会数组越界；</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT</title>
      <link href="/2023/05/04/QT/"/>
      <url>/2023/05/04/QT/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="三个工具"><a href="#三个工具" class="headerlink" title="三个工具"></a>三个工具</h3><p>​qmake:Makefile生成器 将 *.pro文件 生成 对应平台下的Makefile<br>​uic:将 ui(xml)文件转换成c++代码<br>​moc:元对象编译器 将qt关键字 signals/slots转换成c++代码 支持信号与</p><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>​pro:工程文件 功能：指导生成Makefile  qmake<br>​widget.h: 窗体类的定义<br>​widget.cpp:类中成员函数的定义<br>​main.cpp:主函数  功能: 定义窗体对象 显示窗体 进入事件循环<br>​widget.ui(xml): ui文件 uic工具将ui文件转换成c++代码 -&gt; ui_widget.h</p><h3 id="qt内存管理"><a href="#qt内存管理" class="headerlink" title="qt内存管理"></a>qt内存管理</h3><p>​a.所有从QObject继承出来的子对象的内存管理都转移给了父对象<br>​        使用new在堆上分配内存<br>​        子对象可自动被父对象删除内存<br>​        手动删除不会引起二次删除，子对象删除时会通知父对象<br>​    b.没有父对象的对象需要手工删除<br>​    没有父对象的对象一般分配在栈区，这样可以有效避免内存泄漏<br>​    c.Qt没有自动回收站的机制，需要关注父子关系及其功能</p><h2 id="star-信号与槽机制"><a href="#star-信号与槽机制" class="headerlink" title=":star:信号与槽机制"></a><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>信号与槽机制</h2><p>信号与槽机制是Qt中一种重要的机制，用于对象间的通信。信号和槽是用来解决对象间通信的，即当一个对象的某个状态发生改变时，该对象会向其他对象发出信号，其他对象则根据这个信号来作出相应的动作，这个相应的动作就是调用槽函数。</p><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><p>​有许多预定义好的信号可以使用</p><ul><li><code>clicked()</code>：当用户单击鼠标左键按下并释放按钮时发射。</li><li><code>pressed()</code>：当用户按下鼠标左键按钮时发射。</li><li><code>released()</code>：当用户释放鼠标左键按钮时发射。</li><li><code>textChanged(const QString &amp;text)</code>：当文本编辑框中的文本发生更改时发射，并将当前文本作为参数传递给槽函数。</li><li><code>valueChanged(int value)</code>：当值更改时，例如 QScrollBar 或 QSlider 控件的值更改时，发射，并将新值作为参数传递给槽函数。</li></ul><h3 id="槽函数"><a href="#槽函数" class="headerlink" title="槽函数"></a>槽函数</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">slots: <span class="comment">//槽函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Myslots</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="关联信号与槽函数"><a href="#关联信号与槽函数" class="headerlink" title="关联信号与槽函数"></a>关联信号与槽函数</h3><blockquote><p>注意:参数个数：信号参数个数 &gt;= 槽函数的参数个数<br>        参数类型:匹配</p></blockquote><ol><li>通过QObject::connect函数进行关联，connect函数的参数包括信号发射者、信号、槽函数接受者和槽函数。</li><li>在Qt Designer中使用Qt信号与槽编辑器进行关联，可以通过视图中的右键菜单或者在对象属性编辑器中的信号/槽标签中进行设置。</li><li>通过QAction的triggered()信号和QMenu的aboutToShow()信号，可以直接在代码中将动作与函数关联。</li><li>在Qt Quick中，可以使用信号绑定语法来关联信号与槽函数，例如在QML中使用onClicked: function() { … }。</li></ol><p>需要注意的是，无论使用哪种方式，关联的信号和槽函数的参数类型和数量必须一致，否则会编译错误或者运行时出错。</p><p>conect关联 通用</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">{</span><br><span class="line">    ui.<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接信号和槽函数</span></span><br><span class="line">    <span class="built_in">connect</span>(ui.pushButton, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MainWindow::on_pushButton_clicked);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// 处理按钮单击事件</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>在信号与槽机制中，信号的参数个数并不一定要大于槽函数的参数个数。事实上，信号与槽之间的参数传递可以有以下几种情况：</p><ol><li>信号与槽的参数个数一致，类型相同；</li><li>信号与槽的参数个数一致，类型不同，但可以进行隐式转换；</li><li>信号与槽的参数个数不一致，但信号的参数可以通过默认值或者重载函数的方式不传递参数；</li><li>信号与槽的参数个数不一致，但信号的参数可以通过QVariant类型进行传递。</li></ol><p>因此，信号与槽之间的参数个数和类型关系可以灵活设置，不必非得信号的参数个数大于槽函数的参数个数。</p></blockquote><h3 id="自定义信号和槽函数"><a href="#自定义信号和槽函数" class="headerlink" title="自定义信号和槽函数"></a>自定义信号和槽函数</h3><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> : <span class="keyword">public</span> QObject {</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(QObject *parent = <span class="literal">nullptr</span>) : <span class="built_in">QObject</span>(parent) {}</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">// 定义自定义信号，该信号不带参数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mySignal</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义自定义信号，该信号带有一个int类型参数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mySignalWithParam</span><span class="params">(<span class="type">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">// 定义槽函数，该函数响应mySignal信号，不带参数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onMySignal</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"My signal is emitted."</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义槽函数，该函数响应mySignalWithParam信号，带有一个int类型参数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onMySignalWithParam</span><span class="params">(<span class="type">int</span> value)</span> </span>{</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"My signal with param is emitted. Param value is "</span> &lt;&lt; value;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，<code>MyClass</code>是一个QObject派生类，它定义了两个自定义信号和两个槽函数。其中，<code>mySignal</code>信号和<code>onMySignal</code>槽函数都不带参数，而<code>mySignalWithParam</code>信号带有一个int类型参数，<code>onMySignalWithParam</code>槽函数也带有一个int类型参数。当<code>mySignal</code>信号被发射时，<code>onMySignal</code>槽函数会被自动调用，而当<code>mySignalWithParam</code>信号被发射时，<code>onMySignalWithParam</code>槽函数会被自动调用，并将参数值传递给该槽函数。</p><p>自定义信号可以使用 <code>emit</code> 关键字来发送。在发射信号时，可以将信号的参数传递给槽函数。示例代码如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定义信号</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mySignal</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发射信号</span></span><br><span class="line"><span class="function">emit <span class="title">mySignal</span><span class="params">(<span class="number">42</span>)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>这里定义了一个名为 <code>mySignal</code> 的信号，它带有一个整数参数。在需要发射信号的时候，使用 <code>emit</code> 关键字来发射信号，并将信号参数传递给槽函数。</p><p>请注意，自定义信号只有在定义了之后才能使用。另外，自定义信号的参数可以是任意类型，包括用户定义的类型，只要这些类型可以被 Qt 的元对象系统所支持即可。</p><h2 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h2><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="comment">//1.QPushButton组件</span></span><br><span class="line">    <span class="comment">//2.QToolButton组件</span></span><br><span class="line">    ui-&gt;toolButton-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">"E:/230301/day2/demo1/QQ.ico"</span>));<span class="comment">//设置图标 E:\\230301\\day2\\demo1\\QQ.ico</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.QLineEdit组件</span></span><br><span class="line">    ui-&gt;lineEdit-&gt;<span class="built_in">setText</span>(<span class="string">"aaaaaa"</span>);<span class="comment">//设置文本</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; ui-&gt;lineEdit-&gt;<span class="built_in">text</span>();<span class="comment">//获取文本</span></span><br><span class="line"></span><br><span class="line">    ui-&gt;lineEdit-&gt;<span class="built_in">setEchoMode</span>(QLineEdit::Password);<span class="comment">//设置回显方式:密码方式</span></span><br><span class="line">    ui-&gt;lineEdit-&gt;<span class="built_in">setMaxLength</span>(<span class="number">8</span>);<span class="comment">//设置最大长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.QLabel组件</span></span><br><span class="line">    ui-&gt;label-&gt;<span class="built_in">setText</span>(<span class="string">"zzzz"</span>);<span class="comment">//设置文本</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; ui-&gt;label-&gt;<span class="built_in">text</span>();<span class="comment">//获取文本</span></span><br><span class="line">    ui-&gt;label-&gt;<span class="built_in">setFont</span>(<span class="built_in">QFont</span>(<span class="string">"Arial"</span>));<span class="comment">//设置字体</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//label显示图片</span></span><br><span class="line">    QPixmap pixmap;</span><br><span class="line">    pixmap.<span class="built_in">load</span>(<span class="string">"E:/230301/day2/demo1/QQ.ico"</span>);<span class="comment">//加载图片</span></span><br><span class="line">    ui-&gt;label-&gt;<span class="built_in">setPixmap</span>(pixmap);<span class="comment">//显示图片</span></span><br><span class="line">    ui-&gt;label-&gt;<span class="built_in">setScaledContents</span>(<span class="literal">true</span>);<span class="comment">//内容自适应</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.QListWidget组件</span></span><br><span class="line">    ui-&gt;listWidget-&gt;<span class="built_in">addItem</span>(<span class="string">"ccc"</span>);<span class="comment">//动态添加列表项</span></span><br><span class="line">    ui-&gt;listWidget-&gt;<span class="built_in">addItem</span>(<span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>(<span class="built_in">QIcon</span>(<span class="string">":/images/QQ.ico"</span>),<span class="string">"ddd"</span>));<span class="comment">//资源文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.Group Box 分组框 组件</span></span><br><span class="line">    <span class="comment">//7.QFrame组件</span></span><br><span class="line">    ui-&gt;frame-&gt;<span class="built_in">setAutoFillBackground</span>(<span class="literal">true</span>);<span class="comment">//自动填充背景</span></span><br><span class="line">    ui-&gt;frame-&gt;<span class="built_in">setPalette</span>(<span class="built_in">QPalette</span>(Qt::red));<span class="comment">//设置调色板</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.QCombo Box组件(下拉列表)</span></span><br><span class="line">    ui-&gt;comboBox-&gt;<span class="built_in">addItem</span>(<span class="string">"广州"</span>);<span class="comment">//动态添加item</span></span><br><span class="line">    ui-&gt;comboBox-&gt;<span class="built_in">addItem</span>(<span class="string">"深圳"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//9.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//10.QSpinBox</span></span><br><span class="line">    ui-&gt;spinBox-&gt;<span class="built_in">setValue</span>(<span class="number">1</span>);<span class="comment">//设置value值</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; ui-&gt;spinBox-&gt;<span class="built_in">value</span>();<span class="comment">//获取value值</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_clicked</span><span class="params">()</span><span class="comment">//1.QPushButton</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="comment">//灯亮</span></span><br><span class="line">    {</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        ui-&gt;pushButton-&gt;<span class="built_in">setText</span>(<span class="string">"ON"</span>);<span class="comment">//设置文本</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//灯灭</span></span><br><span class="line">    {</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        ui-&gt;pushButton-&gt;<span class="built_in">setText</span>(<span class="string">"OFF"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_pressed</span><span class="params">()</span><span class="comment">//槽函数</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"pressed..."</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_released</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">     <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"released..."</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_2_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QListWidgetItem *item =  ui-&gt;listWidget-&gt;<span class="built_in">takeItem</span>(ui-&gt;listWidget-&gt;<span class="built_in">currentRow</span>());<span class="comment">//当前选中的item从当前列表中删除</span></span><br><span class="line">    ui-&gt;listWidget_2-&gt;<span class="built_in">addItem</span>(item);<span class="comment">//添加item到列表</span></span><br><span class="line"></span><br><span class="line">    ui-&gt;listWidget-&gt;<span class="built_in">sortItems</span>(Qt::AscendingOrder);<span class="comment">//排序</span></span><br><span class="line">    ui-&gt;listWidget_2-&gt;<span class="built_in">sortItems</span>(Qt::AscendingOrder);<span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_3_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QListWidgetItem *item =  ui-&gt;listWidget_2-&gt;<span class="built_in">takeItem</span>(ui-&gt;listWidget_2-&gt;<span class="built_in">currentRow</span>());<span class="comment">//当前选中的item从当前列表中删除</span></span><br><span class="line">    ui-&gt;listWidget-&gt;<span class="built_in">addItem</span>(item);<span class="comment">//添加item到列表</span></span><br><span class="line"></span><br><span class="line">    ui-&gt;listWidget-&gt;<span class="built_in">sortItems</span>(Qt::AscendingOrder);<span class="comment">//排序</span></span><br><span class="line">    ui-&gt;listWidget_2-&gt;<span class="built_in">sortItems</span>(Qt::AscendingOrder);<span class="comment">//排序</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_checkBox_3_stateChanged</span><span class="params">(<span class="type">int</span> arg1)</span><span class="comment">//槽函数</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; arg1;</span><br><span class="line">    <span class="keyword">if</span>(ui-&gt;checkBox_3-&gt;<span class="built_in">isChecked</span>())</span><br><span class="line">        ui-&gt;groupBox-&gt;<span class="built_in">setTitle</span>(ui-&gt;groupBox-&gt;<span class="built_in">title</span>()+<span class="string">"A"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ui-&gt;groupBox-&gt;<span class="built_in">setTitle</span>(ui-&gt;groupBox-&gt;<span class="built_in">title</span>());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_comboBox_currentIndexChanged</span><span class="params">(<span class="type">const</span> QString &amp;arg1)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; arg1;<span class="comment">//item的文本</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_comboBox_currentIndexChanged</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; index;<span class="comment">//item的下标</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_fontComboBox_currentFontChanged</span><span class="params">(<span class="type">const</span> QFont &amp;f)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ui-&gt;label_3-&gt;<span class="built_in">setFont</span>(f);<span class="comment">//设置字体</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_spinBox_valueChanged</span><span class="params">(<span class="type">int</span> arg1)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; arg1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_horizontalSlider_sliderMoved</span><span class="params">(<span class="type">int</span> position)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; position;<span class="comment">//当前滑块位置</span></span><br><span class="line">    ui-&gt;progressBar-&gt;<span class="built_in">setValue</span>(position);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_4_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//打开文件对话框</span></span><br><span class="line">    QString fileName = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>,<span class="comment">//父对象</span></span><br><span class="line">                                 <span class="string">"Open File"</span>,<span class="comment">//标题</span></span><br><span class="line">                                 QDir::<span class="built_in">currentPath</span>(),<span class="comment">//当前路径</span></span><br><span class="line">                                 <span class="string">"C++ Source Files(*.cpp *.C *.cc);;Text files (*.txt);;C++ Header Files (*.h)"</span><span class="comment">//过滤项</span></span><br><span class="line">                                 );</span><br><span class="line">    <span class="keyword">if</span>(fileName.<span class="built_in">isEmpty</span>())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; fileName;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2D绘图"><a href="#2D绘图" class="headerlink" title="2D绘图"></a>2D绘图</h2><p>使用Qt 2D绘图的基本步骤如下：</p><ol><li><p>创建QPainter对象，通过QWidget::paintEvent()事件获取QPainter指针。</p></li><li><p>设置画笔和画刷，以及其他的绘图参数。</p></li><li><p>绘制各种图形：线段、矩形、圆形、椭圆、多边形等。</p></li><li><p>使用QPainter::save()和QPainter::restore()函数保存和恢复绘图状态，例如：设置画笔和画刷、旋转、缩放等。</p></li><li><p>使用QPainter::translate()、QPainter::rotate()、QPainter::scale()等函数进行平移、旋转、缩放等变换。</p></li><li><p>使用QPainter::drawPixmap()函数绘制图像。</p></li><li><p>使用QPainter::drawText()函数绘制文本。</p></li><li><p>在绘图完成后，删除QPainter对象。</p></li></ol><p>常用的绘图函数包括：</p><ul><li><p>drawLine()：绘制直线。</p></li><li><p>drawRect()：绘制矩形。</p></li><li><p>drawEllipse()：绘制椭圆。</p></li><li><p>drawArc()：绘制弧线。</p></li><li><p>drawPolygon()：绘制多边形。</p></li><li><p>drawPixmap()：绘制图像。</p></li><li><p>drawText()：绘制文本。</p></li></ul><p>QPainter对象的状态可以通过QPainter::save()函数保存，通过QPainter::restore()函数恢复。</p><p>旋转、缩放和平移等变换可以使用QPainter::translate()、QPainter::rotate()、QPainter::scale()等函数进行。</p><p>在绘图时，可以使用QPen和QBrush对象设置画笔和画刷的样式。</p><p>示例代码如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::paintEvent</span><span class="params">(QPaintEvent *event)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制矩形</span></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存绘图状态</span></span><br><span class="line">    painter.<span class="built_in">save</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旋转30度</span></span><br><span class="line">    painter.<span class="built_in">rotate</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制矩形</span></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复绘图状态</span></span><br><span class="line">    painter.<span class="built_in">restore</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平移</span></span><br><span class="line">    painter.<span class="built_in">translate</span>(<span class="number">200</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缩放</span></span><br><span class="line">    painter.<span class="built_in">scale</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制文本</span></span><br><span class="line">    painter.<span class="built_in">drawText</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="string">"Hello, world!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制图像</span></span><br><span class="line">    <span class="function">QPixmap <span class="title">pixmap</span><span class="params">(<span class="string">":/image/image.png"</span>)</span></span>;</span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(<span class="number">10</span>, <span class="number">50</span>, pixmap);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上述示例代码中，我们通过QPainter对象绘制了一个矩形、一个旋转后的矩形、一个缩放和平移后的文本和一个图像。通过使用QPainter::save()和QPainter::restore()函数保存和恢复绘图状态，我们可以在变换之后恢复到原来的状态，而不影响之后的绘图。</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>QT提供了多种文件操作的类和方法，以下是一些常用的文件操作知识点：</p><ol><li><p>QFile类：QFile类提供了一个用于读写文件的抽象概念。常用的方法包括open()、close()、read()、write()、seek()、size()等。</p></li><li><p>QDir类：QDir类提供了一个表示目录路径的抽象概念。常用的方法包括exists()、mkdir()、rmdir()、entryList()等。</p></li><li><p>QFileInfo类：QFileInfo类提供了一个用于获取文件信息的抽象概念。常用的方法包括exists()、size()、isDir()、isFile()等。</p></li><li><p>QTextStream类：QTextStream类提供了一个用于读写文本文件的抽象概念。常用的方法包括setCodec()、readLine()、write()等。</p></li><li><p>QDataStream类：QDataStream类提供了一个用于读写二进制文件的抽象概念。常用的方法包括setVersion()、readRawData()、writeRawData()等。</p></li><li><p>QTemporaryFile类：QTemporaryFile类提供了一个用于创建临时文件的抽象概念。常用的方法包括open()、close()、fileName()等。</p></li><li><p>QFileDevice类：QFileDevice类是QFile、QTemporaryFile、QTcpSocket、QProcess等类的基类，提供了一些共同的方法，如read()、write()、atEnd()等。</p></li><li><p>QDirIterator类：QDirIterator类提供了一个用于遍历目录的抽象概念。常用的方法包括next()、filePath()等。</p></li><li><p>QSaveFile类：QSaveFile类提供了一个用于原子写入文件的抽象概念，确保写入过程中不会影响原有文件内容。常用的方法包括open()、commit()、cancelWriting()等。</p></li></ol><p>除了以上类和方法，QT还提供了一些特殊的文件操作类和方法，如QFileSystemWatcher类、QFileSelector类、QStandardPaths类等。开发者可以根据需求选择合适的类和方法进行文件操作。</p><blockquote><p>QFile是Qt中用于读写文件的类，支持文本文件和二进制文件的读写。可以用QFile读取文本或者二进制文件，并且可以将读取的文件内容写入到另一个文件中，或者在当前文件中追加内容。主要的成员函数包括open()、close()、read()、write()等。</p></blockquote><blockquote><p>QDir是Qt中用于操作文件夹（目录）的类，可以获取文件夹的路径，获取文件夹下的文件列表、子文件夹列表、文件过滤等操作。主要的成员函数包括exists()、mkpath()、rmdir()、entryList()等。</p></blockquote><blockquote><p>QFileInfo是Qt中用于获取文件信息的类，包括文件名、文件路径、文件大小、文件创建时间、文件修改时间等等。主要的成员函数包括exists()、fileName()、size()、created()等。</p></blockquote><blockquote><p>QTextStream是Qt中用于读写文本的类，它提供了逐行读取文本文件的方法，可以对文件进行格式化读写。主要的成员函数包括readLine()、atEnd()、seek()、reset()等。</p></blockquote><blockquote><p>QDataStream是Qt中用于读写二进制文件的类，支持大多数的基本数据类型，包括QString、QByteArray、QDateTime等。主要的成员函数包括readRawData()、writeRawData()、operator&lt;&lt;()、operator&gt;&gt;()等。</p></blockquote><p>以上这些类是Qt中常用的文件操作类，使用这些类可以方便地进行文件和文件夹的读写操作。</p><h2 id="QProcess"><a href="#QProcess" class="headerlink" title="QProcess"></a>QProcess</h2><p><code>QProcess</code>是Qt中用于控制外部进程的类，可以启动外部进程、发送数据给外部进程、读取外部进程输出等。</p><p>通过<code>QProcess</code>可以在Qt中方便地使用外部命令、工具等，例如启动命令行窗口、执行系统命令、调用其他应用程序等。同时，<code>QProcess</code>也支持与外部进程进行交互，可以向外部进程发送数据并接收外部进程的输出结果。</p><p>使用<code>QProcess</code>需要先创建一个<code>QProcess</code>对象，然后通过<code>start()</code>方法启动外部进程。可以通过<code>setProgram()</code>方法设置要执行的程序，通过<code>setArguments()</code>方法设置程序的参数。还可以设置进程的工作目录、环境变量、启动模式等。启动后，可以通过<code>waitForStarted()</code>等方法判断进程是否启动成功。</p><p>通过<code>write()</code>方法可以向外部进程发送数据，通过<code>readyRead()</code>信号和<code>readAll()</code>等方法可以读取外部进程的输出结果。还可以通过<code>terminate()</code>和<code>kill()</code>方法停止外部进程的执行。在程序结束时，需要通过<code>close()</code>方法关闭<code>QProcess</code>对象并释放资源。</p><p>下面是一个使用<code>QProcess</code>启动外部命令的例子：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">QProcess process;</span><br><span class="line">process.<span class="built_in">setProgram</span>(<span class="string">"notepad.exe"</span>);</span><br><span class="line">process.<span class="built_in">start</span>();</span><br></pre></td></tr></tbody></table></figure><p>这段代码会启动Windows中的记事本应用程序。</p><p>需要注意的是，<code>QProcess</code>在启动外部进程时会创建一个新的进程，因此需要一定的时间和资源开销。在使用<code>QProcess</code>时，应尽量避免启动过多的进程或频繁地启动和关闭进程，以免对系统性能造成影响。</p><p>要向外部进程发送数据，可以使用进程间通信（Inter-process Communication，IPC）机制。Qt提供了一些类来实现IPC，例如QSharedMemory、QSystemSemaphore、QLocalServer/QLocalSocket、QProcess等。</p><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><p>其中，如果要发送数据给外部进程，可以使用QProcess类。QProcess类可以启动外部程序并与之进行通信，可以向外部进程写入数据，并从外部进程读取数据。</p><p>下面是一个简单的示例，展示如何向外部进程发送数据：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个QProcess对象</span></span><br><span class="line">QProcess *process = <span class="keyword">new</span> <span class="built_in">QProcess</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动外部进程</span></span><br><span class="line">process-&gt;<span class="built_in">start</span>(<span class="string">"your_program.exe"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待外部进程启动完成</span></span><br><span class="line"><span class="keyword">if</span> (process-&gt;<span class="built_in">waitForStarted</span>()) {</span><br><span class="line">    <span class="comment">// 向外部进程写入数据</span></span><br><span class="line">    <span class="function">QByteArray <span class="title">data</span><span class="params">(<span class="string">"hello"</span>)</span></span>;</span><br><span class="line">    process-&gt;<span class="built_in">write</span>(data);</span><br><span class="line">    process-&gt;<span class="built_in">closeWriteChannel</span>(); <span class="comment">// 必须在写入数据之后关闭写通道</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待外部进程完成</span></span><br><span class="line">    <span class="keyword">if</span> (process-&gt;<span class="built_in">waitForFinished</span>()) {</span><br><span class="line">        <span class="comment">// 从外部进程读取数据</span></span><br><span class="line">        QByteArray result = process-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"received data from external process:"</span> &lt;&lt; result;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"failed to wait for external process to finish"</span>;</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"failed to start external process"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，启动外部进程时可能会耗费一定的时间，所以需要在启动完成之后再向其发送数据。此外，QProcess::waitForStarted()和QProcess::waitForFinished()方法都会阻塞当前线程，需要在非GUI线程中使用，以避免阻塞主线程导致GUI无响应。</p><h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><p>共享内存是指两个或多个进程共享一个物理内存区域的机制，每个进程都可以访问同一块内存。共享内存是一种高效的进程间通信方式，特别适合大量数据的高速传输。</p><p>在Qt中，共享内存可以使用QSharedMemory类来实现。QSharedMemory类封装了共享内存的创建、映射、读写等操作，使用起来比较方便。</p><p>下面是一个使用QSharedMemory类实现进程间共享数据的例子：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Writer进程</span></span><br><span class="line"></span><br><span class="line"><span class="function">QSharedMemory <span class="title">sharedMemory</span><span class="params">(<span class="string">"MySharedMemory"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!sharedMemory.<span class="built_in">create</span>(<span class="built_in">sizeof</span>(MyData))) {</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Failed to create shared memory"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">MyData* data = <span class="built_in">static_cast</span>&lt;MyData*&gt;(sharedMemory.<span class="built_in">data</span>());</span><br><span class="line">data-&gt;x = <span class="number">1</span>;</span><br><span class="line">data-&gt;y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reader进程</span></span><br><span class="line"></span><br><span class="line"><span class="function">QSharedMemory <span class="title">sharedMemory</span><span class="params">(<span class="string">"MySharedMemory"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!sharedMemory.<span class="built_in">attach</span>()) {</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Failed to attach to shared memory"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">MyData* data = <span class="built_in">static_cast</span>&lt;MyData*&gt;(sharedMemory.<span class="built_in">data</span>());</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"x = "</span> &lt;&lt; data-&gt;x &lt;&lt; <span class="string">", y = "</span> &lt;&lt; data-&gt;y;</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，Writer进程创建了一个名为”MySharedMemory”的共享内存，并向其中写入了数据。Reader进程通过attach()函数打开了同一块共享内存，并从中读取了数据。</p><p>需要注意的是，在使用共享内存时要保证多个进程对同一块内存的访问顺序和正确性。可以使用互斥锁等机制来实现共享内存的同步和互斥访问。</p><p>是的，读取共享内存的时候需要先将共享内存区域映射到进程的地址空间。具体可以使用QSharedMemory的<code>attach()</code>函数来完成映射。代码示例如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">QSharedMemory <span class="title">sharedMemory</span><span class="params">(<span class="string">"mySharedMemory"</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (sharedMemory.<span class="built_in">attach</span>()) {</span><br><span class="line">    <span class="comment">// 将共享内存区域映射到进程的地址空间</span></span><br><span class="line">    <span class="type">char</span> *data = (<span class="type">char</span> *)sharedMemory.<span class="built_in">constData</span>();</span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 解除映射</span></span><br><span class="line">    sharedMemory.<span class="built_in">detach</span>();</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 映射失败，处理错误</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中，<code>constData()</code>函数返回共享内存区域的首地址，这里将它转换成<code>char*</code>类型。在读取数据时，需要根据实际情况进行解析。最后，调用<code>detach()</code>函数解除共享内存区域和进程地址空间的映射关系。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>在 Qt 中使用多线程，有两种方式，一种是继承自 QThread 类，另一种是继承自 QObject 类并使用 moveToThread 函数将该对象移动到新线程中。</p><h3 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h3><p>继承自 QThread 类的方式通常用于比较简单的多线程应用，继承自 QObject 类的方式则适合于更复杂的多线程应用，比如多个线程之间需要相互通信等。</p><p>在继承自 QThread 类的方式中，需要实现 run 函数，在该函数中执行线程需要执行的操作。示例代码如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> : <span class="keyword">public</span> QThread</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyThread</span>(QObject *parent = <span class="literal">nullptr</span>) : <span class="built_in">QThread</span>(parent) {}</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">override</span> </span>{</span><br><span class="line">        <span class="comment">// 执行线程需要执行的操作</span></span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>当需要启动该线程时，创建该线程对象，并调用 start 函数。如下所示：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">MyThread *thread = <span class="keyword">new</span> <span class="built_in">MyThread</span>(<span class="keyword">this</span>);</span><br><span class="line">thread-&gt;<span class="built_in">start</span>();</span><br></pre></td></tr></tbody></table></figure><p>这里需要注意的是，线程对象的创建和 start 函数的调用都应该在主线程中进行。</p><p>在继承自 QObject 类的方式中，首先需要将该对象移动到新线程中，然后再调用 start 函数启动线程。示例代码如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyObject</span> : <span class="keyword">public</span> QObject</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyObject</span>(QObject *parent = <span class="literal">nullptr</span>) : <span class="built_in">QObject</span>(parent) {}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">doWork</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 执行需要在新线程中执行的操作</span></span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在主线程中创建 MyObject 对象，并将其移动到新线程中</span></span><br><span class="line">QThread *thread = <span class="keyword">new</span> <span class="built_in">QThread</span>();</span><br><span class="line">MyObject *obj = <span class="keyword">new</span> <span class="built_in">MyObject</span>();</span><br><span class="line">obj-&gt;<span class="built_in">moveToThread</span>(thread);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">QObject::<span class="built_in">connect</span>(thread, &amp;QThread::started, obj, &amp;MyObject::doWork);</span><br><span class="line">thread-&gt;<span class="built_in">start</span>();</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，MyObject 类中定义了一个名为 doWork 的槽函数，该函数中包含需要在新线程中执行的操作。创建线程对象 thread，将 MyObject 对象 obj 移动到该线程中，并将 doWork 槽函数与线程对象的 started 信号连接起来，从而在线程启动时自动调用 doWork 函数。</p><p>需要注意的是，在使用线程进行多线程编程时，需要特别注意线程安全性问题，避免出现多线程竞争的问题，比如资源抢占、数据不一致等。可以使用信号量、互斥锁等机制来保证线程安全性。</p><h3 id="moveToThread"><a href="#moveToThread" class="headerlink" title="moveToThread"></a>moveToThread</h3><p><code>moveToThread</code> 是 <code>QObject</code> 类中的一个方法，可以将 <code>QObject</code> 对象移动到另一个线程中执行。</p><p>一般来说，在 Qt 中，所有的 GUI 相关操作都必须在主线程中执行，否则容易导致程序崩溃或者表现异常。但是如果某些操作太耗时，就会阻塞主线程，导致界面卡顿或者无响应，这时就需要将耗时操作放到其他线程中执行，而 <code>moveToThread</code> 就是用于将某个对象移动到其他线程中执行的方法。</p><p>使用 <code>moveToThread</code> 方法的基本流程如下：</p><ol><li>创建一个 <code>QObject</code> 子类对象；</li><li>创建一个新的线程；</li><li>调用 <code>QObject::moveToThread</code> 方法，将对象移动到新线程中；</li><li>启动新线程，并在其中执行 <code>QObject</code> 对象的某个方法。</li></ol><p>具体实现方法可以参考以下示例代码：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// WorkerThread.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkerThread</span> : <span class="keyword">public</span> QThread</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">progress</span><span class="params">(<span class="type">int</span> value)</span></span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// WorkerObject.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkerObject</span> : <span class="keyword">public</span> QObject</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">doWork</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建新线程</span></span><br><span class="line">    QThread* thread = <span class="keyword">new</span> QThread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建工作线程对象</span></span><br><span class="line">    WorkerThread* workerThread = <span class="keyword">new</span> WorkerThread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将工作线程对象移动到新线程中</span></span><br><span class="line">    workerThread-&gt;<span class="built_in">moveToThread</span>(thread);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建工作对象</span></span><br><span class="line">    WorkerObject* workerObject = <span class="keyword">new</span> WorkerObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将工作对象的 doWork() 方法与工作线程的 started() 信号关联</span></span><br><span class="line">    QObject::<span class="built_in">connect</span>(thread, &amp;QThread::started, workerObject, &amp;WorkerObject::doWork);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将工作对象的 progress() 信号与主线程的槽函数关联</span></span><br><span class="line">    QObject::<span class="built_in">connect</span>(workerObject, &amp;WorkerObject::progress, [] (<span class="type">int</span> value) {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Progress:"</span> &lt;&lt; value;</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动新线程</span></span><br><span class="line">    thread-&gt;<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.<span class="built_in">exec</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// WorkerThread.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerThread::run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Worker thread started."</span>;</span><br><span class="line">    <span class="comment">// do some work</span></span><br><span class="line">    <span class="function">emit <span class="title">progress</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="comment">// do some more work</span></span><br><span class="line">    <span class="function">emit <span class="title">progress</span><span class="params">(<span class="number">50</span>)</span></span>;</span><br><span class="line">    <span class="comment">// do even more work</span></span><br><span class="line">    <span class="function">emit <span class="title">progress</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Worker thread finished."</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// WorkerObject.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerObject::doWork</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Worker object started."</span>;</span><br><span class="line">    <span class="function">emit <span class="title">progress</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// do some work</span></span><br><span class="line">    <span class="function">emit <span class="title">progress</span><span class="params">(<span class="number">25</span>)</span></span>;</span><br><span class="line">    <span class="comment">// do some more work</span></span><br><span class="line">    <span class="function">emit <span class="title">progress</span><span class="params">(<span class="number">75</span>)</span></span>;</span><br><span class="line">    <span class="comment">// do even more work</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Worker object finished."</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>互斥锁（mutex）是多线程编程中常用的同步机制，用于保护共享资源的访问。互斥锁只允许一个线程访问受保护的资源，其他线程必须等待直到该线程释放锁。这种机制可以有效避免多个线程同时访问同一资源而导致的数据竞争和结果不可预期的情况。</p><p>在C++中，可以使用<code>std::mutex</code>或者<code>QMutex</code>类来实现互斥锁。使用互斥锁的基本流程如下：</p><ol><li>创建互斥锁对象</li><li>在需要保护的代码块前获取锁</li><li>访问共享资源</li><li>在代码块后释放锁</li></ol><p>下面是一个使用<code>QMutex</code>的示例代码：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建互斥锁对象</span></span><br><span class="line">QMutex mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">accessSharedResource</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 在代码块前获取锁</span></span><br><span class="line">    mutex.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="comment">// 访问共享资源</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 在代码块后释放锁</span></span><br><span class="line">    mutex.<span class="built_in">unlock</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，互斥锁的使用需要注意以下几点：</p><ol><li>互斥锁只能保护代码块中的共享资源，因此需要将所有需要保护的代码都放在同一个锁中。</li><li>获取锁和释放锁的操作必须成对出现，否则会导致死锁或资源泄露等问题。</li><li>在使用互斥锁时需要考虑性能问题，过多的锁会影响程序的并发性能。</li></ol><h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><p>读写锁（QReadWriteLock）是一种用于多线程编程的同步机制，用于在多线程环境下提供读取数据的并发性，同时保证写入数据时的互斥性。</p><p>读写锁允许多个线程同时读取数据，但只有一个线程能够写入数据。当一个线程正在写入数据时，其他线程无法读取或写入数据，直到写入操作完成。</p><p>读写锁主要有三种锁模式：读锁、写锁和尝试锁。</p><ul><li>读锁：允许多个线程同时持有读锁，并且在读锁没有被持有的情况下允许获取读锁，但是在写锁被持有时不允许获取读锁。</li><li>写锁：只允许一个线程持有写锁，当写锁被持有时不允许获取读锁或写锁。</li><li>尝试锁：允许线程尝试获取读锁或写锁，如果获取不到锁，则立即返回false，不会阻塞线程。</li></ul><blockquote><p>Qt提供了QReadWriteLock类来实现读写锁，可以通过lockForRead()、lockForWrite()和tryLockForRead()、tryLockForWrite()方法获取读锁和写锁。同时，也可以通过QReadLocker和QWriteLocker类来简化锁的使用，这两个类封装了锁的获取和释放，使用时更加方便。</p></blockquote><h2 id="SOCKET"><a href="#SOCKET" class="headerlink" title="SOCKET"></a>SOCKET</h2><h3 id="UDPSOCKET"><a href="#UDPSOCKET" class="headerlink" title="UDPSOCKET"></a>UDPSOCKET</h3><p>UDP Socket 是一种基于无连接的网络协议，数据报是UDP数据包的基本单位，UDP能够实现不可靠的、无序的、尽最大努力的数据传输。在Qt中，可以使用QUdpSocket类来实现UDP协议的通信。通过创建QUdpSocket对象并绑定到本地主机地址和端口号，即可发送和接收UDP数据报。</p><p>下面是一个使用QUdpSocket类发送和接收UDP数据报的示例代码：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建QUdpSocket对象</span></span><br><span class="line">QUdpSocket *udpSocket = <span class="keyword">new</span> <span class="built_in">QUdpSocket</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定本地主机地址和端口号</span></span><br><span class="line">udpSocket-&gt;<span class="built_in">bind</span>(QHostAddress::LocalHost, <span class="number">1234</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送UDP数据报</span></span><br><span class="line">QByteArray datagram = <span class="string">"Hello, World!"</span>;</span><br><span class="line">udpSocket-&gt;<span class="built_in">writeDatagram</span>(datagram, QHostAddress::LocalHost, <span class="number">5678</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收UDP数据报</span></span><br><span class="line">QByteArray buffer;</span><br><span class="line">buffer.<span class="built_in">resize</span>(udpSocket-&gt;<span class="built_in">pendingDatagramSize</span>());</span><br><span class="line">udpSocket-&gt;<span class="built_in">readDatagram</span>(buffer.<span class="built_in">data</span>(), buffer.<span class="built_in">size</span>());</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Received datagram: "</span> &lt;&lt; buffer;</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例中，首先创建了一个QUdpSocket对象，并绑定到本地主机地址和端口号。然后，通过调用writeDatagram()方法发送UDP数据报，将数据报发送到目标主机的5678端口。最后，使用readDatagram()方法接收UDP数据报，并将其存储在buffer中。</p><h3 id="TCPSOCKET"><a href="#TCPSOCKET" class="headerlink" title="TCPSOCKET"></a>TCPSOCKET</h3><p>TCP（Transmission Control Protocol）是传输控制协议，它是一种面向连接的协议，提供可靠的数据传输。在Qt中，可以使用QTcpSocket类来实现TCP客户端，使用QTcpServer类来实现TCP服务器。</p><p>以下是Qt中使用TCP的基本步骤：</p><ol><li>创建QTcpSocket对象或QTcpServer对象。</li><li>为QTcpSocket对象连接信号槽，以便在与服务器连接状态变化时得到通知。</li><li>调用QTcpSocket对象的connectToHost()函数或QTcpServer对象的listen()函数连接服务器或启动服务器监听。</li><li>当QTcpSocket对象的connected()信号触发时，表示成功连接到服务器。此时可以使用QTcpSocket对象的write()函数向服务器发送数据。</li><li>当QTcpSocket对象的readyRead()信号触发时，表示有数据到达。此时可以使用QTcpSocket对象的read()函数读取数据。</li><li>当QTcpSocket对象的disconnected()信号触发时，表示与服务器连接已断开。</li></ol><p>注意事项：</p><ol><li>在连接前需要调用QTcpSocket对象或QTcpServer对象的setSocketOption()函数来设置socket选项。</li><li>在Qt5之前，需要在main函数中使用QCoreApplication::processEvents()函数来触发信号槽连接。</li><li>在Qt5之后，建议使用QCoreApplication::exec()函数替代QCoreApplication::processEvents()函数来触发信号槽连接。</li></ol><p>示例代码：</p><ol><li>TCP客户端：</li></ol><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">QTcpSocket *tcpSocket = <span class="keyword">new</span> <span class="built_in">QTcpSocket</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">connect</span>(tcpSocket, &amp;QTcpSocket::connected, <span class="keyword">this</span>, [&amp;]() {</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Connected to server"</span>;</span><br><span class="line">    tcpSocket-&gt;<span class="built_in">write</span>(<span class="string">"Hello, server"</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(tcpSocket, &amp;QTcpSocket::readyRead, <span class="keyword">this</span>, [&amp;]() {</span><br><span class="line">    QByteArray data = tcpSocket-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Received data from server:"</span> &lt;&lt; data;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">tcpSocket-&gt;<span class="built_in">connectToHost</span>(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>TCP服务器：</li></ol><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">QTcpServer *tcpServer = <span class="keyword">new</span> <span class="built_in">QTcpServer</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">connect</span>(tcpServer, &amp;QTcpServer::newConnection, <span class="keyword">this</span>, [&amp;]() {</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"New client connected"</span>;</span><br><span class="line">    QTcpSocket *clientSocket = tcpServer-&gt;<span class="built_in">nextPendingConnection</span>();</span><br><span class="line">    <span class="built_in">connect</span>(clientSocket, &amp;QTcpSocket::disconnected, <span class="keyword">this</span>, [&amp;]() {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Client disconnected"</span>;</span><br><span class="line">        clientSocket-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line">    });</span><br><span class="line">    <span class="built_in">connect</span>(clientSocket, &amp;QTcpSocket::readyRead, <span class="keyword">this</span>, [&amp;]() {</span><br><span class="line">        QByteArray data = clientSocket-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Received data from client:"</span> &lt;&lt; data;</span><br><span class="line">        clientSocket-&gt;<span class="built_in">write</span>(<span class="string">"Hello, client"</span>);</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tcpServer-&gt;<span class="built_in">listen</span>(QHostAddress::Any, <span class="number">8888</span>)) {</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Server started"</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Failed to start server"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>QNetworkAccessManager是一个用于网络访问的类，它提供了一系列函数用于发送和接收网络请求，支持HTTP、FTP、文件下载、文件上传等操作。通过QNetworkAccessManager，可以发起HTTP GET/POST请求，上传和下载文件等操作。</p><p>使用QNetworkAccessManager进行网络请求通常需要以下步骤：</p><ol><li>创建一个QNetworkAccessManager实例，用于管理网络请求；</li><li>创建一个QNetworkRequest实例，用于描述请求信息，包括请求的URL、请求头、请求方式等；</li><li>发送请求，通常使用QNetworkAccessManager的get()、post()等函数；</li><li>处理响应，通常使用QNetworkReply类的信号来获取响应数据。</li></ol><p>以下是一个使用QNetworkAccessManager进行HTTP GET请求的示例代码：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtNetwork&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    QNetworkAccessManager manager;</span><br><span class="line">    <span class="function">QNetworkRequest <span class="title">request</span><span class="params">(QUrl(<span class="string">"https://www.example.com"</span>))</span></span>;</span><br><span class="line">    QNetworkReply *reply = manager.<span class="built_in">get</span>(request);</span><br><span class="line"></span><br><span class="line">    QObject::<span class="built_in">connect</span>(reply, &amp;QNetworkReply::finished, [&amp;]() {</span><br><span class="line">        <span class="keyword">if</span> (reply-&gt;<span class="built_in">error</span>() == QNetworkReply::NoError) {</span><br><span class="line">            QByteArray data = reply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; data;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Request failed:"</span> &lt;&lt; reply-&gt;<span class="built_in">errorString</span>();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        reply-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line">        a.<span class="built_in">quit</span>();</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，我们首先创建了一个QNetworkAccessManager实例，然后创建了一个QNetworkRequest实例，指定请求的URL为<a href="https://www.example.com.接着,我们调用manager.get(request)发送请求,并获得一个qnetworkreply实例reply,用于处理响应数据./">https://www.example.com。接着，我们调用manager.get(request)发送请求，并获得一个QNetworkReply实例reply，用于处理响应数据。</a></p><p>我们使用QObject::connect()函数将QNetworkReply::finished信号与一个lambda表达式连接，用于在请求完成时获取响应数据。如果请求成功，我们可以使用QNetworkReply::readAll()函数读取响应数据，如果请求失败，我们可以使用QNetworkReply::errorString()函数获取错误信息。最后，我们调用reply-&gt;deleteLater()函数释放QNetworkReply实例，然后调用QCoreApplication::quit()函数退出应用程序。</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QWidget</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">{</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//qDebug()&lt;&lt;"QSslSocket="&lt;&lt;QSslSocket::sslLibraryBuildVersionString();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建应用获取 key</span></span><br><span class="line">    QString API_Key = <span class="string">"Xokw5o3jf9lwUsqQX7mPzhf9"</span>;</span><br><span class="line">    QString Secret_Key = <span class="string">"K3tc1PQdcV2onyPUe4ICEtmgBdABWHCm"</span>;</span><br><span class="line">    manager = <span class="keyword">new</span> <span class="built_in">QNetworkAccessManager</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建请求对象</span></span><br><span class="line">    <span class="comment">//AppID: 23669392    API Key: Xokw5o3jf9lwUsqQX7mPzhf9  Secret Key: K3tc1PQdcV2onyPUe4ICEtmgBdABWHCm</span></span><br><span class="line">    <span class="comment">//https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=Xokw5o3jf9lwUsqQX7mPzhf9&amp;client_secret=K3tc1PQdcV2onyPUe4ICEtmgBdABWHCm&amp;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求url</span></span><br><span class="line">    <span class="comment">//    QString requestUrl = "https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;";</span></span><br><span class="line">    <span class="comment">//    requestUrl += QString("client_id=%1&amp;").arg(API_Key);</span></span><br><span class="line">    <span class="comment">//    requestUrl += QString("client_secret=%1").arg(Secret_Key);</span></span><br><span class="line"></span><br><span class="line">    QString requestUrl = <span class="string">"https://aip.baidubce.com/oauth/2.0/token?"</span>;</span><br><span class="line">    QString data =<span class="built_in">QString</span>(<span class="string">"grant_type=client_credentials&amp;client_id=Xokw5o3jf9lwUsqQX7mPzhf9&amp;client_secret=K3tc1PQdcV2onyPUe4ICEtmgBdABWHCm&amp;"</span>);</span><br><span class="line">    QNetworkRequest request; <span class="comment">//http的类</span></span><br><span class="line">    request.<span class="built_in">setUrl</span>(<span class="built_in">QUrl</span>(requestUrl));</span><br><span class="line">    request.<span class="built_in">setRawHeader</span>(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>); <span class="comment">//设置http的头</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(manager,<span class="built_in">SIGNAL</span>(<span class="built_in">finished</span>(QNetworkReply*)),<span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">networkReply</span>(QNetworkReply*)));</span><br><span class="line"></span><br><span class="line">    manager-&gt;<span class="built_in">post</span>(request,data.<span class="built_in">toLatin1</span>());<span class="comment">//提交http 的 post请求</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::networkReply</span><span class="params">(QNetworkReply* reply)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(reply-&gt;<span class="built_in">error</span>() == QNetworkReply::NoError)<span class="comment">//如果返回结果没有错误</span></span><br><span class="line">    {</span><br><span class="line">        QByteArray data = reply-&gt;<span class="built_in">readAll</span>();<span class="comment">//读取百度的返回结果</span></span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; data;</span><br><span class="line">        QJsonDocument json =  QJsonDocument::<span class="built_in">fromJson</span>(data);<span class="comment">//QByteArrary -&gt; json</span></span><br><span class="line">        QJsonObject object = json.<span class="built_in">object</span>();<span class="comment">//转json对象</span></span><br><span class="line">        <span class="keyword">if</span>(object.<span class="built_in">isEmpty</span>() || !object.<span class="built_in">contains</span>(<span class="string">"access_token"</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        QString token =  object[<span class="string">"access_token"</span>].<span class="built_in">toString</span>();<span class="comment">//提取access_token</span></span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"token: "</span>&lt;&lt; token;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; reply-&gt;<span class="built_in">errorString</span>();<span class="comment">//打印错误信息</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    reply-&gt;<span class="built_in">deleteLater</span>();<span class="comment">//delete reply</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>在 Qt 中，可以使用 QSqlDatabase 类来操作各种类型的数据库，包括 SQLite3 数据库。使用 SQLite3 数据库时，需要下载相应的驱动程序。通常情况下，驱动程序可以在 Qt 官网的下载页面上找到。</p><p>下面是使用 QSqlDatabase 操作 SQLite3 数据库的基本流程：</p><ol><li>引入头文件：</li></ol><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSqlDatabase&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSqlQuery&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSqlError&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>打开数据库：</li></ol><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">QSqlDatabase db = QSqlDatabase::<span class="built_in">addDatabase</span>(<span class="string">"QSQLITE"</span>);</span><br><span class="line">db.<span class="built_in">setDatabaseName</span>(<span class="string">"mydatabase.db"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!db.<span class="built_in">open</span>()) {</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Database Error:"</span> &lt;&lt; db.<span class="built_in">lastError</span>().<span class="built_in">text</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里创建了一个名为 <code>mydatabase.db</code> 的数据库文件，并打开了它。如果打开失败，会输出错误信息。</p><ol start="3"><li>创建表：</li></ol><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">QSqlQuery query;</span><br><span class="line"><span class="keyword">if</span> (!query.<span class="built_in">exec</span>(<span class="string">"CREATE TABLE student (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)"</span>)) {</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Query Error:"</span> &lt;&lt; query.<span class="built_in">lastError</span>().<span class="built_in">text</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里创建了一个名为 <code>student</code> 的表，包含三个字段：<code>id</code>、<code>name</code> 和 <code>age</code>。</p><ol start="4"><li>插入数据：</li></ol><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!query.<span class="built_in">exec</span>(<span class="string">"INSERT INTO student (name, age) VALUES ('Tom', 18)"</span>)) {</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Query Error:"</span> &lt;&lt; query.<span class="built_in">lastError</span>().<span class="built_in">text</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里向 <code>student</code> 表中插入了一条记录，其中 <code>name</code> 字段的值为 <code>Tom</code>，<code>age</code> 字段的值为 <code>18</code>。</p><ol start="5"><li>查询数据：</li></ol><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!query.<span class="built_in">exec</span>(<span class="string">"SELECT * FROM student"</span>)) {</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"Query Error:"</span> &lt;&lt; query.<span class="built_in">lastError</span>().<span class="built_in">text</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (query.<span class="built_in">next</span>()) {</span><br><span class="line">    <span class="type">int</span> id = query.<span class="built_in">value</span>(<span class="number">0</span>).<span class="built_in">toInt</span>();</span><br><span class="line">    QString name = query.<span class="built_in">value</span>(<span class="number">1</span>).<span class="built_in">toString</span>();</span><br><span class="line">    <span class="type">int</span> age = query.<span class="built_in">value</span>(<span class="number">2</span>).<span class="built_in">toInt</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"id:"</span> &lt;&lt; id &lt;&lt; <span class="string">"name:"</span> &lt;&lt; name &lt;&lt; <span class="string">"age:"</span> &lt;&lt; age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里查询了 <code>student</code> 表中的所有数据，并遍历了查询结果，输出了每条记录中 <code>id</code>、<code>name</code> 和 <code>age</code> 三个字段的值。</p><ol start="6"><li>关闭数据库：</li></ol><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">db.<span class="built_in">close</span>();</span><br></pre></td></tr></tbody></table></figure><p>这里关闭了数据库。</p><h2 id="风格样式表"><a href="#风格样式表" class="headerlink" title="风格样式表"></a>风格样式表</h2><p>Qt 提供了样式表（Style Sheet）的功能，可以使用 CSS 的语法来设置控件的外观和布局，实现界面的美化和自定义。</p><p>以下是使用样式表美化 Qt 界面的一些知识点：</p><ol><li>选择器：类似于 CSS 中的选择器，用于选择某个或某些控件，并设置样式。例如：</li></ol><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">QLabel {</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的样式表会将所有 QLabel 的字体颜色设置为蓝色，字体大小设置为 16 像素。</p><ol start="2"><li>属性：样式表可以设置控件的各种属性，包括大小、颜色、边框、背景等。例如：</li></ol><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">QPushButton {</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的样式表会将所有 QPushButton 的边框设置为灰色实线，边框圆角设置为 5 像素，背景颜色设置为白色，内边距设置为 5 像素。</p><ol start="3"><li>伪状态：样式表可以设置控件的伪状态，例如鼠标悬浮、按下、选中等状态下的样式。例如：</li></ol><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">QPushButton<span class="selector-pseudo">:hover</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">}</span><br><span class="line">QPushButton:pressed {</span><br><span class="line">    <span class="attribute">background-color</span>: darkgray;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的样式表会将所有 QPushButton 在鼠标悬浮状态下的背景颜色设置为灰色，在鼠标按下状态下的背景颜色设置为深灰色。</p><ol start="4"><li>布局：样式表可以设置控件的布局，例如控件之间的间距、对齐方式等。例如：</li></ol><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">QVBoxLayout {</span><br><span class="line">    spacing: <span class="number">10px</span>;</span><br><span class="line">    alignment: center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的样式表会将 QVBoxLayout 中的控件间距设置为 10 像素，对齐方式设置为居中对齐。</p><ol start="5"><li>使用外部样式表：样式表可以使用外部样式表文件，通过加载文件来设置控件样式。例如：</li></ol><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">QFile qssFile(":/styles/style.qss<span class="string">");</span></span><br><span class="line"><span class="string">if (qssFile.open(QFile::ReadOnly)) {</span></span><br><span class="line"><span class="string">    QString styleSheet = QLatin1String(qssFile.readAll());</span></span><br><span class="line"><span class="string">    qApp-&gt;setStyleSheet(styleSheet);</span></span><br><span class="line"><span class="string">    qssFile.close();</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></tbody></table></figure><p>上面的代码会加载当前目录下名为 style.qss 的样式表文件，并应用于整个应用程序。</p><p>总之，样式表是 Qt 界面美化的重要工具，掌握了样式表的基本语法和属性，可以灵活地定制和美化应用程序的界面。</p><h3 id="单独设置"><a href="#单独设置" class="headerlink" title="单独设置"></a>单独设置</h3><h4 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h4><p>如果需要设置某一个控件的样式，可以使用控件的<code>setStyleSheet()</code>方法来设置。该方法接受一个QString类型的参数，参数内容为样式表的字符串。例如，如果要设置一个按钮的背景颜色为蓝色，可以这样写：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">btn.setStyleSheet(<span class="string">"background-color: blue"</span>)</span><br></pre></td></tr></tbody></table></figure><p>如果需要为多个控件设置相同的样式，可以使用样式表中的类选择器。例如，如果需要为所有按钮设置相同的背景颜色，可以这样写：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">QPushButton {</span><br><span class="line">    background-color: blue;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>除了设置背景颜色，样式表还可以设置字体、边框、圆角等多种样式。参考Qt的官方文档，可以找到所有支持的样式属性和样式选择器，从而进行更丰富的控件样式设置。</p><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>是的，可以使用<code>objectName</code>属性来给控件命名，然后在样式表中使用该名字来选择对应的控件并设置其样式。例如，给一个QPushButton设置名字为”myButton”：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">QPushButton* button = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">"Click me"</span>);</span><br><span class="line">button-&gt;<span class="built_in">setObjectName</span>(<span class="string">"myButton"</span>);</span><br></pre></td></tr></tbody></table></figure><p>然后可以在样式表中通过名字来设置该按钮的样式：</p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-id">#myButton</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，<code>#myButton</code>表示选择名字为”myButton”的控件，然后设置其背景颜色、文本颜色和字体大小。</p><h2 id="api调用"><a href="#api调用" class="headerlink" title="api调用"></a>api调用</h2><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"widget.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"ui_widget.h"</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent) : <span class="built_in">QWidget</span>(parent), <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget) {</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    QString API_Key = <span class="string">"zt7hUuu60LZB1kP3Vqr7mzeF"</span>;</span><br><span class="line">    QString Secret_Key = <span class="string">"wsrBT4uD1TsNI00demCN0gfEt7iMmFfR"</span>;</span><br><span class="line">    manager = <span class="keyword">new</span> <span class="built_in">QNetworkAccessManager</span>(<span class="keyword">this</span>);</span><br><span class="line">    QString requestUrl = <span class="string">"https://aip.baidubce.com/oauth/2.0/token"</span>;</span><br><span class="line">    QString data = <span class="built_in">QString</span>(<span class="string">"grant_type=%0"</span></span><br><span class="line">                           <span class="string">"&amp;client_id=%1&amp;"</span></span><br><span class="line">                           <span class="string">"client_secret=%2"</span>)</span><br><span class="line">                       .<span class="built_in">arg</span>(<span class="string">"client_credentials"</span>)</span><br><span class="line">                       .<span class="built_in">arg</span>(API_Key)</span><br><span class="line">                       .<span class="built_in">arg</span>(Secret_Key);</span><br><span class="line">    QNetworkRequest request; <span class="comment">//http的类</span></span><br><span class="line">    request.<span class="built_in">setUrl</span>(<span class="built_in">QUrl</span>(requestUrl));</span><br><span class="line">    request.<span class="built_in">setRawHeader</span>(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>); <span class="comment">//设置http的头</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    jsonObj["grant_type"] = "client_credentials";</span></span><br><span class="line">    <span class="comment">//    jsonObj["client_id"] = API_Key;</span></span><br><span class="line">    <span class="comment">//    jsonObj["client_credentials"] = Secret_Key;</span></span><br><span class="line">    <span class="comment">//    QByteArray data = QJsonDocument(jsonObj).toJson(QJsonDocument::Compact);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(manager, <span class="built_in">SIGNAL</span>(<span class="built_in">finished</span>(QNetworkReply *)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">networkReply</span>(QNetworkReply *)));</span><br><span class="line">    manager-&gt;<span class="built_in">post</span>(request, data.<span class="built_in">toLatin1</span>());</span><br><span class="line"></span><br><span class="line">    format.<span class="built_in">setSampleRate</span>(<span class="number">16000</span>);</span><br><span class="line">    format.<span class="built_in">setChannelCount</span>(<span class="number">1</span>);</span><br><span class="line">    format.<span class="built_in">setSampleFormat</span>(QAudioFormat::Int16);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>() {</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_clicked</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">send</span>(ui-&gt;textEdit-&gt;<span class="built_in">toPlainText</span>());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::networkReply</span><span class="params">(QNetworkReply *reply)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (reply-&gt;<span class="built_in">error</span>() == QNetworkReply::NoError) { <span class="comment">//如果返回结果没有错误</span></span><br><span class="line">        QByteArray data = reply-&gt;<span class="built_in">readAll</span>();         <span class="comment">//读取百度的返回结果</span></span><br><span class="line">        <span class="comment">//qDebug() &lt;&lt; data;</span></span><br><span class="line">        QJsonDocument json = QJsonDocument::<span class="built_in">fromJson</span>(data);       <span class="comment">//QByteArrary -&gt; json</span></span><br><span class="line">        QJsonObject object = json.<span class="built_in">object</span>();                       <span class="comment">//转json对象</span></span><br><span class="line">        <span class="keyword">if</span> (!object.<span class="built_in">isEmpty</span>() &amp;&amp; data.<span class="built_in">contains</span>(<span class="string">"access_token"</span>)) { <span class="comment">//包含access_token 请求令牌</span></span><br><span class="line">            token = object[<span class="string">"access_token"</span>].<span class="built_in">toString</span>();            <span class="comment">//提取access_token</span></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (!object.<span class="built_in">isEmpty</span>() &amp;&amp; data.<span class="built_in">contains</span>(<span class="string">"action_id"</span>)) { <span class="comment">//返回问题回答</span></span><br><span class="line">            QJsonObject result = object[<span class="string">"result"</span>].<span class="built_in">toObject</span>();</span><br><span class="line">            QJsonObject response = result[<span class="string">"response"</span>].<span class="built_in">toObject</span>();</span><br><span class="line">            QJsonArray action_list = response[<span class="string">"action_list"</span>].<span class="built_in">toArray</span>();</span><br><span class="line">            QString say = action_list[<span class="number">0</span>].<span class="built_in">toObject</span>().<span class="built_in">value</span>(<span class="string">"say"</span>).<span class="built_in">toString</span>();</span><br><span class="line">            ui-&gt;textEdit_2-&gt;<span class="built_in">setText</span>(say);</span><br><span class="line">            <span class="built_in">toAudio</span>(say);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (!object.<span class="built_in">isEmpty</span>() &amp;&amp; data.<span class="built_in">contains</span>(<span class="string">"corpus_no"</span>)) { <span class="comment">//语音识别结果</span></span><br><span class="line">            QJsonArray result = object[<span class="string">"result"</span>].<span class="built_in">toArray</span>();</span><br><span class="line">            ui-&gt;textEdit-&gt;<span class="built_in">setText</span>(result[<span class="number">0</span>].<span class="built_in">toString</span>());</span><br><span class="line">            <span class="built_in">send</span>(result[<span class="number">0</span>].<span class="built_in">toString</span>());</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">playAudio</span>(data);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; reply-&gt;<span class="built_in">errorString</span>(); <span class="comment">//打印错误信息</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    reply-&gt;<span class="built_in">deleteLater</span>(); <span class="comment">//delete reply</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_2_pressed</span><span class="params">()</span> </span>{ <span class="comment">//录音</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"录音"</span>;</span><br><span class="line"></span><br><span class="line">    sourceFile = <span class="keyword">new</span> <span class="built_in">QFile</span>(<span class="string">"audio.wav"</span>);</span><br><span class="line">    sourceFile-&gt;<span class="built_in">open</span>(QIODevice::ReadWrite);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//音频格式</span></span><br><span class="line"></span><br><span class="line">    <span class="function">QAudioDevice <span class="title">inputDevice</span><span class="params">(QMediaDevices::defaultAudioInput())</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!inputDevice.<span class="built_in">isFormatSupported</span>(format)) {</span><br><span class="line">        <span class="built_in">qWarning</span>() &lt;&lt; <span class="string">"Default input format not supported, trying to use the nearest."</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    audioSource = <span class="keyword">new</span> <span class="built_in">QAudioSource</span>(inputDevice, format, <span class="keyword">this</span>);</span><br><span class="line">    audioSource-&gt;<span class="built_in">start</span>(sourceFile);</span><br><span class="line">    timeout = <span class="number">20</span>;</span><br><span class="line">    timerid = <span class="built_in">startTimer</span>(<span class="number">1000</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_2_released</span><span class="params">()</span> </span>{ <span class="comment">//结束录音</span></span><br><span class="line"></span><br><span class="line">    ui-&gt;pushButton_2-&gt;<span class="built_in">setText</span>(<span class="string">"录音"</span>);</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">"结束录音"</span>;</span><br><span class="line">    audioSource-&gt;<span class="built_in">stop</span>();</span><br><span class="line">    sourceFile-&gt;<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">delete</span> audioSource;</span><br><span class="line"></span><br><span class="line">    sourceFile-&gt;<span class="built_in">setFileName</span>(<span class="string">"audio.wav"</span>);</span><br><span class="line">    sourceFile-&gt;<span class="built_in">open</span>(QIODevice::ReadOnly);</span><br><span class="line">    <span class="comment">//    QAudioDevice outputDevice(QMediaDevices::defaultAudioOutput());</span></span><br><span class="line">    <span class="comment">//    if (!outputDevice.isFormatSupported(format)) {</span></span><br><span class="line">    <span class="comment">//        qWarning() &lt;&lt; "Default output format not supported, trying to use the nearest.";</span></span><br><span class="line">    <span class="comment">//        return;</span></span><br><span class="line">    <span class="comment">//    }</span></span><br><span class="line">    <span class="comment">//    audioSink = new QAudioSink(outputDevice, format, this);</span></span><br><span class="line">    <span class="comment">//    audioSink-&gt;start(sourceFile);</span></span><br><span class="line">    <span class="comment">//sourceFile-&gt;close();</span></span><br><span class="line">    <span class="keyword">if</span> (timeout &lt;= <span class="number">0</span>) {</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">"提示"</span>, <span class="string">"语音过长"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">killTimer</span>(timerid);</span><br><span class="line">    }</span><br><span class="line">    QMessageBox::StandardButton button = QMessageBox::<span class="built_in">question</span>(<span class="keyword">this</span>, <span class="string">"确认"</span>, <span class="string">"确认发送?"</span>);</span><br><span class="line">    <span class="keyword">if</span> (button == QMessageBox::Yes) {</span><br><span class="line">        QString base64Data = sourceFile-&gt;<span class="built_in">readAll</span>().<span class="built_in">toBase64</span>();</span><br><span class="line">        QJsonObject jsonObject;</span><br><span class="line">        jsonObject[<span class="string">"format"</span>] = <span class="string">"wav"</span>;</span><br><span class="line">        jsonObject[<span class="string">"rate"</span>] = <span class="number">16000</span>;</span><br><span class="line">        jsonObject[<span class="string">"dev_pid"</span>] = <span class="number">1537</span>;</span><br><span class="line">        jsonObject[<span class="string">"channel"</span>] = <span class="number">1</span>;</span><br><span class="line">        jsonObject[<span class="string">"token"</span>] = token;</span><br><span class="line">        jsonObject[<span class="string">"cuid"</span>] = <span class="string">"123"</span>;</span><br><span class="line">        jsonObject[<span class="string">"len"</span>] = sourceFile-&gt;<span class="built_in">size</span>();</span><br><span class="line">        jsonObject[<span class="string">"speech"</span>] = base64Data;</span><br><span class="line"></span><br><span class="line">        <span class="function">QJsonDocument <span class="title">jsonDoc</span><span class="params">(jsonObject)</span></span>;</span><br><span class="line">        QByteArray jsonData = jsonDoc.<span class="built_in">toJson</span>(QJsonDocument::Compact);</span><br><span class="line"></span><br><span class="line">        QNetworkRequest request;</span><br><span class="line">        QString requestUrl = <span class="string">"http://vop.baidu.com/server_api"</span>;</span><br><span class="line">        request.<span class="built_in">setRawHeader</span>(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">        request.<span class="built_in">setUrl</span>(<span class="built_in">QUrl</span>(requestUrl));</span><br><span class="line">        manager-&gt;<span class="built_in">post</span>(request, jsonData);</span><br><span class="line">        sourceFile-&gt;<span class="built_in">close</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::send</span><span class="params">(QString msg)</span> </span>{</span><br><span class="line">    QString requestUrl = <span class="string">"https://aip.baidubce.com/rpc/2.0/unit/bot/chat?access_token="</span> + token;</span><br><span class="line">    QJsonObject jsonObj;</span><br><span class="line">    QString skill = ui-&gt;comboBox-&gt;<span class="built_in">currentText</span>();</span><br><span class="line">    QString skill_id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (skill == <span class="string">"智能问答"</span>) {</span><br><span class="line">        skill_id = <span class="string">"1349733"</span>;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (skill == <span class="string">"音乐"</span>) {</span><br><span class="line">        skill_id = <span class="string">"1349736"</span>;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (skill == <span class="string">"笑话"</span>) {</span><br><span class="line">        skill_id = <span class="string">"1349737"</span>;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (skill == <span class="string">"闲聊"</span>) {</span><br><span class="line">        skill_id = <span class="string">"1349734"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    jsonObj[<span class="string">"version"</span>] = <span class="string">"2.0"</span>;</span><br><span class="line">    jsonObj[<span class="string">"service_id"</span>] = <span class="string">"S90591"</span>;</span><br><span class="line">    jsonObj[<span class="string">"session_id"</span>] = <span class="string">""</span>;</span><br><span class="line">    jsonObj[<span class="string">"skill_id"</span>] = skill_id;</span><br><span class="line">    jsonObj[<span class="string">"log_id"</span>] = <span class="string">"7758521"</span>;</span><br><span class="line">    QJsonObject problem;</span><br><span class="line">    problem[<span class="string">"user_id"</span>] = <span class="string">"123"</span>;</span><br><span class="line">    problem[<span class="string">"terminal_id"</span>] = <span class="string">"88888"</span>;</span><br><span class="line">    problem[<span class="string">"query"</span>] = msg;</span><br><span class="line">    jsonObj[<span class="string">"request"</span>] = problem;</span><br><span class="line">    QByteArray data = <span class="built_in">QJsonDocument</span>(jsonObj).<span class="built_in">toJson</span>(QJsonDocument::Compact);</span><br><span class="line"></span><br><span class="line">    QNetworkRequest request; <span class="comment">//http的类</span></span><br><span class="line">    request.<span class="built_in">setUrl</span>(<span class="built_in">QUrl</span>(requestUrl));</span><br><span class="line">    request.<span class="built_in">setRawHeader</span>(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>); <span class="comment">//设置http的头</span></span><br><span class="line">    manager-&gt;<span class="built_in">post</span>(request, data);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::toAudio</span><span class="params">(QString msg)</span> </span>{</span><br><span class="line">    QString requestUrl = <span class="string">"http://tsn.baidu.com/text2audio"</span>;</span><br><span class="line"></span><br><span class="line">    QJsonObject jsonObject;</span><br><span class="line">    jsonObject.<span class="built_in">insert</span>(<span class="string">"tex"</span>, msg);</span><br><span class="line">    jsonObject.<span class="built_in">insert</span>(<span class="string">"tok"</span>, token);</span><br><span class="line">    jsonObject.<span class="built_in">insert</span>(<span class="string">"cuid"</span>, <span class="string">"123"</span>);</span><br><span class="line">    jsonObject.<span class="built_in">insert</span>(<span class="string">"ctp"</span>, <span class="string">"1"</span>);</span><br><span class="line">    jsonObject.<span class="built_in">insert</span>(<span class="string">"lan"</span>, <span class="string">"zh"</span>);</span><br><span class="line">    jsonObject.<span class="built_in">insert</span>(<span class="string">"spd"</span>, <span class="number">5</span>);</span><br><span class="line">    jsonObject.<span class="built_in">insert</span>(<span class="string">"pit"</span>, <span class="number">5</span>);</span><br><span class="line">    jsonObject.<span class="built_in">insert</span>(<span class="string">"vol"</span>, <span class="number">5</span>);</span><br><span class="line">    jsonObject.<span class="built_in">insert</span>(<span class="string">"per"</span>, <span class="number">0</span>);</span><br><span class="line">    jsonObject.<span class="built_in">insert</span>(<span class="string">"aue"</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    QUrlQuery query;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;key : jsonObject.<span class="built_in">keys</span>()) {</span><br><span class="line">        query.<span class="built_in">addQueryItem</span>(key, jsonObject.<span class="built_in">value</span>(key).<span class="built_in">toString</span>());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    QString encodedString = query.<span class="built_in">toString</span>(QUrl::FullyEncoded);</span><br><span class="line"></span><br><span class="line">    QNetworkRequest request; <span class="comment">//http的类</span></span><br><span class="line">    request.<span class="built_in">setUrl</span>(<span class="built_in">QUrl</span>(requestUrl));</span><br><span class="line">    request.<span class="built_in">setRawHeader</span>(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>); <span class="comment">//设置http的头</span></span><br><span class="line">    manager-&gt;<span class="built_in">post</span>(request, encodedString.<span class="built_in">toLatin1</span>());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::playAudio</span><span class="params">(QByteArray data)</span> </span>{</span><br><span class="line">    toAudioFile = <span class="keyword">new</span> <span class="built_in">QFile</span>(<span class="string">"toaduio.mp3"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!toAudioFile-&gt;<span class="built_in">open</span>(QIODevice::WriteOnly)) {</span><br><span class="line">        <span class="built_in">qWarning</span>() &lt;&lt; <span class="string">"Could not open file for writing"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">QDataStream <span class="title">out</span><span class="params">(toAudioFile)</span></span>;</span><br><span class="line">    out.<span class="built_in">writeRawData</span>(data.<span class="built_in">constData</span>(), data.<span class="built_in">size</span>());</span><br><span class="line">    toAudioFile-&gt;<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    toAudioFile-&gt;<span class="built_in">setFileName</span>(<span class="string">"toaduio.mp3"</span>);</span><br><span class="line">    toAudioFile-&gt;<span class="built_in">open</span>(QIODevice::ReadOnly);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    QAudioDevice outputDevice(QMediaDevices::defaultAudioOutput());</span></span><br><span class="line">    <span class="comment">//    if (!outputDevice.isFormatSupported(format)) {</span></span><br><span class="line">    <span class="comment">//        qWarning() &lt;&lt; "Default output format not supported, trying to use the nearest.";</span></span><br><span class="line">    <span class="comment">//        return;</span></span><br><span class="line">    <span class="comment">//    }</span></span><br><span class="line">    <span class="comment">//    audioSink = new QAudioSink(outputDevice, format, this);</span></span><br><span class="line">    <span class="comment">//    audioSink-&gt;start(toAudioFile);</span></span><br><span class="line">    <span class="comment">//toAudioFile-&gt;close();</span></span><br><span class="line"></span><br><span class="line">    player = <span class="keyword">new</span> <span class="built_in">QMediaPlayer</span>();</span><br><span class="line">    QAudioOutput *audioOutput = <span class="keyword">new</span> <span class="built_in">QAudioOutput</span>();</span><br><span class="line">    player-&gt;<span class="built_in">setAudioOutput</span>(audioOutput);</span><br><span class="line">    player-&gt;<span class="built_in">setSource</span>(QUrl::<span class="built_in">fromLocalFile</span>(<span class="string">"toaduio.mp3"</span>));</span><br><span class="line">    audioOutput-&gt;<span class="built_in">setVolume</span>(<span class="number">50</span>);</span><br><span class="line">    player-&gt;<span class="built_in">play</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::timerEvent</span><span class="params">(QTimerEvent *event)</span> </span>{</span><br><span class="line">    ui-&gt;pushButton_2-&gt;<span class="built_in">setText</span>(<span class="built_in">QString</span>(<span class="string">"录音\t(%1s)"</span>).<span class="built_in">arg</span>(timeout--));</span><br><span class="line">    <span class="keyword">if</span> (timeout == <span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">killTimer</span>(timerid);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_3_clicked</span><span class="params">()</span> </span>{ <span class="comment">//暂停播放</span></span><br><span class="line">    <span class="keyword">if</span> (player-&gt;<span class="built_in">isPlaying</span>()) {</span><br><span class="line">        player-&gt;<span class="built_in">pause</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/2023/04/19/C++/"/>
      <url>/2023/04/19/C++/</url>
      
        <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="c-基础知识"><a href="#c-基础知识" class="headerlink" title="c++基础知识"></a>c++基础知识</h2><h3 id="1、基本程序结构"><a href="#1、基本程序结构" class="headerlink" title="1、基本程序结构"></a>1、基本程序结构</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>      <span class="comment">//头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; <span class="comment">//指定名字空间</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span>           <span class="comment">//入口函数</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、基本输出与输出cout-cin"><a href="#2、基本输出与输出cout-cin" class="headerlink" title="2、基本输出与输出cout,cin"></a>2、基本输出与输出cout,cin</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//cin与cout对于基本类型 可以直接输入与输出</span></span><br><span class="line">   cout&lt;&lt;<span class="string">"c++"</span>&lt;&lt;endl;  <span class="comment">//end of line</span></span><br><span class="line">cout&lt;&lt;<span class="number">144</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="number">3.634</span>&lt;&lt;endl;</span><br><span class="line"><span class="comment">//cerr: 错误输出，没有缓存</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3、严格的类型检查"><a href="#3、严格的类型检查" class="headerlink" title="3、严格的类型检查"></a>3、严格的类型检查</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//对const类型， 返回值类型， 有更严格的类型检查 </span></span><br><span class="line"> <span class="type">char</span> *ptr = <span class="string">"test"</span>;  </span><br><span class="line"> <span class="comment">//左右两边类型不一致，在c++中， const char * 无法自动转换成char*, 除非强转 </span></span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> *ptr = <span class="built_in">malloc</span>(<span class="number">256</span>); </span><br><span class="line"> <span class="comment">//左右两边类型不一致，在c++中， void * 无法自动转换成int*, 除非强转 </span></span><br></pre></td></tr></tbody></table></figure><h3 id="4、函数重载"><a href="#4、函数重载" class="headerlink" title="4、函数重载"></a>4、函数重载</h3><p> 定义：C++允许同一区域，函数名相同，参数列表不同（参数类型，参数个数） （解决冲突问题）<br>示例</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> (a+b);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> (a+b+c);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">add</span><span class="params">(<span class="type">float</span> a,<span class="type">float</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> (a+b);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//注意：调用时，传入的实参类型与形参不一致，可能会发生类型转换（不安全）</span></span><br><span class="line"><span class="comment">//注意：不能通过返回值进行区分</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5、函数默认参数"><a href="#5、函数默认参数" class="headerlink" title="5、函数默认参数"></a>5、函数默认参数</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">C++允许，给参数设置默认值</span><br><span class="line"><span class="comment">//注意：在函数的声明中给参数设置默认值</span></span><br><span class="line"><span class="comment">//注意:传参规则， 实参给形参赋值，从左到右 一次赋值</span></span><br><span class="line"><span class="comment">//注意：如果是部分参数设置默认值，只能从右到左 进行设置</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6、作用域"><a href="#6、作用域" class="headerlink" title="6、作用域"></a>6、作用域</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//c++为了解决大规模问题，引入了名字空间与类域</span></span><br><span class="line">全局域</span><br><span class="line">    ：在函数外部</span><br><span class="line">名字空间域</span><br><span class="line">    ：在名字空间下</span><br><span class="line">类域</span><br><span class="line">    </span><br><span class="line">局部域</span><br><span class="line">    ：在函数内部，或者<span class="keyword">switch</span>、<span class="keyword">for</span>、<span class="keyword">while</span>语句中</span><br></pre></td></tr></tbody></table></figure><h3 id="7、引用"><a href="#7、引用" class="headerlink" title="7、引用"></a>7、引用</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//相当于给变量设置别名</span></span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="type">int</span> &amp;r = i;   <span class="comment">//给变量i设置别名r,对r的任何操作等同于i</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//在c++中传参</span></span><br><span class="line"><span class="comment">//相当于有三种方式 1.赋值传递  2.传地址  3.传引用</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8、内联函数-inline函数"><a href="#8、内联函数-inline函数" class="headerlink" title="8、内联函数 inline函数"></a>8、内联函数 inline函数</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">C++提供一种提高效率的方法，即在编译时将所调用函数的代码直接嵌入到主调函数中。</span><br><span class="line">   使用内联函数可以节省运行时间，但却增加了目标程序的长度。因此一般只将规模很小(一般为<span class="number">5</span>个语句以下)而使用频繁的函数(如定时采集数据的函数)声明为内置函数。</span><br><span class="line">用法： 在函数声明时，添加<span class="keyword">inline</span>关键字修饰</span><br></pre></td></tr></tbody></table></figure><h3 id="9、特殊的关键字"><a href="#9、特殊的关键字" class="headerlink" title="9、特殊的关键字"></a>9、特殊的关键字</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="type">static</span>    <span class="comment">//效率</span></span><br><span class="line"><span class="type">static</span> + 成员变量 = 静态成员变量 （可以不用通过对象来访问，类::变量名，所以对象共同拥有，只有<span class="number">1</span>份 ）</span><br><span class="line">    <span class="type">static</span> + 成员函数 = 静态方法，静态函数，（可以不用通过对象来调用,类::函数() ）</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="type">const</span>   <span class="comment">//安全</span></span><br><span class="line">    <span class="type">const</span> + 成员变量 ：不能被修改</span><br><span class="line">    <span class="comment">//注意：常成员变量必须初始化</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> + 成员函数=常成员函数, 常成员函数不能修改变量</span><br><span class="line">   </span><br><span class="line">    <span class="type">const</span> + 对象：  对象不能被修改，只能访问，不能修改</span><br></pre></td></tr></tbody></table></figure><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>面向对象编程特征（特点）</p><blockquote><p>封装性（Encapsulation）：将数据和对数据的操作封装在一起，对外部隐藏其具体实现，只提供公共接口进行访问和调用。</p></blockquote><blockquote><p>继承性（Inheritance）：通过建立类与类之间的继承关系，可以从一个已有的类派生出新的类，并继承其属性和方法，从而实现代码的复用。</p></blockquote><blockquote><p>多态性（Polymorphism）：同一个方法可以在不同的对象上表现出不同的行为。具体实现方式有重载和重写两种方式。</p></blockquote><blockquote><p>抽象性（Abstraction）：通过抽象类和接口等手段，将具有共性的属性和方法提取出来，形成抽象的模板，便于统一管理和规范实现。</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p>类是一种抽象的数据类型，是对具有相同属性和方法的对象的抽象。可以将类看作是一种蓝图或模板，它描述了一类对象所共有的属性和方法，包括数据成员和成员函数。</p></blockquote><blockquote><p>对象是类的一个实例，是在程序运行时根据类定义创建的。可以将对象看作是一个具体的实体，它拥有类所描述的属性和方法。</p></blockquote><blockquote><p>通过定义类和创建对象，可以实现面向对象编程的思想，将现实世界中的事物抽象为类和对象，使程序更加模块化、可维护和可扩展。</p></blockquote><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><blockquote><p>public:公有权限， 类的内部，与外部都可以访问<br>private:私有权限，仅类的内部可以访问</p></blockquote><h3 id="构造与析构"><a href="#构造与析构" class="headerlink" title="构造与析构"></a>构造与析构</h3><blockquote><p>构造函数：定义对象时候，自动执行的函数。//用于做初始化<br>特点： 函数名与类名相同，没有返回值，可以重载(可以有多个版本)</p></blockquote><h3 id="拷贝构造"><a href="#拷贝构造" class="headerlink" title="拷贝构造"></a>拷贝构造</h3><p>一种特殊的构造函数（以一个对象为蓝本去构造另一个对象：拷贝构造从来都不是显示调用，而是编译器隐式调用）</p><ol><li><p>区分赋值和拷贝</p><ol><li><p>赋值：</p><ol><li><p>```c++<br>Demo a(123);<br>Demo b(321); </p><p> b = a; //赋值</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. ```c++</span><br><span class="line">   Demo a(123);  // </span><br><span class="line">   Demo b(a);  // Demo b = a； 拷贝 </span><br></pre></td></tr></tbody></table></figure><p>Demo a;</p></li></ol></li><li><p>Demo b(a); //</p></li></ol></li><li><p>调用方式有三：</p><ol><li><pre class=" language-c++"><code class="language-c++">Demo a(123);  // Demo b(a);  // Demo b = a； <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 动态创建对象</span><br><span class="line"></span><br><span class="line">   1. ```c++</span><br><span class="line">      Demo a;</span><br><span class="line">      Demo *p  = new Demo(a); //</span><br></pre></td></tr></tbody></table></figure></code></pre></li><li><p>函数参数传递：对象传递</p><ol><li><p>```c++<br>void   test（Demo obj）<br>{</p><p>}<br>test(obj); </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 拷贝：</span><br><span class="line"></span><br><span class="line">   1. 深拷贝和浅拷贝是指在进行对象拷贝时，对于对象成员的处理方式。</span><br><span class="line">   </span><br><span class="line">      浅拷贝指的是将一个对象中的所有成员变量的值都复制给另一个对象的成员变量，如果该对象中有指针类型的成员变量，那么这个指针指向的内存空间并没有被复制，而是被多个对象共享，这样当一个对象改变这个指针指向的内存空间的值时，其他对象也会受到影响。</span><br><span class="line">   </span><br><span class="line">   2. 深拷贝则是对于指针类型的成员变量，会在堆上分配一块新的内存空间，并将原来指针指向的内容复制到新的内存空间中，这样每个对象的指针指向的内存空间都是独立的，相互之间互不影响。</span><br><span class="line">   </span><br><span class="line">   &gt; 因此，深拷贝在对象成员中有指针类型的情况下更加安全，避免了多个对象对同一块内存空间进行修改的问题。而浅拷贝则可能会导致意外的错误。</span><br><span class="line"></span><br><span class="line">&gt; 析构函数：对象销毁时，自动执行的函数。  //用于做清理工作</span><br><span class="line">&gt; 特点： 函数名与类名相同且前面加上~，没有返回值，没有参数，可以重载</span><br><span class="line"></span><br><span class="line">### this指针</span><br><span class="line"></span><br><span class="line">&gt; 指向当前对象的指针，在类的类部使用。</span><br><span class="line">&gt; 用法1： 当形参 与 类中私有数据重名，可以通过this指针进行区分</span><br><span class="line">&gt;</span><br><span class="line">&gt; 谁调用函数  this就指向谁</span><br><span class="line"></span><br><span class="line">创建和销毁</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line">//C++中用于代替 malloc() 与 free();</span><br><span class="line"></span><br><span class="line">int *p1 = new int;  //开辟一个int</span><br><span class="line">delete p1;          //释放       </span><br><span class="line"></span><br><span class="line">char *ptr = new char[64];   //开辟64个char </span><br><span class="line">delete [] ptr;              //释放空间 </span><br><span class="line"></span><br><span class="line">int *ps = new int[10]; </span><br><span class="line">delete [] ps;</span><br><span class="line"></span><br><span class="line">node *ptr_node = new node;   //开辟一个node</span><br><span class="line">delete ptr_node;             //释放一个node</span><br><span class="line"></span><br><span class="line">//注意：对于基本类型释放时直接delete ptr,对于数组空间 delete [] ptr </span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol></li></ol><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>函数可以重载，运算符也可以重载。<br>C++中预定义的运算符的操作对象只能是基本数据类型。但实际上，对于许多用户自定义类型（例如类），也需要类似的运算操作。这时就必须在C++中重新定义这些运算符，赋予已有运算符新的功能，使它能够用于特定类型执行特定的操作。<br>譬如实现一个字符串类，利用运算符的形式操作显然比较直观、方便、易于理解。</p><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/image-20230421134114342.png" alt="image-20230421134114342"></p><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/image-20230421161403708.png" alt="image-20230421161403708"></p><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/image-20230421162552623.png" alt="image-20230421162552623"></p><h3 id="特殊的成员函数"><a href="#特殊的成员函数" class="headerlink" title="特殊的成员函数"></a>特殊的成员函数</h3><blockquote><p>特殊之处： 如果没有，编译器会自动生成默认的版本</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span>构造函数</span><br><span class="line">    <span class="comment">//默认的构造函数：不做任何事情</span></span><br><span class="line"><span class="number">2.</span>析构函数</span><br><span class="line">    <span class="comment">//默认的析构函数：不做任何事情</span></span><br><span class="line"><span class="number">3.</span>赋值函数</span><br><span class="line">    <span class="comment">//默认的赋值函数： 浅拷贝</span></span><br><span class="line"><span class="number">4.</span>拷贝构造</span><br><span class="line">    <span class="comment">//默认的拷贝构造： 浅拷贝</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><blockquote><p>当一个函数被声明为另一个类的友元函数时，它就可以访问该类的所有成员，包括私有成员</p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> n) : <span class="built_in">x</span>(n) {}</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">printX</span><span class="params">(MyClass obj)</span></span>;  <span class="comment">// 友元函数声明</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printX</span><span class="params">(MyClass obj)</span> </span>{</span><br><span class="line">    std::cout &lt;&lt; obj.x &lt;&lt; std::endl;  <span class="comment">// 可以访问私有成员 x</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="function">MyClass <span class="title">obj</span><span class="params">(<span class="number">42</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printX</span>(obj);  <span class="comment">// 调用友元函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="友元成员函数"><a href="#友元成员函数" class="headerlink" title="友元成员函数"></a>友元成员函数</h3><p>友元成员函数是指某个函数是一个类的友元函数，同时又是另一个类的成员函数。</p><p>具体来说，假设有类A和类B，其中类B是类A的友元类，同时在类B中定义了一个成员函数f()。如果我们将f() 声明为类A的友元函数，则f() 既是类B的成员函数，又是类A的友元函数，可以在类A中直接访问类B的私有成员。</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() : <span class="built_in">num</span>(<span class="number">0</span>) {}</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">B::f</span><span class="params">(A&amp;)</span></span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() : <span class="built_in">val</span>(<span class="number">0</span>) {}</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(A&amp; a)</span> </span>{</span><br><span class="line">        a.num = <span class="keyword">this</span>-&gt;val; <span class="comment">// 类A可以访问类B的私有成员val</span></span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    b.<span class="built_in">f</span>(a); <span class="comment">// 通过类B的成员函数间接访问类A的私有成员num</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>在这个例子中，类A中的成员函数 <code>f(A&amp;)</code> 被声明为类B的友元函数，可以访问类B的私有成员 <code>val</code>。而在类B的成员函数 <code>f(A&amp;)</code> 中，又可以通过参数 <code>a</code> 访问类A的私有成员 <code>num</code>，从而实现了两个类之间的访问。</p></blockquote><h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><p>友元类是指在一个类中，可以将另一个类声明为友元类，这样在该友元类中的所有成员函数都可以访问该类的私有成员。友元类常常用于设计一些特定的类之间需要访问彼此私有成员的情况，如类之间的协作、库函数与应用程序之间的协作等。</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() { x = <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">B</span>; <span class="comment">// B是A的友元类</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setX</span><span class="params">(A&amp; a, <span class="type">int</span> value)</span> </span>{</span><br><span class="line">        a.x = value; <span class="comment">// 可以访问A的私有成员x</span></span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    b.<span class="built_in">setX</span>(a, <span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; a.x &lt;&lt; endl; <span class="comment">// 输出：10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在上述示例中，类<code>B</code>被声明为类<code>A</code>的友元类，因此类<code>B</code>中的所有成员函数都可以访问类<code>A</code>的私有成员<code>x</code>。在<code>main</code>函数中，我们创建了一个<code>A</code>类型的对象<code>a</code>和一个<code>B</code>类型的对象<code>b</code>，然后通过调用<code>b.setX(a, 10)</code>函数将<code>a</code>对象的私有成员<code>x</code>设置为10，最后输出<code>a.x</code>的值，结果为10。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p>模板函数（Template function）是一种通用的函数，它可以使用在不同类型的数据上，而不需要对同一函数进行重载。模板函数可以通过定义一个函数模板来实现，函数模板就是定义一个函数时使用一般类型或抽象类型代表参数，实际调用时根据传递的参数类型推断出具体的函数类型，并对不同类型的参数进行相应的处理。例如，下面是一个简单的函数模板示例：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T x, T y)</span> </span>{</span><br><span class="line">  <span class="keyword">return</span> (x &gt; y) ? x : y;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这个函数模板定义了一个 <code>max</code> 函数，其参数类型为 <code>T</code>，返回类型也为 <code>T</code>，可以用于比较任意类型的数据。在调用时，编译器会根据传递的参数类型自动推断出具体的函数类型并进行实例化，例如：</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max(a, b) &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">// 输出 2</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> x = <span class="number">1.5</span>, y = <span class="number">2.5</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max(x, y) &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">// 输出 2.5</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，我们分别使用了 <code>int</code> 和 <code>double</code> 类型的参数调用了 <code>max</code> 函数，编译器会根据传递的参数类型自动实例化对应的函数并进行编译和链接，最终得到可执行代码。</p><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>类模板是一种通用的类定义，可以通过模板参数来指定某些类型或值，从而实现可以适用于不同类型或值的具体类。类模板以关键字<code>template</code>开头，其模板参数可以是类型参数，也可以是非类型参数。</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, ...&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span> {</span><br><span class="line">    <span class="comment">// 类的成员和成员函数的定义</span></span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>其中，<code>typename T1, typename T2, ...</code>表示类模板的类型参数列表。在类定义中，可以使用这些类型参数来定义类的成员和成员函数。</p><p>类模板的实例化使用关键字<code>template</code>和尖括号，通过将具体类型或值传递给模板参数来创建一个具体的类，例如：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化一个类型为 int 的 Vector 类</span></span><br><span class="line"><span class="keyword">template</span> <span class="keyword">class</span> <span class="title class_">Vector</span>&lt;<span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化一个类型为 double，大小为 10 的数组类</span></span><br><span class="line"><span class="keyword">template</span> <span class="keyword">class</span> <span class="title class_">Array</span>&lt;<span class="type">double</span>, <span class="number">10</span>&gt;;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在使用类模板时，还可以根据具体情况对模板参数进行推断，例如：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 根据参数类型推断出 Vector 的类型参数 T</span></span><br><span class="line"><span class="function">Vector <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">// 根据参数类型推断出 Array 的类型参数 T 和值参数 size</span></span><br><span class="line">Array a = {<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>};</span><br></pre></td></tr></tbody></table></figure><p>类模板的使用和普通类的使用方法相同，只不过需要在使用前声明或者实例化。</p><h3 id="友元函数模板"><a href="#友元函数模板" class="headerlink" title="友元函数模板"></a>友元函数模板</h3><p>友元模板函数指的是在模板类中声明一个模板函数为友元，可以访问模板类中的私有成员。其语法格式为：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">foo</span><span class="params">(A&lt;U&gt;&amp; obj)</span></span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(A&lt;U&gt;&amp; obj)</span> </span>{</span><br><span class="line">    <span class="comment">// 在这里可以访问 A&lt;T&gt; 中的私有成员</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在上述代码中，类 <code>A</code> 是一个类模板，它包含一个私有成员 <code>data</code>。<code>foo</code> 是一个模板函数，它被声明为类 <code>A</code> 的友元函数，可以访问 <code>A</code> 中的私有成员。在类 <code>A</code> 外部定义 <code>foo</code> 函数时，需要在函数名前面加上模板声明，以便编译器知道 <code>foo</code> 是一个模板函数。</p><p>使用友元模板函数的好处是，它可以在访问类中私有成员的同时，可以支持不同类型的实例化。</p><h3 id="非类型模板形参"><a href="#非类型模板形参" class="headerlink" title="非类型模板形参"></a>非类型模板形参</h3><p>C++ 中的非类型模板形参是指在模板参数列表中定义的不是类型的参数，例如整数常量、指针或引用等。它们可以用于模板函数或模板类中，用于指定函数或类的行为。</p><p>非类型模板形参的语法如下：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">int</span> N&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_array</span><span class="params">(T(&amp;arr)[N])</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，<code>N</code> 是一个非类型模板形参，它被用于表示数组的大小。在调用这个函数时，必须指定数组的大小，否则编译器无法确定数组的大小。</p><p>例如：</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>};</span><br><span class="line">print_array(arr); <span class="comment">// 正确，输出：1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr2[] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>};</span><br><span class="line">print_array(arr2); <span class="comment">// 编译错误，编译器无法确定数组的大小</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>除了整数常量之外，非类型模板形参还可以是指针、引用、枚举等其他类型的常量表达式。</p><h2 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h2><h3 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h3><ol><li><p>类的继承是用已有的类来建立专用类的编程技术。</p></li><li><p><strong>派生类继承了基类的所有数据成员和成员函数</strong>，并可以对成员作必要的增加或调整不包括构造和析构函数。一个基类可以派生出多个派生类，每一个派生类又可以作为基类再派生出新的派生类，因此基类和派生类是相对而言的。</p><p>关于基类和派生类的关系，可以表述为: </p><blockquote><p>派生类是基类的具体化，而基类则是派生类的抽象。</p></blockquote></li></ol><h3 id="为什么要学继承"><a href="#为什么要学继承" class="headerlink" title="为什么要学继承"></a>为什么要学继承</h3><ol><li>代码重用（有的技术文献翻译成代码复用）。代码重用的目的就是提高开发效率、减少错误、让大规模代码开发的关注点转到软件结构上。</li></ol><h3 id="公有继承"><a href="#公有继承" class="headerlink" title="公有继承"></a>公有继承</h3><table><thead><tr><th align="center">访问控制</th><th align="center">基类成员</th><th align="center">派生类中的访问方式</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">public</td><td align="center">public</td></tr><tr><td align="center">protected</td><td align="center">protected</td><td align="center">protected</td></tr><tr><td align="center">private</td><td align="center">private</td><td align="center">不可访问（隐藏）</td></tr></tbody></table><h3 id="保护继承"><a href="#保护继承" class="headerlink" title="保护继承"></a>保护继承</h3><table><thead><tr><th>权限</th><th>基类中的访问控制</th><th>派生类中的访问控制</th></tr></thead><tbody><tr><td>公有</td><td>公有</td><td>保护</td></tr><tr><td>保护</td><td>保护</td><td>保护</td></tr><tr><td>私有</td><td>无法继承</td><td>无法访问</td></tr></tbody></table><h3 id="私有继承"><a href="#私有继承" class="headerlink" title="私有继承"></a>私有继承</h3><table><thead><tr><th></th><th align="center">基类成员访问</th><th align="center">基类对象访问</th><th align="center">派生类对象访问</th></tr></thead><tbody><tr><td>private继承</td><td align="center">私有</td><td align="center">不可访问</td><td align="center">不可访问</td></tr><tr><td>protected继承</td><td align="center">保护</td><td align="center">不可访问</td><td align="center">保护</td></tr><tr><td>public继承</td><td align="center">公有</td><td align="center">公有</td><td align="center">公有</td></tr></tbody></table><blockquote><p>注意，私有继承下基类的公有和保护成员都变成了私有成员，无法在派生类外部访问。派生类对象可以访问基类的公有和保护成员，但不能通过基类对象来访问。</p></blockquote><h3 id="派生类的构造和析构"><a href="#派生类的构造和析构" class="headerlink" title="派生类的构造和析构"></a>派生类的构造和析构</h3><p>派生类的构造函数在初始化派生类成员之前，会先调用基类的构造函数来初始化基类的成员。如果基类有多个，则按照它们在类定义中的顺序调用。具体来说，当派生类对象被创建时，先调用基类的构造函数，再调用派生类的构造函数。</p><p>派生类的析构函数在销毁派生类成员之前，会先调用派生类的析构函数来销毁派生类成员。如果派生类的析构函数中没有显式地调用基类的析构函数，编译器会隐式地调用基类的析构函数来销毁基类的成员。具体来说，当派生类对象被销毁时，先调用派生类的析构函数，再调用基类的析构函数。</p><blockquote><p>在虚继承中，先调用最基类的构造函数，然后按照继承关系依次调用虚基类的构造函数，最后调用派生类的构造函数。这是为了避免虚基类被多次初始化。</p></blockquote><blockquote><p>如果基类当中没有无参构造?</p><p>如果基类没有无参构造函数，则派生类在构造时必须显式地调用基类的有参构造函数来初始化基类的成员。如果派生类中没有显式地调用基类的有参构造函数，则编译器会自动调用基类的无参构造函数，如果没有无参构造函数，则会出现编译错误。</p></blockquote><h2 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h2><p>在面向对象编程中，有两种常见的类之间的关系：继承关系和组合关系。</p><p>组合关系指的是一个类对象包含另一个类对象作为其成员变量，称为 has-a 关系，表示一个类具有某些属性或功能，需要另一个类来完成。</p><p>例如，一个汽车类中包含引擎类、轮胎类等等，这些成员变量共同构成了汽车类的组合关系。</p><p>is-a 关系则指的是一个类是另一个类的子类，称为继承关系，表示一个类是另一个类的一种特殊情况。</p><p>例如，一只猫是动物的一种，可以将猫类定义为继承自动物类的子类，这就是 is-a 关系。</p><p>区别在于，组合关系表示类与类之间的一种“合成”关系，而继承关系表示类与类之间的一种“继承”关系。在组合关系中，组成部分可以被替换或者重新组合；而在继承关系中，子类不能完全替代父类，而是基于父类进行扩展和改变。</p><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><h3 id="多重继承-1"><a href="#多重继承-1" class="headerlink" title="多重继承"></a>多重继承</h3><p>重继承是指一个类从多个基类派生而来。与单一继承不同，多重继承具有以下特点：</p><ol><li>一个派生类同时继承了多个基类，从而拥有了多个基类的属性和方法；</li><li>在多重继承中，如果多个基类中有同名的成员函数或成员变量，需要通过作用域限定符明确指出是哪个基类的成员；</li><li>多重继承可能导致命名冲突和二义性问题，需要通过虚继承或显示地重载基类的成员函数来解决。</li></ol><p>下面是一个简单的多重继承的示例：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>{ cout &lt;&lt; <span class="string">"A::foo()"</span> &lt;&lt; endl; }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>{ cout &lt;&lt; <span class="string">"B::bar()"</span> &lt;&lt; endl; }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">public</span> A, <span class="keyword">public</span> B {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">baz</span><span class="params">()</span> </span>{ cout &lt;&lt; <span class="string">"C::baz()"</span> &lt;&lt; endl; }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    C obj;</span><br><span class="line">    obj.<span class="built_in">foo</span>(); <span class="comment">// 调用 A 的成员函数 foo</span></span><br><span class="line">    obj.<span class="built_in">bar</span>(); <span class="comment">// 调用 B 的成员函数 bar</span></span><br><span class="line">    obj.<span class="built_in">baz</span>(); <span class="comment">// 调用 C 自己的成员函数 baz</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例中，类 <code>C</code> 继承了类 <code>A</code> 和 <code>B</code>，从而具有了它们的所有公有成员函数。在 <code>main()</code> 函数中，我们可以通过对象 <code>obj</code> 分别调用它们的成员函数。需要注意的是，如果类 <code>A</code> 和 <code>B</code> 中有同名的成员函数，需要通过作用域限定符来明确指出要调用哪个成员函数。</p><h3 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h3><p>虚继承（virtual inheritance）是 C++ 中一种特殊的继承方式，它用于解决多重继承中出现的“菱形继承”（diamond inheritance）问题，也称为“菱形继承二义性”（diamond inheritance ambiguity）。</p><p>在多重继承的情况下，如果从两个不同的基类继承了同一个公共基类，那么派生类中就会存在两份相同的公共基类子对象，从而产生了二义性。虚继承就是为了避免这种二义性而提供的一种解决方案。</p><p>虚继承的语法格式是，在继承基类时在基类名前加上 <code>virtual</code> 关键字，例如：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> { ... };</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A { ... };</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A { ... };</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="keyword">public</span> B, <span class="keyword">public</span> C { ... };</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，类 <code>B</code> 和类 <code>C</code> 均通过虚继承继承了类 <code>A</code>，这样在类 <code>D</code> 中就只会包含一个公共基类子对象 <code>A</code>，而不是两个。</p><p>需要注意的是，虚继承会增加程序的运行时开销，因为虚继承需要额外的信息来确定虚基类在派生类对象中的位置。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是一种让不同的对象对同一个消息做出不同的响应的特性。具体来说，它是指使用基类的<code>指针</code>或<code>引用</code>调用一个虚函数时，根据指向的子类对象的不同而产生不同的行为。多态可以提高代码的复用性和灵活性，是面向对象编程的重要特性之一。</p><p>举个例子，假设有一个基类<code>Shape</code>和两个派生类<code>Circle</code>和<code>Rectangle</code>，它们都有一个计算面积的虚函数<code>getArea()</code>。我们可以通过基类指针来调用不同的子类对象的<code>getArea()</code>函数，从而得到不同的结果。</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 纯虚函数</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> radius;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> r) : <span class="built_in">radius</span>(r) {}</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="keyword">public</span> Shape {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> width, height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rectangle</span>(<span class="type">double</span> w, <span class="type">double</span> h) : <span class="built_in">width</span>(w), <span class="built_in">height</span>(h) {}</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    Shape* shapes[] = { <span class="keyword">new</span> <span class="built_in">Circle</span>(<span class="number">1.0</span>), <span class="keyword">new</span> <span class="built_in">Rectangle</span>(<span class="number">2.0</span>, <span class="number">3.0</span>) };</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> s : shapes) {</span><br><span class="line">        std::cout &lt;&lt; s-&gt;<span class="built_in">getArea</span>() &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">delete</span> s;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出结果：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></tbody></table></figure><h2 id="覆盖-重写-隐藏"><a href="#覆盖-重写-隐藏" class="headerlink" title="覆盖 重写 隐藏"></a>覆盖 重写 隐藏</h2><p>覆盖、重写和隐藏都是实现多态性的机制，它们都是通过在子类中重新定义一个与父类同名的方法来实现的。但是它们有以下不同点：</p><ol><li>覆盖（Override）：在子类中重新定义了一个与父类同名、参数列表相同、返回类型相同的虚函数，可以使用 <code>override</code> 关键字来显式声明，表示对父类函数的覆盖。</li><li>重写（Redeclaration）：在子类中重新定义了一个与父类同名，但参数列表或返回类型不同的函数，无需使用 <code>override</code> 关键字来显式声明。</li><li>隐藏（Hide）：在子类中重新定义了一个与父类同名的非虚函数，但参数列表或返回类型不同，此时父类中的同名函数会被隐藏，无法被子类访问到。</li></ol><p>覆盖和重写都是针对虚函数的，而隐藏则是针对非虚函数的。此外，覆盖和重写都是实现多态的方式，而隐藏不是，因为在隐藏的情况下，子类对象调用同名函数时不会发生动态绑定，会直接调用子类中的同名函数。</p><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>虚函数是在基类中声明为虚拟的成员函数，派生类可以重写（override）基类中的虚函数，以实现多态性。虚函数的特点是可以动态绑定，即在运行时才确定调用的是哪个类的函数。</p><p>以下是一个简单的虚函数的例子：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>{</span><br><span class="line">        cout &lt;&lt; <span class="string">"Shape::draw() called"</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span> </span>{</span><br><span class="line">        cout &lt;&lt; <span class="string">"Circle::draw() called"</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    Shape* shapePtr = <span class="keyword">new</span> Circle;</span><br><span class="line">    shapePtr-&gt;<span class="built_in">draw</span>();  <span class="comment">// 输出 Circle::draw() called</span></span><br><span class="line">    <span class="keyword">delete</span> shapePtr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的例子中，Shape 类中的 draw() 函数被声明为虚函数，在 Circle 类中重写了这个函数。在 main 函数中，使用基类指针 shapePtr 指向 Circle 类对象，然后调用 shapePtr-&gt;draw() 函数，实际调用的是 Circle 类中的 draw() 函数。这就是多态性的体现。</p><h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><p>纯虚函数是一种特殊的虚函数，它在基类中没有实现，而是由派生类实现。纯虚函数通过将函数体赋值为0来声明。如果一个类至少有一个纯虚函数，那么它就是<code>抽象类</code>，无法直接实例化。</p><p>纯虚函数的语法如下：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br></pre></td></tr></tbody></table></figure><p>其中 “= 0” 表示这个函数是纯虚函数。</p><p>派生类需要实现纯虚函数才能被实例化。如果派生类没有实现纯虚函数，那么它也将是一个抽象类。</p><p>纯虚函数在很多场景中都非常有用，比如让基类定义一组接口，而具体实现交给派生类。这样可以让代码更加灵活和可扩展。例如，我们可以定义一个基类 Animal，其中包含一个纯虚函数 voice()，表示动物叫声，然后定义派生类 Dog 和 Cat，分别实现它们的叫声：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">voice</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">voice</span><span class="params">()</span> </span>{</span><br><span class="line">        cout &lt;&lt; <span class="string">"Wang Wang!"</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">voice</span><span class="params">()</span> </span>{</span><br><span class="line">        cout &lt;&lt; <span class="string">"Miao Miao!"</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    Animal* p = <span class="keyword">new</span> <span class="built_in">Dog</span>();</span><br><span class="line">    p-&gt;<span class="built_in">voice</span>();</span><br><span class="line"></span><br><span class="line">    p = <span class="keyword">new</span> <span class="built_in">Cat</span>();</span><br><span class="line">    p-&gt;<span class="built_in">voice</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出结果：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">Wang Wang!</span><br><span class="line">Miao Miao!</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，我们定义了一个基类 Animal，并声明了一个纯虚函数 voice()，表示动物叫声。然后定义了两个派生类 Dog 和 Cat，分别实现它们的叫声。在 main 函数中，我们通过基类指针来实例化不同的派生类，并调用它们的叫声函数。这样就实现了多态的效果。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类是指包含纯虚函数的类，不能直接创建抽象类的对象，只能通过其子类创建对象。</p><p>抽象类中至少包含一个纯虚函数，而纯虚函数在类中没有实现，只有函数原型，其作用是为子类提供统一的接口，具体的实现交给子类去完成。</p><p>抽象类的主要作用是定义一些基本的行为或规则，以及限制子类的行为，提高程序的可靠性和可维护性。在具体的实现中，抽象类通常作为其他类的基类，通过继承和重写纯虚函数来实现具体的功能。</p><blockquote><p>派生类如果继承了一个抽象类，必须实现所有纯虚函数，否则该派生类也将成为抽象类，</p></blockquote><h2 id="限制构造函数"><a href="#限制构造函数" class="headerlink" title="限制构造函数"></a>限制构造函数</h2><p>可以使用访问控制来限制构造函数的调用。一般情况下，将构造函数声明为 <code>protected</code> 或 <code>private</code>，可以使得外部无法直接调用该构造函数。这样，只能在类的内部或友元函数中使用该构造函数来创建类的对象。这种方法可以实现类的单例模式（Singleton Pattern）等特殊的需求。</p><p>下面是一个限制构造函数的例子：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> MyClass&amp; <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="type">static</span> MyClass instance;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>{</span><br><span class="line">        std::cout &lt;&lt; <span class="string">"Doing something"</span> &lt;&lt; std::endl;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() {}  <span class="comment">// 构造函数声明为 private</span></span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">const</span> MyClass&amp;) = <span class="keyword">delete</span>;  <span class="comment">// 禁止拷贝构造函数</span></span><br><span class="line">    MyClass&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MyClass&amp;) = <span class="keyword">delete</span>;  <span class="comment">// 禁止赋值运算符重载</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 下面的代码无法通过编译</span></span><br><span class="line">    <span class="comment">// MyClass obj;</span></span><br><span class="line">    </span><br><span class="line">    MyClass&amp; obj = MyClass::<span class="built_in">getInstance</span>();</span><br><span class="line">    obj.<span class="built_in">doSomething</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的例子中，我们将构造函数声明为 <code>private</code>，并提供了一个静态方法 <code>getInstance()</code> 来获取 <code>MyClass</code> 类的实例。这里使用了静态局部变量的方法来实现类的单例模式。这样，外部无法直接创建 <code>MyClass</code> 类的对象，只能通过 <code>getInstance()</code> 方法获取类的实例。</p><h2 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h2><p>虚函数表（Virtual Function Table，VTable）是C++中实现动态多态的重要机制之一。每个含有虚函数的类对象在内存中都有一个虚函数表，其中存储着类中虚函数的指针，实现了动态绑定（Dynamic Binding）和多态（Polymorphism）的特性。当类对象通过指针或引用访问其虚函数时，程序将在虚函数表中查找虚函数的地址，再通过地址调用虚函数的实现。</p><p>以下是一个简单的例子，演示了虚函数表的基本原理：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*func)</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>{</span><br><span class="line">        cout &lt;&lt; <span class="string">"A::f()"</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>{</span><br><span class="line">        cout &lt;&lt; <span class="string">"B::f()"</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    A* pA = <span class="keyword">new</span> <span class="built_in">B</span>();</span><br><span class="line">    pA-&gt;<span class="built_in">f</span>();</span><br><span class="line"></span><br><span class="line">    func pFunc = (func) (*(<span class="type">int</span>*)*(<span class="type">int</span>*)pA);</span><br><span class="line">    <span class="built_in">pFunc</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上述代码中，我们定义了一个基类A和一个派生类B，并在A类中定义了一个虚函数f()，并在B类中对其进行了覆盖。在主函数中，我们通过new操作符创建了一个B类对象，将其地址赋值给指向A类型的指针pA，并通过pA调用了虚函数f()。由于B类覆盖了A类的f()函数，因此程序输出了”B::f()”。</p><p>接着，我们通过指针pA获取了对象的虚函数表，从而得到了f()函数的地址，并将其转换为函数指针类型，赋值给pFunc。最后，通过调用pFunc指向的函数，再次调用了虚函数f()，并输出了”B::f()”。</p><blockquote><p>注意：在实际使用中，我们应当尽量避免直接操作虚函数表，而是通过类对象和类指针来访问虚函数。</p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pri() cout&lt;&lt;__func__&lt;&lt;<span class="string">" "</span>&lt;&lt;__LINE__&lt;&lt;endl</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*func)</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">int</span> a , <span class="type">int</span> b):<span class="built_in">a</span>(a),<span class="built_in">b</span>(b){}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getA</span><span class="params">()</span></span>{<span class="built_in">pri</span>();};</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getB</span><span class="params">()</span></span>{<span class="built_in">pri</span>();};</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getC</span><span class="params">()</span></span>{<span class="built_in">pri</span>();};</span><br><span class="line">};</span><br><span class="line"><span class="comment">//在64位系统当中</span></span><br><span class="line"><span class="comment">//虚函数表的指针站8个字节</span></span><br><span class="line"><span class="comment">//所以下面需要用long* +1 跳过虚函数表指针</span></span><br><span class="line"><span class="comment">//因为数据是int所以强转为int*取前四位 为第一个成员变量的值</span></span><br><span class="line"><span class="comment">//后四位为第二个成员变量的值</span></span><br><span class="line"><span class="comment">//long*替换为int*就需要+3才能访问第一个成员变量的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="function">Base <span class="title">obj</span><span class="params">(<span class="number">122</span>,<span class="number">22210</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;<span class="keyword">sizeof</span> obj&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">"a:"</span>&lt;&lt; *(<span class="type">int</span>*)((<span class="type">long</span> *)&amp;obj+<span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">"b:"</span>&lt;&lt; *((<span class="type">int</span>*)((<span class="type">long</span> *)&amp;obj+<span class="number">1</span>)+<span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//因为64位系统当中指向虚函数表的指针占8个字节。所以这里需要用long *</span></span><br><span class="line">    func p = (func)* ((<span class="type">long</span> *)(*((<span class="type">long</span> *)&amp;obj)));</span><br><span class="line">    <span class="built_in">p</span>();</span><br><span class="line">    p = (func)* ((<span class="type">long</span> *)(*((<span class="type">long</span> *)&amp;obj))+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">p</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://store.codedrawing.top/typora/image-20230426172437682.png" alt="虚函数表结构"></p><h2 id="标准转换函数"><a href="#标准转换函数" class="headerlink" title="标准转换函数"></a>标准转换函数</h2><p>C++ 标准库中提供了一些类型转换的函数，其中包括：</p><p>static_cast：用于静态类型转换，可以在具有继承关系的类之间进行类型转换，还可以将算术类型转换为另一种算术类型，或将指针转换为另一种指针类型，但不能将指针转换为算术类型，也不能将算术类型转换为指针类型。</p><p>dynamic_cast：用于动态类型转换，主要用于将基类指针或引用转换为派生类指针或引用。如果转换失败，则返回空指针（nullptr）。</p><p>const_cast：用于去除 const 属性，可以将 const 类型转换为非 const 类型，但不允许改变被转换对象的值。</p><p>reinterpret_cast：用于重解释类型，可以将一个指针转换为一个整数类型或将一个整数类型转换为一个指针类型，但是该操作通常是不安全的，应该避免使用。</p><p>使用这些标准转换函数时，需要注意类型转换的合法性，以避免程序出现不可预知的行为。</p><h2 id="自定义转换函数"><a href="#自定义转换函数" class="headerlink" title="自定义转换函数"></a>自定义转换函数</h2><p>自定义转换函数指的是在类中定义的能够将当前类对象转换为其他类型对象的成员函数。一般来说，定义自定义转换函数的格式如下：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">type</span><span class="params">()</span> <span class="type">const</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>其中，type表示需要转换成的目标类型。例如，假设有一个类A，定义了一个自定义转换函数，将A类型对象转换为int类型，那么其函数定义为：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> m_value;</span><br><span class="line">    }</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_value;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>这个自定义转换函数将A类型对象转换为int类型，其返回值类型是int，函数名与类名相同，函数体中返回了m_value成员变量的值。</p><p>可以通过以下方式进行调用：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">A a{<span class="number">10</span>};</span><br><span class="line"><span class="type">int</span> i = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(a);</span><br></pre></td></tr></tbody></table></figure><p>其中，static_cast用于将A类型对象转换为int类型。</p><p>需要注意的是，自定义转换函数应当被谨慎使用，避免导致代码可读性和可维护性下降。在需要进行类型转换的场合，可以考虑使用类型转换运算符（type casting operator）或构造函数来实现，以提高代码的可读性和可维护性。</p><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><h3 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h3><p><code>std::shared_ptr</code>是C++11中引入的一个智能指针类型，用于共享拥有同一个对象的所有权。多个<code>shared_ptr</code>可以共享拥有同一个对象的所有权，直到最后一个<code>shared_ptr</code>销毁时，才会自动销毁该对象。</p><p><code>std::shared_ptr</code>的使用非常简单，例如：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 创建一个int类型的shared_ptr</span></span><br><span class="line">    <span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制构造函数会增加对象引用计数</span></span><br><span class="line">    <span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取对象指针</span></span><br><span class="line">    std::cout &lt;&lt; *p1 &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; *p2 &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重载赋值运算符会减少旧对象的引用计数并增加新对象的引用计数</span></span><br><span class="line">    p1 = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">20</span>);</span><br><span class="line">    std::cout &lt;&lt; *p1 &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; *p2 &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手动销毁最后一个shared_ptr</span></span><br><span class="line">    p1.<span class="built_in">reset</span>();</span><br><span class="line">    std::cout &lt;&lt; *p2 &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的例子中，我们创建了一个int类型的<code>shared_ptr</code>，并复制构造出一个新的<code>shared_ptr</code>。两个指针指向同一个对象，所以输出都是10。我们修改了其中一个指针指向一个新的对象，输出分别是20和10。最后，我们手动销毁了<code>p1</code>，而<code>p2</code>仍然指向该对象，所以输出20。</p><p>需要注意的是，<code>std::shared_ptr</code>的循环引用问题。如果两个<code>shared_ptr</code>互相持有对方的指针，就会导致对象永远无法销毁。为了避免循环引用问题，C++11还引入了<code>std::weak_ptr</code>类型，用于指向<code>std::shared_ptr</code>所拥有的对象，但不增加其引用计数。只有在需要使用该对象时，才通过<code>std::weak_ptr</code>获取<code>std::shared_ptr</code>，从而保证对象不被意外销毁。</p><h3 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h3><p><code>unique_ptr</code> 是 C++11 中引入的一种智能指针，用于管理动态分配的内存，是一种独占式的智能指针，即同一时间只能有一个 <code>unique_ptr</code> 指向同一个对象，不能进行复制构造和赋值操作。</p><p>当 <code>unique_ptr</code> 被销毁时，它会自动删除所管理的对象。因此，<code>unique_ptr</code> 通常用于管理函数返回的指针，以确保在离开作用域时释放所分配的内存。</p><p>使用 <code>unique_ptr</code> 的语法如下：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;MyClass&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> MyClass)</span></span>; <span class="comment">// 创建并初始化 unique_ptr</span></span><br><span class="line">std::unique_ptr&lt;MyClass&gt; ptr = std::<span class="built_in">make_unique</span>&lt;MyClass&gt;(args...); <span class="comment">// 使用 make_unique 创建并初始化 unique_ptr</span></span><br></pre></td></tr></tbody></table></figure><p>其中，<code>new MyClass</code> 用于分配 <code>MyClass</code> 类型的内存，并将其地址传递给 <code>unique_ptr</code> 构造函数，或者使用 <code>make_unique</code> 创建并初始化 <code>unique_ptr</code>。</p><p><code>unique_ptr</code> 支持通过 <code>get()</code> 方法获取所管理对象的指针，并通过 <code>reset()</code> 方法释放当前的内存，并将 <code>unique_ptr</code> 重置为指向新的对象或空指针。</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;MyClass&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> MyClass)</span></span>;</span><br><span class="line">MyClass* rawPtr = ptr.<span class="built_in">get</span>(); <span class="comment">// 获取所管理的原始指针</span></span><br><span class="line">ptr.<span class="built_in">reset</span>(<span class="keyword">new</span> MyClass); <span class="comment">// 释放当前内存，并将 unique_ptr 重置为指向新的对象</span></span><br></pre></td></tr></tbody></table></figure><p>当 <code>unique_ptr</code> 离开其作用域时，它所管理的对象也会被自动删除。可以使用 <code>release()</code> 方法将 <code>unique_ptr</code> 的控制权转移给另一个 <code>unique_ptr</code>，从而避免对象被自动删除。</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;MyClass&gt; <span class="title">ptr1</span><span class="params">(<span class="keyword">new</span> MyClass)</span></span>;</span><br><span class="line"><span class="function">std::unique_ptr&lt;MyClass&gt; <span class="title">ptr2</span><span class="params">(ptr1.release())</span></span>; <span class="comment">// 将 ptr1 的控制权转移到 ptr2 中</span></span><br></pre></td></tr></tbody></table></figure><p>由于 <code>unique_ptr</code> 是独占式的智能指针，因此不能进行复制构造和赋值操作。如果需要共享所有权，则可以使用 <code>shared_ptr</code>。</p><h3 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h3><p><code>weak_ptr</code>是C++11标准中新增的智能指针，它是一种弱引用，不会增加对象的引用计数，也不会拥有对象，它可以指向一个<code>shared_ptr</code>所管理的对象，但不会改变对象的引用计数。</p><p><code>weak_ptr</code>可以用来避免<code>shared_ptr</code>的循环引用问题，当两个<code>shared_ptr</code>对象相互引用，且没有其他外部对象对其进行引用，就会形成循环引用，导致内存泄漏。此时，可以使用<code>weak_ptr</code>来打破循环引用，其中一个<code>shared_ptr</code>使用<code>weak_ptr</code>来引用另一个<code>shared_ptr</code>，这样就可以避免循环引用问题。</p><p>使用<code>weak_ptr</code>时需要注意以下几点：</p><ul><li><code>weak_ptr</code>不能直接使用所指向对象的成员，因为<code>weak_ptr</code>不拥有所指向的对象。</li><li><code>weak_ptr</code>可以通过<code>lock()</code>函数获得一个<code>shared_ptr</code>指针，用于操作所指向对象的成员。</li><li>使用<code>lock()</code>函数时，需要先检查返回的<code>shared_ptr</code>指针是否为空，因为所指向的对象可能已经被销毁。</li></ul><p>下面是一个使用<code>weak_ptr</code>的例子：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    std::shared_ptr&lt;B&gt; b_ptr;</span><br><span class="line">    <span class="built_in">A</span>() { std::cout &lt;&lt; <span class="string">"A Constructor"</span> &lt;&lt; std::endl; }</span><br><span class="line">    ~<span class="built_in">A</span>() { std::cout &lt;&lt; <span class="string">"A Destructor"</span> &lt;&lt; std::endl; }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    std::weak_ptr&lt;A&gt; a_weak_ptr;</span><br><span class="line">    <span class="built_in">B</span>() { std::cout &lt;&lt; <span class="string">"B Constructor"</span> &lt;&lt; std::endl; }</span><br><span class="line">    ~<span class="built_in">B</span>() { std::cout &lt;&lt; <span class="string">"B Destructor"</span> &lt;&lt; std::endl; }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    std::shared_ptr&lt;A&gt; a_ptr = std::<span class="built_in">make_shared</span>&lt;A&gt;();</span><br><span class="line">    std::shared_ptr&lt;B&gt; b_ptr = std::<span class="built_in">make_shared</span>&lt;B&gt;();</span><br><span class="line">    a_ptr-&gt;b_ptr = b_ptr;</span><br><span class="line">    b_ptr-&gt;a_weak_ptr = a_ptr;</span><br><span class="line">    std::shared_ptr&lt;A&gt; a_ptr_2 = b_ptr-&gt;a_weak_ptr.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span> (a_ptr_2) {</span><br><span class="line">        std::cout &lt;&lt; <span class="string">"lock succeeded"</span> &lt;&lt; std::endl;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        std::cout &lt;&lt; <span class="string">"lock failed"</span> &lt;&lt; std::endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出结果为：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">A Constructor</span><br><span class="line">B Constructor</span><br><span class="line">lock succeeded</span><br><span class="line">B Destructor</span><br><span class="line">A Destructor</span><br></pre></td></tr></tbody></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常处理是一种程序设计方法，可以在程序出现错误或异常情况时，让程序能够正常地进行处理，而不会使整个程序崩溃。在C++中，异常处理通过使用<code>try</code>、<code>catch</code>和<code>throw</code>等关键字实现。</p><p>当程序出现错误时，可以使用<code>throw</code>关键字来抛出一个异常，该异常可以是任何类型的数据，通常是一个对象。然后，可以在程序的其他部分使用<code>try</code>和<code>catch</code>关键字来捕获和处理该异常。<code>try</code>块用于尝试执行某些操作，如果抛出异常则转到<code>catch</code>块进行异常处理。</p><p>下面是一个简单的异常处理的例子：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"Division by zero!"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> a / b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    cout &lt;&lt; <span class="string">"Enter two integers: "</span>;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        c = <span class="built_in">divide</span>(a, b);</span><br><span class="line">        cout &lt;&lt; <span class="string">"Result: "</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* msg) {</span><br><span class="line">        cerr &lt;&lt; <span class="string">"Error: "</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，<code>divide</code>函数用于计算两个整数的商，如果除数为零则抛出一个异常，提示“Division by zero!”。在<code>main</code>函数中，我们尝试调用<code>divide</code>函数来计算两个输入整数的商，如果<code>divide</code>函数抛出异常，则在<code>catch</code>块中输出错误信息。</p><h3 id="标准异常"><a href="#标准异常" class="headerlink" title="标准异常"></a>标准异常</h3><p>以下是一个使用标准异常的示例代码，它使用了 <code>std::invalid_argument</code> 异常类：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> numerator, <span class="type">int</span> denominator)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (denominator == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">"Denominator cannot be zero."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(numerator) / denominator;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> numerator, denominator;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Enter the numerator: "</span>;</span><br><span class="line">    std::cin &gt;&gt; numerator;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Enter the denominator: "</span>;</span><br><span class="line">    std::cin &gt;&gt; denominator;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="type">double</span> result = <span class="built_in">divide</span>(numerator, denominator);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">"Result: "</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">    } <span class="built_in">catch</span> (std::invalid_argument&amp; e) {</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">"Exception: "</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>该程序将两个整数作为输入，然后将它们用作除法操作的分子和分母。如果分母为零，则函数 <code>divide()</code> 抛出 <code>std::invalid_argument</code> 异常。在 <code>main()</code> 函数中，我们使用 <code>try</code>-<code>catch</code> 块来处理异常。如果异常被抛出，我们将异常消息输出到标准错误流 (<code>std::cerr</code>)。</p><h3 id="自定义异常（不继承）"><a href="#自定义异常（不继承）" class="headerlink" title="自定义异常（不继承）"></a>自定义异常（不继承）</h3><p>可以通过自定义异常类来实现异常处理，而不使用继承。在 C++ 中，可以定义一个新的异常类，例如：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> {</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string message;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyException</span>(<span class="type">const</span> std::string&amp; msg) : <span class="built_in">message</span>(msg) {}</span><br><span class="line">    <span class="function"><span class="type">const</span> std::string&amp; <span class="title">what</span><span class="params">()</span> <span class="type">const</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，我们定义了一个名为 <code>MyException</code> 的类，它包含一个字符串类型的 <code>message</code> 成员变量和一个构造函数。<code>what()</code> 函数返回异常的描述信息。</p><p>在代码的其他部分，我们可以使用 <code>throw</code> 关键字来抛出这个异常，例如：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">myFunction</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">MyException</span>(<span class="string">"An error occurred in myFunction()."</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上述代码中，当函数 <code>myFunction()</code> 执行时，如果出现了某种错误，将抛出一个 <code>MyException</code> 异常，并带有一条错误消息。</p><p>在使用自定义异常类时，需要像使用标准异常类一样，在代码中捕获并处理异常。例如：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="built_in">myFunction</span>();</span><br><span class="line">} <span class="built_in">catch</span> (<span class="type">const</span> MyException&amp; e) {</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">"Caught exception: "</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上述代码中，我们使用 <code>try-catch</code> 语句来捕获可能抛出的 <code>MyException</code> 异常，并在 <code>catch</code> 语句块中处理它。</p><h3 id="自定义异常（继承）"><a href="#自定义异常（继承）" class="headerlink" title="自定义异常（继承）"></a>自定义异常（继承）</h3><p>下面是一个使用继承实现自定义异常的示例代码：</p><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义异常类 MyException，继承自 std::exception</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> : <span class="keyword">public</span> std::exception {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 重写 what() 函数，返回异常信息</span></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">what</span><span class="params">()</span> <span class="type">const</span> <span class="title">throw</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyException: This is my custom exception."</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 抛出自定义异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">MyException</span>();</span><br><span class="line">    } <span class="built_in">catch</span> (std::exception&amp; e) {</span><br><span class="line">        <span class="comment">// 捕获异常并打印异常信息</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">"Exception caught: "</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我们定义了一个名为 <code>MyException</code> 的自定义异常类，继承自 <code>std::exception</code>。我们重写了 <code>what()</code> 函数，返回一个异常信息字符串。在 <code>main()</code> 函数中，我们抛出了一个 <code>MyException</code> 类型的异常，并在 <code>catch</code> 块中捕获并打印了异常信息。</p><p>值得注意的是，在 <code>MyException</code> 类中，我们并没有定义任何成员变量或成员函数，而是直接继承了 <code>std::exception</code> 类。这是因为我们的自定义异常类并不需要额外的数据成员或操作，只需要继承自 <code>std::exception</code> 并重写 <code>what()</code> 函数即可。</p><p>同时，我们在 <code>what()</code> 函数中使用了 <code>throw()</code> 说明符，表示该函数不会抛出任何异常。这是因为 <code>what()</code> 函数应该在任何情况下都能够正常地返回异常信息，而不会再次抛出异常。</p><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><p>STL 是 C++ 标准库中的一部分，它包含了很多有用的数据结构和算法。STL 的全称是 Standard Template Library，即标准模板库。</p><p>STL 中的数据结构包括 vector、deque、list、map、set、unordered_map、unordered_set 等。这些数据结构都是通过模板类来实现的，因此可以适应不同的数据类型。</p><p>STL 中的算法包括排序、查找、计数、删除、复制、变换等。这些算法都是通过模板函数来实现的，因此可以适应不同的数据类型和操作。</p><p>STL 的使用可以大大提高 C++ 程序的开发效率和代码质量。在使用 STL 时，可以减少手写代码的工作量，并且可以重用已经实现的高效的数据结构和算法。</p><p>在 C++ STL 中，容器、迭代器、算法、空间配置器、配接器、仿函数等组件是相互关联的，它们一起构成了 C++ STL 的基本架构。</p><ol><li><p>容器（Containers）：容器是 STL 中的一种数据结构，它可以存储一组元素，并提供了一组访问和操作这些元素的函数。STL 中的容器包括 vector、deque、list、map、set、unordered_map、unordered_set 等。</p></li><li><p>迭代器（Iterators）：迭代器是一种类似指针的对象，它可以用来遍历容器中的元素。STL 中的迭代器包括输入迭代器、输出迭代器、前向迭代器、双向迭代器和随机访问迭代器等。</p></li><li><p>算法（Algorithms）：算法是一组函数，它们可以用来对容器中的元素进行操作。STL 中的算法包括排序、查找、计数、删除、复制、变换等。</p></li><li><p>空间配置器（Allocators）：空间配置器是 STL 中的一种机制，它可以帮助程序员管理动态内存分配和释放。STL 中的空间配置器包括 allocator 和标准库中的 new 和 delete 操作符。</p></li><li><p>配接器（Adapters）：配接器是一种机制，它可以将一个组件适配到另一个组件上。STL 中的配接器包括容器适配器、迭代器适配器、函数适配器等。</p></li><li><p>仿函数（Functors）：仿函数是一种类似函数的对象，它可以作为算法的参数传递。STL 中的仿函数包括函数对象、一元函数对象、二元函数对象等。</p></li></ol><p>这些组件之间的关系可以用下面的图形来表示：</p><figure class="highlight diff"><table><tbody><tr><td class="code"><pre><span class="line"><span class="addition">+-------------------+          +--------------------+</span></span><br><span class="line">|      Containers   |          |      Algorithms     |</span><br><span class="line"><span class="addition">+-------------------+          +--------------------+</span></span><br><span class="line">       ^   |                         ^    |</span><br><span class="line">       |   v                         |    v</span><br><span class="line"><span class="addition">+-------------------+          +--------------------+</span></span><br><span class="line">|     Iterators     |          |    Functors        |</span><br><span class="line"><span class="addition">+-------------------+          +--------------------+</span></span><br><span class="line">       ^   |                         ^    |</span><br><span class="line">       |   v                         |    v</span><br><span class="line"><span class="addition">+-------------------+          +--------------------+</span></span><br><span class="line">| Space Allocators  |          |      Adapters      |</span><br><span class="line"><span class="addition">+-------------------+          +--------------------+</span></span><br></pre></td></tr></tbody></table></figure><p>容器和迭代器是 C++ STL 的核心组件，算法、空间配置器、配接器和仿函数都是建立在容器和迭代器之上的。其中，算法和仿函数是用来操作容器中的元素的，空间配置器和配接器是用来帮助程序员管理内存和适配组件的。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>在 C++ STL 中，容器是一种用来存储和管理一组元素的数据结构，它可以动态地分配和释放内存，并提供了一组访问和操作这些元素的函数。</p><p>C++ STL 中的容器分为三大类：序列式容器、关联式容器和无序关联式容器。下面分别介绍一下这三类容器。</p><ol><li>序列式容器：序列式容器是一种线性结构，它可以存储一组元素，并按照一定的顺序访问和操作这些元素。STL 中的序列式容器包括 vector、deque、list、forward_list 等。</li></ol><ul><li>vector：vector 是一种动态数组，它可以随着元素的增加自动扩展存储空间。</li><li>deque：deque 是一种双端队列，它可以在队头和队尾高效地插入和删除元素。</li><li>list：list 是一种双向链表，它可以在任意位置高效地插入和删除元素。</li><li>forward_list：forward_list 是一种单向链表，它可以在任意位置高效地插入和删除元素。</li></ul><ol start="2"><li>关联式容器：关联式容器是一种非线性结构，它可以存储一组按照某种规则排序的元素，并提供了一组高效的访问和操作这些元素的函数。STL 中的关联式容器包括 set、map、multiset、multimap 等。</li></ol><ul><li>set：set 是一种按照元素大小自动排序的集合，它可以高效地查找、插入和删除元素。</li><li>map：map 是一种按照键自动排序的关联数组，它可以高效地查找、插入和删除键值对。</li><li>multiset：multiset 和 set 类似，但允许元素重复。</li><li>multimap：multimap 和 map 类似，但允许键重复。</li></ul><ol start="3"><li>无序关联式容器：无序关联式容器是一种无序存储元素的容器，它可以根据元素的哈希值快速查找和操作元素。STL 中的无序关联式容器包括 unordered_set、unordered_map、unordered_multiset、unordered_multimap 等。</li></ol><ul><li>unordered_set：unordered_set 是一种无序集合，它可以高效地查找、插入和删除元素。</li><li>unordered_map：unordered_map 是一种无序关联数组，它可以高效地查找、插入和删除键值对。</li><li>unordered_multiset：unordered_multiset 和 unordered_set 类似，但允许元素重复。</li><li>unordered_multimap：unordered_multimap 和 unordered_map 类似，但允许键重复。</li></ul><p>在选择使用哪种容器时，需要根据具体的需求和性能要求进行选择。对于需要随机访问元素的情况，可以选择 vector 和 deque；对需要在任意位置插入和删除元素的情况，可以选择 list 和 forward_list；对于需要按照某种规则排序元素的情况，可以选择关联式容器；对于需要快速查找和操作元素的情况，可以选择无序关联式容器。</p><p>除了以上几种常见的容器外，STL 还提供了一些其他的容器，如 stack、queue、priority_queue 等。这些容器通常是基于序列式容器实现的，提供了一些特定的访问和操作函数，可以用来解决一些特定的问题。</p><p>容器中存储的元素可以是基本类型，也可以是自定义类型，只需要定义相应的比较函数或哈希函数即可。在使用容器时，需要注意容器的复杂度和迭代器的失效问题，以避免出现不必要的错误。</p><p>总的来说，C++ STL 中的容器提供了一种高效、灵活和易用的数据结构，可以大大简化程序的开发和维护。对于不同的应用场景，可以选择不同的容器来满足具体的需求。</p><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>在 C++ STL 中，vector 是一种顺序容器，可以用来存储线性数据结构。vector 的内部实现使用数组来存储元素，因此和数组一样，vector 中的元素也是连续存储的，可以通过索引直接访问。</p><p>vector 的最大特点是支持动态扩容，可以根据需要自动调整容量。当需要添加元素时，如果 vector 的容量不足，就会自动分配更大的内存空间，并将原来的元素移动到新的内存位置。这种动态扩容的机制使得 vector 的使用非常灵活，并且可以在大多数情况下保证较高的效率。</p><p>下面是一些常见的 vector 操作：</p><p>创建 vector 对象：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec; <span class="comment">// 创建空的 vector</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 创建包含 10 个元素的 vector，初始值为 0</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">10</span>, <span class="number">1</span>)</span></span>; <span class="comment">// 创建包含 10 个元素的 vector，初始值为 1</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>}; <span class="comment">// 创建包含 4 个元素的 vector，初始值为 {1, 2, 3, 4}</span></span><br></pre></td></tr></tbody></table></figure><p>向 vector 中添加元素：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">1</span>); <span class="comment">// 在末尾添加一个元素</span></span><br><span class="line">vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>(), <span class="number">0</span>); <span class="comment">// 在开头插入一个元素</span></span><br><span class="line">vec.<span class="built_in">insert</span>(vec.<span class="built_in">end</span>(), {<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>}); <span class="comment">// 在末尾插入多个元素</span></span><br></pre></td></tr></tbody></table></figure><p>访问 vector 中的元素：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> elem = vec[<span class="number">0</span>]; <span class="comment">// 通过下标访问元素</span></span><br><span class="line"><span class="type">int</span> elem = vec.<span class="built_in">at</span>(<span class="number">0</span>); <span class="comment">// 通过 at() 方法访问元素</span></span><br></pre></td></tr></tbody></table></figure><p>删除 vector 中的元素：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">vec.<span class="built_in">pop_back</span>(); <span class="comment">// 删除末尾元素</span></span><br><span class="line">vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>()); <span class="comment">// 删除第一个元素</span></span><br><span class="line">vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>() + <span class="number">1</span>, vec.<span class="built_in">end</span>()); <span class="comment">// 删除第 2 到最后一个元素</span></span><br></pre></td></tr></tbody></table></figure><p>获取 vector 的信息：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> size = vec.<span class="built_in">size</span>(); <span class="comment">// 获取 vector 中元素的个数</span></span><br><span class="line"><span class="type">int</span> capacity = vec.<span class="built_in">capacity</span>(); <span class="comment">// 获取 vector 的容量</span></span><br><span class="line"><span class="type">bool</span> empty = vec.<span class="built_in">empty</span>(); <span class="comment">// 判断 vector 是否为空</span></span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，vector 的扩容操作可能会导致大量元素的移动，因此对于频繁的添加和删除操作，可以考虑使用其他的容器，比如 list 或 deque。</p><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>在 C++ STL 中，array 是一种固定大小的数组容器，可以存储一组相同类型的元素，与普通数组不同的是，array 对象的大小在编译时就已经确定，无法在运行时动态改变大小。</p><p>下面是一些常见的 array 操作：</p><p>创建 array 对象：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">std::array&lt;<span class="type">int</span>, 5&gt; arr; <span class="comment">// 创建大小为 5 的 int 数组</span></span><br><span class="line">std::array&lt;<span class="type">int</span>, 5&gt; arr = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>}; <span class="comment">// 创建大小为 5 的 int 数组，并初始化为 {1, 2, 3, 4, 5}</span></span><br></pre></td></tr></tbody></table></figure><p>访问 array 中的元素：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> elem = arr[<span class="number">0</span>]; <span class="comment">// 通过下标访问元素</span></span><br><span class="line"><span class="type">int</span> elem = arr.<span class="built_in">at</span>(<span class="number">0</span>); <span class="comment">// 通过 at() 方法访问元素</span></span><br></pre></td></tr></tbody></table></figure><p>修改 array 中的元素：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 修改第一个元素的值</span></span><br><span class="line">arr.<span class="built_in">at</span>(<span class="number">0</span>) = <span class="number">0</span>; <span class="comment">// 修改第一个元素的值</span></span><br></pre></td></tr></tbody></table></figure><p>获取 array 的信息：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> size = arr.<span class="built_in">size</span>(); <span class="comment">// 获取 array 中元素的个数</span></span><br></pre></td></tr></tbody></table></figure><p>array 的大小是固定的，因此它没有添加或删除元素的操作，但是可以使用类似 memcpy 的方式复制和移动 array 对象的内容。</p><p>需要注意的是，array 和普通数组一样，都没有提供边界检查的功能，因此在使用下标访问元素时，需要保证下标的合法性。</p><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><p>在 C++ STL 中，迭代器（Iterator）是一种广泛使用的泛型编程工具，它提供了一种统一的方式来遍历容器中的元素，而不必关心容器内部的具体实现。迭代器可以看作是一个指向容器中元素的指针，通过对迭代器的操作，可以对容器中的元素进行遍历、访问和修改等操作。</p><p>STL 提供了多种类型的迭代器，包括：</p><ul><li>输入迭代器（Input Iterator）</li><li>输出迭代器（Output Iterator）</li><li>前向迭代器（Forward Iterator）</li><li>双向迭代器（Bidirectional Iterator）</li><li>随机访问迭代器（Random Access Iterator）</li></ul><p>这些迭代器具有不同的功能和限制，使用时需要根据具体的场景进行选择。</p><p>下面是一些常见的迭代器操作：</p><p>遍历容器中的元素：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; v = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>};</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); ++it) {</span><br><span class="line">    std::cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>; <span class="comment">// 输出容器中的元素</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>访问容器中的元素：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> it = v.<span class="built_in">begin</span>();</span><br><span class="line"><span class="type">int</span> elem = *it; <span class="comment">// 通过迭代器访问容器中的元素</span></span><br></pre></td></tr></tbody></table></figure><p>修改容器中的元素：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">*it = <span class="number">0</span>; <span class="comment">// 通过迭代器修改容器中的元素</span></span><br></pre></td></tr></tbody></table></figure><p>移动迭代器：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">std::<span class="built_in">advance</span>(it, <span class="number">1</span>); <span class="comment">// 将迭代器 it 前移一位</span></span><br></pre></td></tr></tbody></table></figure><p>获取迭代器的信息：</p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">bool</span> is_end = (it == v.<span class="built_in">end</span>()); <span class="comment">// 判断迭代器是否已经到达容器的末尾</span></span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，在使用迭代器访问容器中的元素时，需要保证迭代器的合法性。此外，对于不同类型的迭代器，支持的操作也不尽相同，因此在使用迭代器时需要根据具体的场景进行选择。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim模板</title>
      <link href="/2023/04/17/vim%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/04/17/vim%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>vim ./vimrc</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">set number</span><br><span class="line"></span><br><span class="line">set shiftwidth=4</span><br><span class="line">set tabstop=4</span><br><span class="line">set expandtab</span><br><span class="line">set autoindent          "设置自动缩进</span><br><span class="line"></span><br><span class="line">"新建.c,.h,.sh,.java文件，自动插入文件头</span><br><span class="line">autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()"</span><br><span class="line">""定义函数SetTitle，自动插入文件头</span><br><span class="line">func SetTitle()</span><br><span class="line">    "如果文件类型为.sh文件</span><br><span class="line">        call setline(1,          "/***********************************************************")</span><br><span class="line">        call append(line("."),   "  &gt; File Name: ".expand("%"))</span><br><span class="line">        call append(line(".")+1, "  &gt; Author: yzy")</span><br><span class="line">        call append(line(".")+2, "  &gt; blog: miaobuyi.github.io")</span><br><span class="line">        call append(line(".")+3, "  &gt; Created Time: ".strftime("%c"))</span><br><span class="line">        call append(line(".")+4, "  &gt; Modified Time:".strftime("%c"))</span><br><span class="line">        call append(line(".")+5, " *******************************************************/")</span><br><span class="line">        call append(line(".")+6, "") </span><br><span class="line">    if expand("%:e") == 'cpp' </span><br><span class="line">        call append(line(".")+7, "#include &lt;iostream&gt;")</span><br><span class="line">        call append(line(".")+8, "") </span><br><span class="line">        call append(line(".")+9, "using namespace std;")</span><br><span class="line">        call append(line(".")+10, "") </span><br><span class="line">        call append(line(".")+11, "int main(){")</span><br><span class="line">        call append(line(".")+12, "") </span><br><span class="line">        call append(line(".")+13, "    cout &lt;&lt; \"hello...\"  &lt;&lt; endl;")</span><br><span class="line">        call append(line(".")+14, "    return 0;")</span><br><span class="line">        call append(line(".")+15, "}")</span><br><span class="line">        call append(line(".")+16, "") </span><br><span class="line">    endif</span><br><span class="line">    if expand("%:e") == 'c' </span><br><span class="line">        call append(line(".")+7, "#include &lt;stdio.h&gt;")</span><br><span class="line">        call append(line(".")+8, "#include &lt;string.h&gt;")</span><br><span class="line">        call append(line(".")+9, "") </span><br><span class="line">        call append(line(".")+10, "int main(int argc,char *argv[])")</span><br><span class="line">        call append(line(".")+11, "{")</span><br><span class="line">        call append(line(".")+12, "") </span><br><span class="line">        call append(line(".")+13, "    ")</span><br><span class="line">        call append(line(".")+14, "    return 0;")</span><br><span class="line">        call append(line(".")+15, "}")</span><br><span class="line">        call append(line(".")+16, "") </span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br><span class="line">"新建文件后，自动定位到文件末尾</span><br><span class="line">autocmd BufNewFile * normal G</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> VIM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2023/04/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/04/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h3 id="Internet历史"><a href="#Internet历史" class="headerlink" title="Internet历史"></a>Internet历史</h3><p>​1968：阿帕网问世，internet雏形、不能跨平台、跨操作系统</p><p>​    1974：TCP协议出现、没有纠错功能</p><p>​1983：TPC/IP协议出现</p><p>​能够实现跨平台、操作系统</p><p>​能够实现纠错功能</p><p>协议：事先约定好的一组规则</p><h3 id="网络协议模型"><a href="#网络协议模型" class="headerlink" title="网络协议模型"></a>网络协议模型</h3><h5 id="1、OSI七层协议模型-理论化的模型"><a href="#1、OSI七层协议模型-理论化的模型" class="headerlink" title="1、OSI七层协议模型(理论化的模型)"></a>1、OSI七层协议模型(理论化的模型)</h5><p>应用层：应用程序</p><p>表示层：信息加密、解密</p><p>会话层：建立通信节点</p><p>传输层：完成点对点的通信</p><p>网络层：路由寻址(ip)  ip：在网络中唯一标识一台主机</p><p>数据链路层：接收物理层的数据，进行帧格式的解包，纠错处理，接受网络层的数据，进行帧格式的打包</p><p>物理层：屏蔽物理硬件差异，光电信号的转换</p><p>应 表 会 传 网 数 物</p><h5 id="2、TCP-x2F-IP四层协议模型"><a href="#2、TCP-x2F-IP四层协议模型" class="headerlink" title="2、TCP/IP四层协议模型"></a>2、TCP/IP四层协议模型</h5><p>应用层:http(超文本传输协议)、FTP（文件传输协议）、DNS（域名解析）、NFS(网络挂载协议)、SSH（远程登录协议）</p><p>传输层：TCP协议、UDP协议</p><p>网络层：IP协议</p><p>物理与网络接口层：以太网协议、PPP(拨号协议)、令牌环网、ARP(ip-&gt;mac)、RARP（mac-&gt;ip)</p><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">tcp协议和udp协议</span><br><span class="line">    共同点：都是传输层的通信协议</span><br><span class="line">不同点：</span><br><span class="line">    tcp：面向连接，保证数据安全、可靠、不失序的一种通信协议</span><br><span class="line">    应用场景：</span><br><span class="line">    登录相关程序、重要文件</span><br><span class="line">    udp：无连接，是一种不安全、不可靠的一种通信协议</span><br><span class="line">    应用场景：</span><br><span class="line">    流媒体软件、大型的音视频传输    </span><br></pre></td></tr></tbody></table></figure><h3 id="网络编程预备知识"><a href="#网络编程预备知识" class="headerlink" title="网络编程预备知识"></a>网络编程预备知识</h3><h5 id="1、IP地址"><a href="#1、IP地址" class="headerlink" title="1、IP地址"></a>1、IP地址</h5><p>​IP地址在网络中唯一标识一台主机</p><p>​IPV4：32bit 4字节数据</p><p>​点分十进制：”1.1.1.0”</p><p>​二进制：00000001 00000001 00000001 00000000</p><p>​IPV6：128bit</p><p>​冒分16进制：fe80::58e7:a262:ad38:ee1e%31</p><p>​MAC：48bit全球唯一标识</p><p>​ARP： ip –&gt; MAC</p><p>​RARP: MAC –&gt; ip</p><h5 id="2、PORT端口号"><a href="#2、PORT端口号" class="headerlink" title="2、PORT端口号"></a>2、PORT端口号</h5><p>​一个端口号对应一个进程</p><p>​端口号：2字节，是一个short类型的正整数</p><p>​端口号取值范围：0 ~ 65535</p><pre><code> 0不能使用 1~1023：系统端口，不能使用 1024~5000：一般应用程序 5001~65535:系统预留自定义端口</code></pre><h5 id="3、套接字-–socket"><a href="#3、套接字-–socket" class="headerlink" title="3、套接字 –socket"></a>3、套接字 –socket</h5><p>​进程间通信的机制之一</p><p>​本质：是一个特殊的文件描述符，是一个按顺序分配的最小的非负整数</p><h3 id="基于TCP的套接字通信流程"><a href="#基于TCP的套接字通信流程" class="headerlink" title="基于TCP的套接字通信流程"></a>基于TCP的套接字通信流程</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><h5 id="1、创建套接字（socket）"><a href="#1、创建套接字（socket）" class="headerlink" title="1、创建套接字（socket）"></a>1、创建套接字（socket）</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">&lt;sys/socket.h&gt;</span><br><span class="line"><span class="type">int</span> <span class="title function_">socket</span><span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol)</span>;</span><br><span class="line">domain:指定通信所用的协议族，</span><br><span class="line">AF_INET 表示使用 IPv4 协议族；</span><br><span class="line">        AF_UNIX 或 AF_LOCAL：用于本地通信的协议族；</span><br><span class="line">        AF_INET6：用于 IPv6 协议族的套接字；</span><br><span class="line">        AF_IPX：用于 IPX 协议族的套接字；</span><br><span class="line">        AF_NETLINK：用于内核和用户进程之间的通信；</span><br><span class="line">        AF_PACKET：用于底层数据包操作的协议族。</span><br><span class="line">type:参数指定套接字的类型</span><br><span class="line">        SOCK_STREAM 表示使用流套接字（TCP）</span><br><span class="line">        SOCK_DGRAM 表示使用数据报套接字（UDP）</span><br><span class="line">        SOCK——RAM 原始套接字，跨传输层的通信--ping</span><br><span class="line">protocol:参数指定具体的协议，</span><br><span class="line">        通常取值为 <span class="number">0</span>，表示自动选择适合该套接字类型和协议族的默认协议。</span><br><span class="line">返回值：返回一个整数类型的套接字描述符，它作为后续的网络通信操作的参数之一。如果调用失败，socket()函数会返回 <span class="number">-1</span>，并设置全局变量 errno 表示具体的错误原因。</span><br></pre></td></tr></tbody></table></figure><h5 id="2、命名套接字、绑定（bind）"><a href="#2、命名套接字、绑定（bind）" class="headerlink" title="2、命名套接字、绑定（bind）"></a>2、命名套接字、绑定（bind）</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通用地址结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> {</span></span><br><span class="line">    <span class="type">sa_family_t</span> sa_family;   <span class="comment">// 地址族，如 AF_INET、AF_INET6</span></span><br><span class="line">    <span class="type">char</span>        sa_data[<span class="number">14</span>]; <span class="comment">// 地址数据</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//ipv4地址结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> {</span></span><br><span class="line">    <span class="type">in_addr_t</span> s_addr; <span class="comment">// IP地址，使用网络字节序</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//Internet协议地址结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> {</span></span><br><span class="line">    <span class="type">sa_family_t</span>    sin_family; <span class="comment">// 地址族，始终为 AF_INET</span></span><br><span class="line">    <span class="type">in_port_t</span>      sin_port;   <span class="comment">// 端口号，使用网络字节序（big-endian）</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span>   <span class="comment">// IP地址，使用网络字节序</span></span><br><span class="line">    <span class="type">char</span>           sin_zero[<span class="number">8</span>];<span class="comment">// 未使用</span></span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>bind</strong></p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>          <span class="comment">/* See NOTES */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">bind</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br><span class="line">    sockfd：要绑定的套接字文件描述符。</span><br><span class="line">    addr：指向要绑定的地址结构体(如 <span class="keyword">struct</span> sockaddr_in)的指针。</span><br><span class="line">    addrlen：地址结构体的长度。</span><br><span class="line">返回值：函数执行成功后，套接字就与指定的地址和端口号相关联。如果绑定失败，bind() 函数将返回一个负数，表示绑定失败的原因。</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (bind(server_sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;server_address, <span class="keyword">sizeof</span>(server_address)) &lt; <span class="number">0</span>) {</span><br><span class="line">    perror(<span class="string">"bind failed"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>第二个参数为什么要这样写?</p></blockquote><blockquote><p>在调用 <code>bind()</code> 函数时，第二个参数需要传递一个指向地址结构体的指针，即 <code>const struct sockaddr *addr</code>。但是，<code>server_address</code> 是一个类型为 <code>struct sockaddr_in</code> 的结构体，因此在传递给 <code>bind()</code> 函数之前需要将其转换为 <code>struct sockaddr</code> 类型的指针。</p><p>这里采用了一个常用的技巧，即将结构体指针强制转换为通用的 <code>struct sockaddr</code> 指针类型，这样可以避免在函数调用过程中出现类型不匹配的问题。</p><p>具体来说，代码中将 <code>server_address</code> 的地址作为参数传递给 <code>bind()</code> 函数时，将其强制转换为 <code>struct sockaddr</code> 类型的指针，即 <code>(struct sockaddr *)&amp;server_address</code>。这样做不会改变地址结构体中的数据内容，只是改变了指针的类型，使得在函数调用中能够通过 <code>struct sockaddr</code> 类型的指针正确地访问 <code>server_address</code> 中的数据。</p></blockquote><h5 id="3、创建监听队列（listen）"><a href="#3、创建监听队列（listen）" class="headerlink" title="3、创建监听队列（listen）"></a>3、创建监听队列（listen）</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>          <span class="comment">/* See NOTES */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">listen</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> backlog)</span>;</span><br><span class="line">    sockfd：已创建并绑定地址的套接字文件描述符；</span><br><span class="line">    backlog：等待连接队列的最大长度，即同一时刻可以接受的最大连接请求数量。</span><br><span class="line">返回值：函数成功返回 <span class="number">0</span>，失败返回 <span class="number">-1</span>。在返回之前，系统会将 sockfd 标识为被动套接字，表示该套接字可以接收客户端连接请求。</span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><blockquote><p>需要注意的是，调用 <code>listen()</code> 函数后并不会立即阻塞等待客户端连接请求，需要在调用 <code>accept()</code> 函数前将 sockfd 设置为非阻塞模式，或者在 <code>accept()</code> 函数中使用超时机制等待连接请求的到来。</p></blockquote><h5 id="4、接受连接（accept）"><a href="#4、接受连接（accept）" class="headerlink" title="4、接受连接（accept）"></a>4、接受连接（accept）</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">accept</span><span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> *addrlen)</span>;</span><br><span class="line">    sockfd：已调用 listen() 函数的套接字文件描述符；</span><br><span class="line">    addr：用于存放客户端地址信息的结构体指针；</span><br><span class="line">    addrlen：指向 addr 结构体的长度的指针。</span><br><span class="line">    返回值：函数成功返回一个新的套接字文件描述符---读写套接字，用于与客户端通信；若失败则返回 <span class="number">-1</span>。</span><br></pre></td></tr></tbody></table></figure><h5 id="5、读写数据"><a href="#5、读写数据" class="headerlink" title="5、读写数据"></a>5、读写数据</h5><h6 id="recv"><a href="#recv" class="headerlink" title="recv"></a>recv</h6><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">recv</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags)</span>;</span><br><span class="line">    sockfd：要接收数据的套接字文件描述符。</span><br><span class="line">    buf：指向存放接收数据的缓冲区的指针。</span><br><span class="line">    len：缓冲区的长度。</span><br><span class="line">    flags：接收操作的标志，通常设置为 <span class="number">0</span> 阻塞。</span><br><span class="line">        MSG_WAITALL：表示在接收到完整的请求后，才返回数据。即一直等到 len 个字节的数据都接收完毕后才返回，如果接收到的数据长度小于 len，则 recv() 函数将一直等待，直到接收到足够的数据后才返回。如果不设置该标志，则在接收到任意长度的数据后即返回，可能会导致接收到的数据不完整。</span><br><span class="line">MSG_OOB：表示接收带外数据（Out-of-Band Data）。</span><br><span class="line">MSG_PEEK：表示接收数据但不将其从接收缓冲区中删除。这意味着，在下一次调用 recv() 函数时，仍然可以读取到这些数据。</span><br><span class="line">MSG_DONTWAIT：表示以非阻塞方式进行接收操作。如果接收缓冲区中没有数据可读，则 recv() 函数会立即返回，而不会等待数据到达。</span><br><span class="line">    返回值：recv() 函数执行成功后，返回值为接收到的数据的字节数。如果接收失败，recv() 函数将返回一个负数，表示接收失败的原因。</span><br></pre></td></tr></tbody></table></figure><blockquote><p>需要注意的是，不同的操作系统可能支持的 <code>recv()</code> 函数的 <code>flags</code> 标志略有不同，因此在使用时应注意查看所使用操作系统的文档。</p></blockquote><h6 id="send"><a href="#send" class="headerlink" title="send"></a>send</h6><p><code>send()</code>是一个函数，用于在已连接的套接字上发送数据。在TCP协议中，使用<code>send()</code>函数将数据发送给已连接的远程主机，可以在客户端和服务器之间进行双向通信。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags)</span>;</span><br><span class="line">sockfd是指向已连接套接字的文件描述符；</span><br><span class="line">buf是指向包含要发送的数据的缓冲区指针；</span><br><span class="line">    len是要发送的数据的长度；</span><br><span class="line">    flags是一组标志，用于控制发送操作的行为。</span><br><span class="line"></span><br><span class="line">返回值：函数返回值为<span class="type">ssize_t</span>类型，表示发送成功的数据字节数。如果发送失败，则返回<span class="number">-1</span>，并设置全局变量errno来指示错误原因。</span><br></pre></td></tr></tbody></table></figure><p>在调用<code>send()</code>函数时，需要注意以下几点：</p><ul><li>发送操作可能会阻塞，直到发送缓冲区中的数据被完全传输或发生错误。</li><li>如果要发送的数据长度大于发送缓冲区的大小，数据将被分成多个数据包进行发送。</li><li>一般情况下，TCP协议保证数据包的有序性，即发送的数据包将按照发送的顺序到达远程主机。但是，如果数据包经过多个网络节点传输，可能会出现乱序现象，需要使用TCP协议的确认机制进行重传和排序。</li><li>如果使用带外数据传输（OOB）发送数据，需要使用<code>MSG_OOB</code>标志。</li></ul><h5 id="6、关闭连接"><a href="#6、关闭连接" class="headerlink" title="6、关闭连接"></a>6、关闭连接</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">close(fd)</span><br><span class="line"><span class="comment">//fd 套接字描述符</span></span><br></pre></td></tr></tbody></table></figure><h5 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">cCopy code<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> server_sockfd, client_sockfd;</span><br><span class="line">    <span class="type">socklen_t</span> server_len, client_len;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_address</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_address</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建套接字</span></span><br><span class="line">    server_sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命名套接字</span></span><br><span class="line">    server_address.sin_family = AF_INET;</span><br><span class="line">    server_address.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    server_address.sin_port = htons(<span class="number">9734</span>);</span><br><span class="line">    server_len = <span class="keyword">sizeof</span>(server_address);</span><br><span class="line">    bind(server_sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;server_address, server_len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建监听队列</span></span><br><span class="line">    listen(server_sockfd, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"server waiting\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接受连接</span></span><br><span class="line">        client_len = <span class="keyword">sizeof</span>(client_address);</span><br><span class="line">        client_sockfd = accept(server_sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;client_address, &amp;client_len);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读写数据</span></span><br><span class="line">        read(client_sockfd, &amp;ch, <span class="number">1</span>);</span><br><span class="line">        ch++;</span><br><span class="line">        write(client_sockfd, &amp;ch, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        close(client_sockfd);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><h5 id="1、创建套接字"><a href="#1、创建套接字" class="headerlink" title="1、创建套接字"></a>1、创建套接字</h5><h5 id="2、填写服务器地址结构体"><a href="#2、填写服务器地址结构体" class="headerlink" title="2、填写服务器地址结构体"></a>2、填写服务器地址结构体</h5><h5 id="3、连接服务器"><a href="#3、连接服务器" class="headerlink" title="3、连接服务器"></a>3、连接服务器</h5><p><code>connect()</code>是一个函数，用于建立连接到指定远程主机的TCP连接。在建立连接后，可以使用<code>read()</code>和<code>write()</code>等函数在套接字上发送和接收数据。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>          <span class="comment">/* See NOTES */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">connect</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr,<span class="type">socklen_t</span> addrlen)</span>;</span><br><span class="line">sockfd是指向已创建套接字的文件描述符；</span><br><span class="line">    addr是指向包含远程主机地址和端口号的sockaddr结构体指针；</span><br><span class="line">    addrlen是sockaddr结构体的长度。</span><br><span class="line"></span><br><span class="line">    返回值：函数返回值为<span class="type">int</span>类型，表示函数的执行结果。如果成功建立连接，则返回<span class="number">0</span>；如果失败，则返回<span class="number">-1</span>，并设置全局变量errno来指示错误原因。</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="4、读写数据"><a href="#4、读写数据" class="headerlink" title="4、读写数据"></a>4、读写数据</h5><h5 id="5、关闭连接"><a href="#5、关闭连接" class="headerlink" title="5、关闭连接"></a>5、关闭连接</h5><h5 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">cCopy code<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> sockfd;</span><br><span class="line">    <span class="type">socklen_t</span> len;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">'A'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建套接字</span></span><br><span class="line">    sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填写服务器地址结构体</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr = *(<span class="keyword">struct</span> in_addr *)*host-&gt;h_addr_list;</span><br><span class="line">    address.sin_port = htons(<span class="number">9734</span>);</span><br><span class="line">    len = <span class="keyword">sizeof</span>(address);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接服务器</span></span><br><span class="line">    result = connect(sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;address, len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"oops: client1"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读写数据</span></span><br><span class="line">    write(sockfd, &amp;ch, <span class="number">1</span>);</span><br><span class="line">    read(sockfd, &amp;ch, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"char from server = %c\n"</span>, ch);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    close(sockfd);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>服务端代码与之前的示例代码类似，客户端代码则将连接到本地主机的特定端口改为连接到远程主机的特定端口。客户端代码使用<code>gethostbyname()</code>函数获取远程主机的IP地址，并使用<code>connect()</code>函数连接到该IP地址和端口。</p><h3 id="基于UDP的套接字通信流程"><a href="#基于UDP的套接字通信流程" class="headerlink" title="基于UDP的套接字通信流程"></a>基于UDP的套接字通信流程</h3><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><h5 id="1、创建套接字-1"><a href="#1、创建套接字-1" class="headerlink" title="1、创建套接字"></a>1、创建套接字</h5><h5 id="2、绑定ip地址端口号"><a href="#2、绑定ip地址端口号" class="headerlink" title="2、绑定ip地址端口号"></a>2、绑定ip地址端口号</h5><h5 id="3、接收，发送"><a href="#3、接收，发送" class="headerlink" title="3、接收，发送"></a>3、接收，发送</h5><h6 id="sendto"><a href="#sendto" class="headerlink" title="sendto"></a>sendto</h6><p><code>sendto()</code>是一个函数，用于在未连接的套接字上发送数据。在UDP协议中，使用<code>sendto()</code>函数将数据发送给指定的远程主机，可以进行单向的无连接通信。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">sendto</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">               <span class="type">const</span> <span class="keyword">struct</span> sockaddr *dest_addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br><span class="line">sockfd是指向未连接套接字的文件描述符；</span><br><span class="line">buf是指向包含要发送的数据的缓冲区指针；</span><br><span class="line">    len是要发送的数据的长度；</span><br><span class="line">    flags是一组标志，用于控制发送操作的行为；</span><br><span class="line">        <span class="number">0</span>：默认选项，不进行任何操作。</span><br><span class="line">        MSG_DONTROUTE：数据包不要路由，只在本地网络中查找接收方。</span><br><span class="line">        MSG_DONTWAIT：非阻塞操作，如果发送缓冲区已满，则立即返回一个错误。</span><br><span class="line">        MSG_EOR：表示此次发送是一个消息的结尾，对于面向消息的协议比如SOCK_DGRAM有效。</span><br><span class="line">        MSG_MORE：表示此次发送是一个长消息的一部分，还有后续数据需要发送。</span><br><span class="line">        MSG_NOSIGNAL：发送操作不会产生SIGPIPE信号，该信号可能会在连接中断或者对端关闭连接时发出。</span><br><span class="line">        MSG_OOB：发送紧急数据，通常是高优先级数据，需要在数据中标记。</span><br><span class="line">        MSG_WAITALL：阻塞操作，直到所有数据都被接收或者出现错误。</span><br><span class="line">    dest_addr是指向包含远程主机地址和端口号的sockaddr结构体指针；</span><br><span class="line">    addrlen是sockaddr结构体的长度。</span><br><span class="line">返回值：函数返回值为<span class="type">ssize_t</span>类型，表示发送成功的数据字节数。如果发送失败，则返回<span class="number">-1</span>，并设置全局变量errno来指示错误原因。</span><br></pre></td></tr></tbody></table></figure><p>在调用<code>sendto()</code>函数时，需要注意以下几点：</p><ul><li><p>发送操作可能会阻塞，直到发送缓冲区中的数据被完全传输或发生错误。</p></li><li><p>如果要发送的数据长度大于发送缓冲区的大小，数据将被分成多个数据包进行发送。</p></li><li><p>UDP协议不保证数据包的有序性，即发送的数据包不一定按照发送的顺序到达远程主机。如果需要保证有序性，需要在应用层使用序号进行排序。</p></li><li><p>在未连接的套接字上使用<code>sendto()</code>函数发送数据时，需要指定目标主机的地址和端口号，否则发送的数据将无法到达目标主机</p></li></ul><h6 id="recvform"><a href="#recvform" class="headerlink" title="recvform"></a>recvform</h6><blockquote><p><code>recvfrom()</code> 函数与 <code>recv()</code> 函数类似，都是用于从套接字中接收数据。不同之处在于，<code>recvfrom()</code> 函数可以从未连接套接字（如 <code>SOCK_DGRAM</code> 类型的套接字）中接收数据，并返回数据发送者的地址信息。</p></blockquote>  <figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">recvfrom</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags,<span class="keyword">struct</span> sockaddr *src_addr,<span class="type">socklen_t</span> *addrlen)</span>;</span><br><span class="line">    sockfd：需要接收数据的套接字描述符。</span><br><span class="line">    buf：接收数据的缓冲区指针。</span><br><span class="line">    len：缓冲区的长度。</span><br><span class="line">    flags：接收数据的行为控制参数，常用的有 MSG_WAITALL、MSG_PEEK、MSG_OOB 和 MSG_DONTWAIT。</span><br><span class="line">        其中，flags参数表示函数调用的标志，是一个掩码值，可以用位运算符组合以下标志：</span><br><span class="line">    MSG_CONFIRM：请求确认数据已到达。</span><br><span class="line">    MSG_DONTROUTE：不要将数据路由到其他网络接口，仅在本地网络内寻找目标地址。</span><br><span class="line">    MSG_DONTWAIT：将接收操作设置为非阻塞模式。</span><br><span class="line">    MSG_ERRQUEUE：如果有错误发生，将错误信息放入一个错误队列。</span><br><span class="line">    MSG_OOB：接收带外数据。</span><br><span class="line">    MSG_PEEK：接收数据但不从输入队列中删除。</span><br><span class="line">    MSG_TRUNC：如果接收到的数据超出缓冲区长度，将截断数据并返回缓冲区长度。</span><br><span class="line">    MSG_WAITALL：等待所有请求的字节数都被接收到。</span><br><span class="line">    其中，MSG_CONFIRM和MSG_ERRQUEUE标志只适用于UDP协议。其他标志可以在TCP和UDP协议中使用。</span><br><span class="line">    src_addr：用于存储数据发送者的地址信息，为 sockaddr 类型指针。</span><br><span class="line">    addrlen：存储 src_addr 结构体长度的指针。</span><br><span class="line">返回值：当成功接收到数据时，recvfrom() 函数会返回接收到的字节数，当出错时返回 <span class="number">-1</span>，并设置 errno 变量以指示错误原因。</span><br></pre></td></tr></tbody></table></figure><h5 id="4、关闭连接"><a href="#4、关闭连接" class="headerlink" title="4、关闭连接"></a>4、关闭连接</h5><h3 id="服务器模型"><a href="#服务器模型" class="headerlink" title="服务器模型"></a>服务器模型</h3><h5 id="1、循环服务器"><a href="#1、循环服务器" class="headerlink" title="1、循环服务器"></a>1、循环服务器</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">socket()</span><br><span class="line">bind()</span><br><span class="line">listen()</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">    accept();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        read()/write();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}       </span><br></pre></td></tr></tbody></table></figure><h5 id="2、并发服务器"><a href="#2、并发服务器" class="headerlink" title="2、并发服务器"></a>2、并发服务器</h5><p>(1)多进程并发服务器</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">socket();</span><br><span class="line">bind();</span><br><span class="line">listen();</span><br><span class="line"><span class="type">int</span> connfd;</span><br><span class="line">signal(<span class="number">17</span>, func);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">connfd = accept();</span><br><span class="line"><span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//处理客户端信息</span></span><br><span class="line">            ret = read();</span><br><span class="line">            <span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                close(connfd);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } </span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>（2）多线程并发服务器</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">pthread_t</span> thread1;</span><br><span class="line">socket();</span><br><span class="line">bind();</span><br><span class="line">listen();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">    connfd = accept();</span><br><span class="line">    pthread_create(&amp;thread1, <span class="literal">NULL</span>, func, &amp;connfd);</span><br><span class="line">    pthread_detach();    </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> *<span class="title function_">func</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="3、TCP通信的三次握手过程"><a href="#3、TCP通信的三次握手过程" class="headerlink" title="3、TCP通信的三次握手过程"></a>3、TCP通信的三次握手过程</h5><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="三次握手"></p><p>​第一次握手：客户端向服务器发送 SYN（x）待确认数据标志位的信息，进入SYN_SEND状态</p><p>​第二次握手：服务器向客户端回传一条ACK (x+1)应答,同时带上SYN（y）待确认数据标志位，进入SYN_RECV状态</p><p>​第三次握手：客户端向服务器回传一条ACK( y+1)应答 ，当三次握手完成之后，客户端和服务器同时进入ESTABLISHED(已连接)状态</p><h5 id="4、四次挥手过程"><a href="#4、四次挥手过程" class="headerlink" title="4、四次挥手过程"></a>4、四次挥手过程</h5><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/I1QNDFV_J$%7D7CI556TQ@OX7.jpg" alt="img"></p><blockquote><p>第一次：主动方向被动方发送断开连接请求，带上标志位FIN(x)，进入FIN_WAIT1状态</p></blockquote><blockquote><p>第二次：被动方向主动方回传ACK(x+1)应答, 主动方进入FIN_WAIT2状态, 被动方进入CLOSE_WAIT状态</p></blockquote><blockquote><p>第三次：被动方向被主动方发送断开连接请求，带上标志位FIN(y)，进入LAST_FIN状态</p></blockquote><blockquote><p>第四次：主动方向被动方回传ACK(y+1)应答, 主动方进入TIME_WAIT状态被动,方在接收到ACK应答之后，双方同时进入CLOSE状态</p></blockquote><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><h5 id="ntohs"><a href="#ntohs" class="headerlink" title="ntohs"></a>ntohs</h5><p><code>ntohs()</code>是一个函数，它的作用是将一个16位的网络字节序整数转换成主机字节序整数。其中，<code>ntohs</code>是<code>network to host short</code>的缩写，用于将网络字节序的短整数转换为主机字节序的短整数。</p><p>在使用套接字进行网络通信时，接收到的数据通常是网络字节序的，需要使用<code>ntohs()</code>将其转换为主机字节序的数据。例如，如果我们从套接字中接收到一个表示端口号的16位整数，可以使用<code>ntohs()</code>函数将其转换为主机字节序的端口号。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">uint16_t</span> <span class="title function_">ntohs</span><span class="params">(<span class="type">uint16_t</span> netshort)</span>;</span><br><span class="line"><span class="comment">//netshort是网络字节序的短整数，uint16_t是无符号16位整数类型。</span></span><br><span class="line"><span class="comment">//函数返回主机字节序的短整数。</span></span><br></pre></td></tr></tbody></table></figure><h5 id="ntohl"><a href="#ntohl" class="headerlink" title="ntohl"></a>ntohl</h5><p><code>ntohl()</code>是一个函数，它的作用是将一个32位的网络字节序整数转换成主机字节序整数。其中，<code>ntohl</code>是<code>network to host long</code>的缩写，用于将网络字节序的长整数转换为主机字节序的长整数。</p><p>在使用套接字进行网络通信时，接收到的数据通常是网络字节序的，需要使用<code>ntohl()</code>将其转换为主机字节序的数据。例如，如果我们从套接字中接收到一个表示IP地址的32位整数，可以使用<code>ntohl()</code>函数将其转换为主机字节序的IP地址。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">uint32_t</span> <span class="title function_">ntohl</span><span class="params">(<span class="type">uint32_t</span> netlong)</span>;</span><br><span class="line"><span class="comment">//netlong是网络字节序的长整数，uint32_t是无符号32位整数类型。</span></span><br><span class="line"><span class="comment">//函数返回主机字节序的长整数。</span></span><br></pre></td></tr></tbody></table></figure><h5 id="htons"><a href="#htons" class="headerlink" title="htons"></a>htons</h5><p><code>htons()</code> 函数用于将一个 16 位无符号整数从主机字节序转换为网络字节序。在网络字节序中，字节序是大端字节序，即高位字节在前，低位字节在后。而在不同的计算机体系结构中，字节序可能不同，主机字节序和网络字节序也可能不同，因此需要进行转换。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">htons</span><span class="params">(<span class="type">uint16_t</span> hostshort)</span>;</span><br><span class="line"><span class="comment">//其中，`hostshort` 表示需要转换的 16 位无符号整数，函数返回值为转换后的网络字节序的值。</span></span><br></pre></td></tr></tbody></table></figure><p>​该函数在处理网络数据包时非常常用，例如在将本地计算机上的数据发送到网络中或从网络中接收数据时，需要进行字节序的转换。</p><h5 id="htonl"><a href="#htonl" class="headerlink" title="htonl"></a><strong>htonl</strong></h5><p><code>htonl()</code> 函数用于将一个 32 位无符号整数从主机字节序转换为网络字节序。在网络字节序中，字节序是大端字节序，即高位字节在前，低位字节在后。而在不同的计算机体系结构中，字节序可能不同，主机字节序和网络字节序也可能不同，因此需要进行转换。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">htonl</span><span class="params">(<span class="type">uint32_t</span> hostlong)</span>;</span><br><span class="line"><span class="comment">//其中，`hostlong` 表示需要转换的 32 位无符号整数，函数返回值为转换后的网络字节序的值。</span></span><br></pre></td></tr></tbody></table></figure><p>​该函数在处理网络数据包时非常常用，例如在将本地计算机上的数据发送到网络中或从网络中接收数据时，需要进行字节序的转换。</p><h5 id="inet-addr"><a href="#inet-addr" class="headerlink" title="inet_addr"></a>inet_addr</h5><p><code>inet_addr()</code> 函数用于将一个 IPv4 地址字符串转换为网络字节序的 32 位无符号整数。IPv4 地址通常以点分十进制的格式表示，如 <code>192.168.1.1</code>。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">in_addr_t</span> <span class="title function_">inet_addr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp)</span>;</span><br><span class="line"><span class="comment">//cp:表示需要转换的 IPv4 地址字符串，</span></span><br><span class="line"><span class="comment">//函数返回值为转换后的网络字节序的 32 位无符号整数。如果转换失败，则返回 `INADDR_NONE`。</span></span><br></pre></td></tr></tbody></table></figure><p>​该函数在套接字编程中非常常用，例如在创建套接字、绑定套接字地址等操作中需要将字符串类型的 IP 地址转换为网络字节序的整数类型。</p><h5 id="inet-ntoa"><a href="#inet-ntoa" class="headerlink" title="inet_ntoa"></a>inet_ntoa</h5><p><code>inet_ntoa()</code> 函数用于将一个网络字节序的 32 位无符号整数表示的 IPv4 地址转换为点分十进制的格式。IPv4 地址通常以点分十进制的格式表示，如 <code>192.168.1.1</code>。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">inet_ntoa</span><span class="params">(<span class="keyword">struct</span> in_addr in)</span>;</span><br><span class="line"><span class="comment">//in 表示需要转换的网络字节序的 32 位无符号整数表示IPv4 地址，函数返回值为转换后的点分十进制的格式的字符串。</span></span><br></pre></td></tr></tbody></table></figure><p>​该函数在套接字编程中非常常用，例如在打印套接字地址时需要将网络字节序的 IP 地址转换为字符串类型的点分十进制格式。需要注意的是，该函数返回的指针指向的是一个静态缓冲区，因此不应该修改该指针所指向的内容，也不应该在多个地方使用相同的指针。</p><h5 id="inet-aton"><a href="#inet-aton" class="headerlink" title="inet_aton"></a>inet_aton</h5><p><code>inet_aton()</code>函数与<code>inet_addr()</code>函数作用相同，都是将字符串形式的IP地址转换为32位的网络字节序二进制数。但它们的函数原型略有不同：</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">inet_aton</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp, <span class="keyword">struct</span> in_addr *inp)</span>;</span><br><span class="line">cp是待转换的字符串形式的IP地址；</span><br><span class="line">    inp是用于存储转换后的<span class="number">32</span>位网络字节序二进制数的in_addr结构体指针。</span><br><span class="line">    返回值：inet_aton()函数成功返回<span class="number">1</span>，失败返回<span class="number">0</span>。</span><br></pre></td></tr></tbody></table></figure><blockquote><p>相对于<code>inet_addr()</code>函数，<code>inet_aton()</code>函数的优点在于它可以通过返回值来判断转换是否成功，而<code>inet_addr()</code>函数只能通过返回值是否为<code>INADDR_NONE</code>来判断是否成功。</p></blockquote><h3 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h3><p>​计算机在存储数据时，可以采用<code>大端序</code>（Big-Endian）或<code>小端序</code>（Little-Endian）两种方式。大端序是指将高位字节存储在低地址，低位字节存储在高地址；小端序则是将低位字节存储在低地址，高位字节存储在高地址。这个问题主要涉及到多个字节数据在计算机中存储的方式。</p><p>​在网络通信中，需要将数据从一台计算机传输到另一台计算机上。如果这两台计算机采用的字节序不同，那么就需要进行字节序的转换。通常情况下，网络通信采用的是大端序，也就是高位字节先传输。</p><p><code>小端序</code>&lt;——-&gt;<code>本机字节序</code></p><p><code>大端序 </code>&lt;——-&gt;<code>网络字节序</code></p><h3 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h3><h4 id="1、阻塞IO"><a href="#1、阻塞IO" class="headerlink" title="1、阻塞IO"></a>1、阻塞IO</h4><p>​读阻塞：当缓冲区中无数据，或者需要等待某种资源时，就会发生读阻塞</p><p>​read、recv、fgets、scanf….</p><p>​写阻塞：当缓冲区没有足够空间时，发生写阻塞</p><p>​write、send…..</p><p>​在程序中使用阻塞IO时，有可能会阻碍其他代码的执行</p><blockquote><p>阻塞式IO模型是指当进程执行IO操作时，如果数据没有准备好，进程会被阻塞，直到数据准备好才会返回。这种模型的优点是简单，易于实现，缺点是会浪费CPU资源，因为进程在等待IO完成时会一直占用CPU资源。</p></blockquote><h4 id="2、非阻塞IO"><a href="#2、非阻塞IO" class="headerlink" title="2、非阻塞IO"></a>2、非阻塞IO</h4><blockquote><p>非阻塞式IO模型是指当进程执行IO操作时，如果数据没有准备好，进程不会被阻塞，而是立即返回一个错误码。进程可以继续执行其他操作，然后再通过轮询等方式来检查IO操作是否完成。这种模型的优点是可以避免浪费CPU资源，缺点是轮询等操作会浪费一定的CPU时间。</p></blockquote><p>​非阻塞IO会频繁调用函数，开销较大</p><p>​设置非阻塞相关函数 – <code>fcntl</code></p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, ... <span class="comment">/* arg */</span> )</span>;</span><br><span class="line">参数：</span><br><span class="line">    fd：文件描述符</span><br><span class="line">    cmd：</span><br><span class="line">        F_GETFL:获取文件属性状态</span><br><span class="line">        F_SETFL:设置文件属性状态</span><br><span class="line">返回值：</span><br><span class="line">        根据参数cmd的不同返回不同的值</span><br><span class="line">        cmd -- F_GETFL:返回获取的文件属性状态</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"><span class="number">1</span>、获取文件描述符对应属性状态</span><br><span class="line"><span class="type">int</span> flag = fcntl(fd, F_GETFL, <span class="number">0</span>);</span><br><span class="line"><span class="number">2</span>、将flag添加设置非阻塞方式</span><br><span class="line">    flag = flag | O_NONBLOCK;</span><br><span class="line"><span class="number">3</span>、将新的状态属性设置到文件描述符中</span><br><span class="line">    fcntl(fd, F_SETFL, flag);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="3、IO多路复用"><a href="#3、IO多路复用" class="headerlink" title="3、IO多路复用"></a>3、IO多路复用</h4><blockquote><p>非阻塞式IO模型是指当进程执行IO操作时，如果数据没有准备好，进程不会被阻塞，而是立即返回一个错误码。进程可以继续执行其他操作，然后再通过轮询等方式来检查IO操作是否完成。这种模型的优点是可以避免浪费CPU资源，缺点是轮询等操作会浪费一定的CPU时间。</p></blockquote><h5 id="select"><a href="#select" class="headerlink" title="select"></a>select</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">     <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line">     <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line">     <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line">     <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">     <span class="type">int</span> <span class="title function_">select</span><span class="params">(<span class="type">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span><br><span class="line"><span class="params">                fd_set *exceptfds, <span class="keyword">struct</span> timeval *timeout)</span>;</span><br><span class="line">参数：</span><br><span class="line">          nfds：监测的文件描述符表中的文件描述最大值+<span class="number">1</span></span><br><span class="line">readfds：读监测表的首地址，不需要填<span class="literal">NULL</span></span><br><span class="line">          writefds：写监测表的首地址，不需要填<span class="literal">NULL</span></span><br><span class="line">          exceptfds：异常监测表的首地址，不需要填<span class="literal">NULL</span></span><br><span class="line">          timeout：设置的超时时间的首地址,不设置超时时间填<span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line">     <span class="type">void</span> <span class="title function_">FD_CLR</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>; <span class="comment">//从表中删除文件描述符</span></span><br><span class="line">     <span class="type">int</span>  <span class="title function_">FD_ISSET</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>; <span class="comment">//判断指定的文件描述符是否有响应，结果为真--有响应</span></span><br><span class="line">     <span class="type">void</span> <span class="title function_">FD_SET</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>; <span class="comment">//向表中添加文件描述符</span></span><br><span class="line">     <span class="type">void</span> <span class="title function_">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span>;  <span class="comment">//清0文件描述符表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> {</span></span><br><span class="line">             <span class="type">long</span>    tv_sec;         <span class="comment">/* seconds */</span></span><br><span class="line">             <span class="type">long</span>    tv_usec;        <span class="comment">/* microseconds */</span></span><br><span class="line">        };</span><br><span class="line">  timeout的使用方法：</span><br><span class="line">          <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">mt</span>;</span></span><br><span class="line">mt.tv_sec = <span class="number">10</span>;</span><br><span class="line">mt.tv_usec = <span class="number">500</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>select机制流程：</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span>、定义监测表,清空表</span><br><span class="line">   fd_set rfds;</span><br><span class="line">FD_ZERO(&amp;rfds);</span><br><span class="line"><span class="number">2</span>、向表中添加要监测的文件描述符<span class="number">0</span>、<span class="number">3</span></span><br><span class="line">    FD_SET(<span class="number">0</span>, &amp;rfds);</span><br><span class="line">FD_SET(<span class="number">3</span>, &amp;rfds);</span><br><span class="line"><span class="type">int</span> maxfd = <span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="number">3</span>、循环监测表</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        select(maxfd, &amp;rfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; maxfd; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(FD_ISSET(i, &amp;rfds))</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">                {</span><br><span class="line">                   <span class="comment">//实现对应IO操作 </span></span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="comment">//实现对应IO操作</span></span><br><span class="line">                }   </span><br><span class="line">            }           </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>使用select实现服务器的并发</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> {</span><br><span class="line">    <span class="type">int</span> sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sockfd &lt; <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    <span class="type">int</span> s_len = <span class="keyword">sizeof</span>(saddr);</span><br><span class="line">    <span class="type">int</span> ret = bind(sockfd, (<span class="keyword">struct</span> sockaddr *) &amp;saddr, s_len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"bind success\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    listen(sockfd, <span class="number">5</span>);</span><br><span class="line">    fd_set rfds,tmp;</span><br><span class="line">    FD_ZERO(&amp;rfds);</span><br><span class="line">    FD_SET(sockfd, &amp;rfds);</span><br><span class="line">    <span class="type">int</span> maxfd = sockfd;</span><br><span class="line">    tmp=rfds;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">        rfds=tmp;</span><br><span class="line">        select(maxfd + <span class="number">1</span>, &amp;rfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= maxfd; i++) {</span><br><span class="line">            <span class="keyword">if</span> (FD_ISSET(i, &amp;rfds)) {</span><br><span class="line">                <span class="keyword">if</span> (i == sockfd) { <span class="comment">//sockfd有反应将返回回来的套接字加入监听</span></span><br><span class="line">                    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">caddr</span>;</span></span><br><span class="line">                    <span class="type">int</span> c_len = <span class="keyword">sizeof</span>(caddr);</span><br><span class="line">                    <span class="type">int</span> connfd = accept(sockfd, (<span class="keyword">struct</span> sockaddr *) &amp;caddr, &amp;c_len);</span><br><span class="line">                    <span class="keyword">if</span> (connfd &lt; <span class="number">0</span>) {</span><br><span class="line">                        perror(<span class="string">"accept"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"link success\n"</span>);</span><br><span class="line">                    }</span><br><span class="line">                    maxfd = maxfd&gt;connfd?maxfd:connfd;<span class="comment">//保存最大的文件描述符</span></span><br><span class="line">                    FD_SET(connfd, &amp;tmp);<span class="comment">//更新表</span></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">//接收</span></span><br><span class="line">                    <span class="type">char</span> buf[<span class="number">64</span>] = {<span class="number">0</span>};</span><br><span class="line">                    read(i, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                    <span class="comment">//客户端退出</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">strncmp</span>(buf,<span class="string">"quit"</span>,<span class="number">4</span>)==<span class="number">0</span>){</span><br><span class="line">                        FD_CLR(i,&amp;tmp);</span><br><span class="line">                        close(i);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"socket:%d--quit\n"</span>, i);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"socket:%d--%s"</span>, i,buf);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h5><p><code>poll</code>是一个系统级函数，用于在Linux/Unix系统中进行轮询等待多个文件描述符上的事件。它通常用于异步I/O编程中，可以让程序等待多个I/O事件而不会被阻塞。</p><p>在使用<code>poll</code>函数之前，需要先定义一个<code>struct pollfd</code>类型的数组，每个数组元素表示一个文件描述符和它所关心的事件。<code>poll</code>函数会等待这些文件描述符上的事件，并将结果存储在<code>struct pollfd</code>类型的数组中。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">poll</span><span class="params">(<span class="keyword">struct</span> pollfd *fds, <span class="type">nfds_t</span> nfds, <span class="type">int</span> timeout)</span>;</span><br><span class="line">fds参数:是一个指向<span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span>类型数组的指针</span></span><br><span class="line"><span class="class">    <span class="title">nfds</span>参数表示数组中元素的数量</span></span><br><span class="line"><span class="class">    <span class="title">timeout</span>参数表示等待的超时时间（以毫秒为单位）。</span></span><br><span class="line"><span class="class">    返回值：<span class="title">poll</span>函数返回值表示发生事件的文件描述符数量，或者在超时时返回0，发生错误时返回-1。</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> {</span></span><br><span class="line">    <span class="type">int</span> fd;          <span class="comment">// 文件描述符</span></span><br><span class="line">    <span class="type">short</span> events;    <span class="comment">// 要监听的事件</span></span><br><span class="line">    <span class="type">short</span> revents;   <span class="comment">// 实际发生的事件</span></span><br><span class="line">};</span><br><span class="line">fd字段表示要监听的文件描述符，</span><br><span class="line">events字段表示要监听的事件，</span><br><span class="line">revents字段表示实际发生的事件，是由poll函数填充的。</span><br><span class="line">events和revents字段的值是由以下宏定义组成的位掩码：</span><br><span class="line"></span><br><span class="line">    POLLIN：表示可以从文件描述符读取数据。</span><br><span class="line">    POLLOUT：表示可以向文件描述符写入数据。</span><br><span class="line">    POLLERR：表示文件描述符发生了错误。</span><br><span class="line">    POLLHUP：表示文件描述符挂起。</span><br><span class="line">    POLLNVAL：表示文件描述符无效。</span><br><span class="line">    events和revents字段的值可以使用位运算符进行组合。例如，要监听读事件和错误事件，可以使用以下语句：</span><br><span class="line">    fds[<span class="number">0</span>].events = POLLIN | POLLERR;</span><br></pre></td></tr></tbody></table></figure><p>简单示例</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> {</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"/dev/input/mice"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">char</span> buf1[<span class="number">64</span>] = {<span class="number">0</span>};</span><br><span class="line">    <span class="type">char</span> buf2[<span class="number">64</span>] = {<span class="number">0</span>};</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       int flag = fcntl(0,F_GETFL,0);</span></span><br><span class="line"><span class="comment">       flag = flag | O_NONBLOCK;</span></span><br><span class="line"><span class="comment">       fcntl(0,F_SETFL,flag);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pfds</span>[200];</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">200</span>;i++){</span><br><span class="line">        pfds[i].fd=<span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> pos=<span class="number">-1</span>;</span><br><span class="line">    pfds[++pos].fd = <span class="number">0</span>;</span><br><span class="line">    pfds[pos].events = POLLIN;</span><br><span class="line">    pfds[++pos].fd = <span class="number">3</span>;</span><br><span class="line">    pfds[pos].events = POLLIN;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">        <span class="type">int</span> ret = poll(pfds, <span class="number">2</span>, <span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">0</span>){</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"timeout\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= pos; i++) {</span><br><span class="line">            <span class="keyword">if</span> (pfds[i].revents &amp; POLLIN) {</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) {</span><br><span class="line">                    fgets(buf1, <span class="number">64</span>, <span class="built_in">stdin</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"buf1=%s"</span>, buf1);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>) {</span><br><span class="line">                    read(fd, buf2, <span class="number">64</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d -- %d -- %d\n"</span>, buf2[<span class="number">0</span>], buf2[<span class="number">1</span>], buf2[<span class="number">2</span>]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>以上示例代码中，我们使用<code>poll</code>函数等待标准输入上的读事件，并设置了一个5秒钟的超时时间。如果超时，程序会输出”Timeout!”，如果有读事件发生，程序会读取标准输入的内容并输出。</p></blockquote><h5 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h5><p><code>epoll</code>是Linux内核提供的一种高效的I/O多路复用机制，可以用于在大量并发连接中监视多个文件描述符的I/O事件，比传统的<code>select</code>和<code>poll</code>函数更高效。</p><p><code>epoll</code>基于事件驱动模型，只有在需要进行I/O操作时才会阻塞进程，避免了遍历整个文件描述符集合的开销，因此在大量并发连接的场景中，<code>epoll</code>比<code>select</code>和<code>poll</code>更高效。</p><p><code>epoll</code>主要包括三个函数：</p><p><code>epoll_create()</code>函数用于创建一个新的<code>epoll</code>实例，并返回一个新的文件描述符，用于操作该实例。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">epoll_create</span><span class="params">(<span class="type">int</span> size)</span>;</span><br><span class="line">参数`size`是一个正整数，指定`epoll`实例内部用于存储文件描述符的数量。这个参数在Linux <span class="number">2.6</span><span class="number">.8</span>以后已经不再使用，但是必须传递一个大于<span class="number">0</span>的值。</span><br><span class="line">返回值为新创建的`epoll`实例的文件描述符，如果出错返回<span class="number">-1</span>。</span><br></pre></td></tr></tbody></table></figure><p><code>epoll_ctl()</code>函数用于向<code>epoll</code>实例中添加、修改或删除文件描述符。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">epoll_ctl</span><span class="params">(<span class="type">int</span> epfd, <span class="type">int</span> op, <span class="type">int</span> fd, <span class="keyword">struct</span> epoll_event *event)</span>;</span><br><span class="line">参数`epfd`是`epoll`实例的文件描述符，</span><br><span class="line">    `op`指定操作类型，可以是</span><br><span class="line">        EPOLL_CTL_ADD</span><br><span class="line">        EPOLL_CTL_MOD</span><br><span class="line">        EPOLL_CTL_DEL</span><br><span class="line">    三个值之一，分别表示添加、修改、删除文件描述符。</span><br><span class="line">    `fd`是要添加、修改或删除的文件描述符，</span><br><span class="line">    `event`是一个指向`epoll_event`结构体的指针，用于指定要监视的事件类型和回调函数。</span><br><span class="line">    返回值为<span class="number">0</span>表示成功，<span class="number">-1</span>表示出错。</span><br></pre></td></tr></tbody></table></figure><p><code>epoll_event</code>结构体定义如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">struct epoll_event {</span><br><span class="line">    uint32_t events;   // 监视的事件类型，可以是 EPOLLIN、EPOLLOUT 等</span><br><span class="line">    epoll_data_t data; // 回调函数中的数据，可以是一个指针或者一个文件描述符</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">其中，`events`成员指定要监视的事件类型，可以是以下值之一：</span><br><span class="line">- `EPOLLIN`：表示文件描述符可读；</span><br><span class="line">- `EPOLLOUT`：表示文件描述符可写；</span><br><span class="line">- `EPOLLPRI`：表示文件描述符有紧急数据可读；</span><br><span class="line">- `EPOLLERR`：表示文件描述符发生错误；</span><br><span class="line">- `EPOLLHUP`：表示文件描述符被挂起；</span><br><span class="line">- `EPOLLRDHUP`：表示TCP连接被对端关闭或重置。</span><br><span class="line"></span><br><span class="line">`data`成员指定回调函数中的数据，可以是一个指针或者一个文件描述符，具体取决于回调函数的实现。</span><br></pre></td></tr></tbody></table></figure><p><code>epoll_wait()</code>函数用于等待文件描述符上的I/O事件，并将就绪的文件描述符集合返回给应用程序。</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">epoll_wait</span><span class="params">(<span class="type">int</span> epfd, <span class="keyword">struct</span> epoll_event events[], <span class="type">int</span> maxevents, <span class="type">int</span> timeout)</span>;</span><br><span class="line">参数`epfd`是`epoll`实例的文件描述符，</span><br><span class="line">        `events[]`是一个指向`epoll_event`结构体数组的指针，用于返回就绪的文件描述符集合.。</span><br><span class="line">        `maxevents`指定返回的最大事件数，</span><br><span class="line">        `timeout`指定等待的超时时间（毫秒），如果为<span class="number">-1</span>表示永久等待，如果为<span class="number">0</span>表示立即返回。 </span><br><span class="line">返回值为就绪的文件描述符数目，如果超时返回<span class="number">0</span>，如果出错返回<span class="number">-1</span>。 </span><br></pre></td></tr></tbody></table></figure><p>在使用<code>epoll</code>时，一般的步骤是： </p><ol><li>调用<code>epoll_create()</code>函数创建一个<code>epoll</code>实例，并得到一个文件描述符。 </li><li>使用<code>epoll_ctl()</code>函数将需要监视的文件描述符添加到<code>epoll</code>实例中，并指定监视的事件类型和回调函数。</li><li>使用<code>epoll_wait()</code>函数等待文件描述符上的I/O事件，并处理就绪的文件描述符集合。</li><li>重复第3步直到不再需要监视这些文件描述符。</li></ol><p>需要注意的是，<code>epoll</code>实例内部维护了一个事件表，用于存储要监视的文件描述符和回调函数，因此在添加、修改和删除文件描述符时，需要使用<code>epoll_ctl()</code>函数更新事件表中的数据。同时，使用<code>epoll_wait()</code>函数等待就绪的事件时，需要预先分配一个足够大的<code>epoll_event</code>结构体数组，以便返回就绪的文件描述符集合。</p><h4 id="4、异步IO"><a href="#4、异步IO" class="headerlink" title="4、异步IO"></a>4、异步IO</h4><blockquote><p>异步IO模型是指进程发起一个IO操作后，立即返回并继续执行其他操作，当IO操作完成后，内核会通知进程。这种模型的优点是可以避免浪费CPU资源，因为IO操作在内核中执行，不需要占用进程的CPU资源，缺点是实现较为复杂，需要操作系统提供异步IO接口支持。</p></blockquote><h3 id="套接字属性设置"><a href="#套接字属性设置" class="headerlink" title="套接字属性设置"></a>套接字属性设置</h3><h4 id="1、获取和设置套接字属性"><a href="#1、获取和设置套接字属性" class="headerlink" title="1、获取和设置套接字属性"></a>1、获取和设置套接字属性</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>          <span class="comment">/* See NOTES */</span></span></span><br><span class="line">   <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> <span class="title function_">getsockopt</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> level, <span class="type">int</span> optname,</span></span><br><span class="line"><span class="params">                  <span class="type">void</span> *optval, <span class="type">socklen_t</span> *optlen)</span>;</span><br><span class="line">  参数：</span><br><span class="line">  sockfd：套接字</span><br><span class="line">  level：</span><br><span class="line">  SOL_SOCKET: 通用套接字层</span><br><span class="line">  IPPROTO_IP： IP层</span><br><span class="line">  IPPROTO_TCP： TCP层</span><br><span class="line">  optname:</span><br><span class="line">  套接字属性设置对应的功能选项，一般填对应宏</span><br><span class="line">  optval：</span><br><span class="line">  获取套接字属性对应的值的地址</span><br><span class="line">  optlen：</span><br><span class="line">  optval值的长度的地址</span><br><span class="line">                </span><br><span class="line"><span class="type">int</span> <span class="title function_">setsockopt</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> level, <span class="type">int</span> optname,<span class="type">const</span> <span class="type">void</span> *optval, <span class="type">socklen_t</span> optlen)</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">设置属性表：level     </span><br><span class="line">SOL_SOCKET</span><br><span class="line"></span><br><span class="line">---------------------------------------------------</span><br><span class="line"></span><br><span class="line">参数optname宏的作用   对应参数optval的类型</span><br><span class="line">SO_BROADCAST     允许发送广播数据         int</span><br><span class="line">SO_DEBUG循序调试  int</span><br><span class="line">SO_DONTROUTE    不查找路由 int</span><br><span class="line">SO_ERROR获的套接字错误int</span><br><span class="line">SO_KEEPALIVE保持连接  int</span><br><span class="line">SO_LINGER延迟关闭连接struct linger</span><br><span class="line">SO_OOBINLINE带外数据放入正常数据流  int</span><br><span class="line">SO_RCVBUF    接收缓冲区大小int</span><br><span class="line">SO_SNDBUF发送缓冲区大小int</span><br><span class="line">SO_RCVLOWAT接收缓冲区下限int</span><br><span class="line">SO_SNDWAIT发送缓冲区下限int</span><br><span class="line">SO_RCVTIMEO接收超时struct timeval</span><br><span class="line">SO_SNDTIMEO发送超时struct timeval</span><br><span class="line">SO_REUSEADDR允许重用本机地址和端口int</span><br><span class="line">SO_TYPE获得套接字类型int</span><br><span class="line">SO_BSDCOMPAT与BSD系统兼容int</span><br><span class="line">===================================================</span><br><span class="line"></span><br><span class="line">IPPROTO_IP</span><br><span class="line">------------------------------------------------------</span><br><span class="line">IP_ADD_MEMBERSHIP    加入到组播组中               struct ip_mreq </span><br><span class="line">IP_MULTICAST_IF      允许开启组播报文的接口       struct ip_mreq</span><br></pre></td></tr></tbody></table></figure><h4 id="2、超时检测"><a href="#2、超时检测" class="headerlink" title="2、超时检测"></a>2、超时检测</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//1、使用alarm信号和signal函数实现超时检测</span></span><br><span class="line">alarm(<span class="number">10</span>);</span><br><span class="line">signal(<span class="number">14</span>, func)；</span><br><span class="line">    </span><br><span class="line">   <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//功能实现;</span></span><br><span class="line">    }</span><br><span class="line">        </span><br><span class="line"><span class="comment">//2、IO多路复用select、poll、epoll通过设置函数中的参数 timeout实现</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">mt</span> =</span> {<span class="number">5</span>, <span class="number">0</span>};</span><br><span class="line">select(maxfd, &amp;rfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;mt);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、通过设置套接字属性完成超时检测</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">mt</span> =</span> {<span class="number">5</span>, <span class="number">0</span>};</span><br><span class="line"><span class="type">int</span> len = <span class="keyword">sizeof</span>(mt);</span><br><span class="line">setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, &amp;mt, len);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/***********************************************************</span></span><br><span class="line"><span class="comment">  &gt; File Name: setsockopt_sever.c</span></span><br><span class="line"><span class="comment">  &gt; Author: yzy</span></span><br><span class="line"><span class="comment">  &gt; blog: miaobuyi.github.io</span></span><br><span class="line"><span class="comment">  &gt; Created Time: 2023年04月14日 星期五 19时12分50秒</span></span><br><span class="line"><span class="comment">  &gt; Modified Time:2023年04月14日 星期五 19时12分50秒</span></span><br><span class="line"><span class="comment"> *******************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> {</span><br><span class="line">    <span class="type">int</span> sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sockfd &lt; <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> optval =<span class="number">1</span>;</span><br><span class="line">    setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, &amp;optval, <span class="keyword">sizeof</span>(optval));</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    <span class="type">int</span> s_len = <span class="keyword">sizeof</span>(saddr);</span><br><span class="line">    <span class="type">int</span> ret = bind(sockfd, (<span class="keyword">struct</span> sockaddr *) &amp;saddr, s_len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"bind success\n"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    listen(sockfd, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"wait client......\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">timeout</span>;</span></span><br><span class="line">    timeout.tv_sec = <span class="number">5</span>; <span class="comment">// 设置超时时间为5秒</span></span><br><span class="line">    timeout.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">caddr</span>;</span></span><br><span class="line">        <span class="type">int</span> c_len = <span class="keyword">sizeof</span>(caddr);</span><br><span class="line">        <span class="type">int</span> connfd = accept(sockfd, (<span class="keyword">struct</span> sockaddr *) &amp;caddr, &amp;c_len);</span><br><span class="line">        <span class="keyword">if</span> (connfd &lt; <span class="number">0</span>) {</span><br><span class="line">            perror(<span class="string">"accept"</span>);</span><br><span class="line">            <span class="comment">//exit(-1);</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"link success\n"</span>);</span><br><span class="line">        }</span><br><span class="line">        ret = setsockopt(connfd, SOL_SOCKET, SO_RCVTIMEO, &amp;timeout, <span class="keyword">sizeof</span>(timeout));</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) {</span><br><span class="line">            perror(<span class="string">"setsockopt"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line">            <span class="type">char</span> buf[<span class="number">64</span>] = {<span class="number">0</span>};</span><br><span class="line">            <span class="type">int</span> len = recv(connfd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (len &lt; <span class="number">0</span>) {</span><br><span class="line">                perror(<span class="string">"recv"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"recv:%s"</span>, buf);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"socket:%d--close\n"</span>, connfd);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    close(sockfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="3、广播和组播"><a href="#3、广播和组播" class="headerlink" title="3、广播和组播"></a>3、广播和组播</h4><h3 id="域套接字-–-本地套接字通信"><a href="#域套接字-–-本地套接字通信" class="headerlink" title="域套接字 – 本地套接字通信"></a>域套接字 – 本地套接字通信</h3><p>​tcp:</p><p>​服务器：</p><p>​socket () –&gt;  bind() –&gt; listen() –&gt; accept() –&gt; read()/write() –&gt; close()</p><p>​客户端：</p><p>​socket () –&gt;  connect() –&gt; read()/write() –&gt; close()</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">socket(AF_UNIX, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">socket(AF_UNIX, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">AF_UNIX对应的地址结构:</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> {</span></span><br><span class="line">    <span class="type">sa_family_t</span> sun_family;  <span class="comment">// 地址族类型，必须是 AF_UNIX</span></span><br><span class="line">    <span class="type">char</span> sun_path[<span class="number">108</span>];      <span class="comment">// 套接字文件路径</span></span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>其中，<code>sun_family</code> 成员必须设置为 <code>AF_UNIX</code>，<code>sun_path</code> 成员指定了套接字文件在文件系统中的路径。通常情况下，该路径以一个斜杠（/）开始，以确保该路径是绝对路径，而不是相对路径。而 <code>sun_path</code> 的长度为 <code>108</code>，这是因为在某些系统上，该字段的最大长度为 <code>108</code> 个字符。</p><p>需要注意的是，对于 AF_UNIX 套接字，虽然客户端和服务器都需要指定套接字文件路径，但是它们指定的路径是可以不同的。客户端和服务器都需要绑定到一个套接字文件上，并监听该套接字，从而能够相互通信。</p><p>服务器</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*===============================================</span></span><br><span class="line"><span class="comment">*   文件名称：server.c</span></span><br><span class="line"><span class="comment">*   创 建 者：     </span></span><br><span class="line"><span class="comment">*   创建日期：2023年04月11日</span></span><br><span class="line"><span class="comment">*   描    述：</span></span><br><span class="line"><span class="comment">================================================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>          <span class="comment">/* See NOTES */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/ip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/un.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{ </span><br><span class="line">    <span class="comment">//1、创建套接字</span></span><br><span class="line">    <span class="type">int</span> sockfd = socket(AF_UNIX, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sockfd &lt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"socket success!\n"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    int opt = 1;</span></span><br><span class="line"><span class="comment">    int opt_len = sizeof(int);</span></span><br><span class="line"><span class="comment">    if(setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, opt_len) &lt; 0)</span></span><br><span class="line"><span class="comment">    {</span></span><br><span class="line"><span class="comment">        perror("setsockopt");</span></span><br><span class="line"><span class="comment">        exit(-1);</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、绑定本机IP地址和端口号</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sun_family = AF_UNIX;</span><br><span class="line">    <span class="comment">//saddr.sin_addr.s_addr = inet_addr("192.168.12.15");//将点分十进制转换为整形再赋值</span></span><br><span class="line">    <span class="built_in">strcpy</span>(saddr.sun_path, <span class="string">"mysocket"</span>);</span><br><span class="line">    <span class="type">int</span> s_len = <span class="keyword">sizeof</span>(saddr);  <span class="comment">//计算数据结构的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = bind(sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;saddr, s_len);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"bind success!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、设置监听套接字</span></span><br><span class="line">    ret = listen(sockfd, <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        perror(<span class="string">"listen"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"listen success!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、等待客户端连接</span></span><br><span class="line">    <span class="comment">//struct sockaddr_in caddr;</span></span><br><span class="line">    <span class="comment">//memset(&amp;caddr, 0, sizeof(caddr));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//int c_len = sizeof(caddr);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"wait for a new client...\n"</span>);</span><br><span class="line">    <span class="type">int</span> connfd = accept(sockfd, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(connfd &lt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        perror(<span class="string">"accept"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//5、接收数据</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">64</span>] = {<span class="number">0</span>};</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    {   </span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">        ret = read(connfd, buf, <span class="number">64</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            perror(<span class="string">"read"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"client leave!\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"recv %dbytes: %s\n"</span>, ret, buf);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    close(connfd);</span><br><span class="line">    close(sockfd);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">} </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>客户端</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*===============================================</span></span><br><span class="line"><span class="comment">*   文件名称：client.c</span></span><br><span class="line"><span class="comment">*   创 建 者：     </span></span><br><span class="line"><span class="comment">*   创建日期：2023年04月11日</span></span><br><span class="line"><span class="comment">*   描    述：</span></span><br><span class="line"><span class="comment">================================================*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>          <span class="comment">/* See NOTES */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/ip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/un.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{ </span><br><span class="line">    <span class="comment">//1、创建套接字</span></span><br><span class="line">    <span class="type">int</span> sockfd = socket(AF_UNIX, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sockfd &lt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"socket success!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sun_family = AF_UNIX;</span><br><span class="line">    <span class="built_in">strcpy</span>(saddr.sun_path, <span class="string">"mysocket"</span>);</span><br><span class="line">    <span class="type">int</span> s_len = <span class="keyword">sizeof</span>(saddr);  <span class="comment">//计算数据结构的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = connect(sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;saddr, s_len);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"link success!\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//5、接收数据</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">64</span>] = {<span class="number">0</span>};</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        fgets(buf, <span class="number">64</span>, <span class="built_in">stdin</span>);</span><br><span class="line">        write(sockfd, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    close(sockfd);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">} </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>SQLite3还提供了许多其他有用的命令。以下是一些常用的命令：</p><ol><li><p>.mode 命令可以用于设置输出模式，常用的模式有列模式（column）、列表模式（list）和 CSV 模式（csv）等。</p></li><li><p>.headers on/off 可以用于开启或关闭列头，方便查看查询结果。</p></li><li><p>.tables 可以用于查看数据库中所有表的名称。</p></li><li><p>.schema 表名 可以用于查看指定表的结构，包括列名称、数据类型和约束等。</p></li><li><p>.backup 文件名 可以用于将数据库备份到指定的文件中。</p></li><li><p>.restore 文件名 可以用于从指定的备份文件中还原数据库。</p></li><li><p>.dump 可以用于将整个数据库导出为 SQL 语句，方便备份或迁移。</p></li><li><p>.exit 可以用于退出 SQLite3。</p></li></ol><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sqlite3.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mycallback</span><span class="params">( <span class="type">void</span> * para ,<span class="type">int</span> f_num ,<span class="type">char</span> **f_value,<span class="type">char</span> **f_name)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    sqlite3 * db;</span><br><span class="line">    <span class="type">char</span> * errmsg;</span><br><span class="line">    <span class="type">int</span> ret = sqlite3_open(<span class="string">"my.db"</span>,&amp;db);</span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error:%s\n"</span>,sqlite3_errmsg(db));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"open ok\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>  sql[<span class="number">1024</span>]={<span class="number">0</span>};</span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">"create table login(num char,pass char);"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line"><span class="comment">//    if(sqlite3_exec(db,sql,NULL,NULL,&amp;errmsg)!=0){</span></span><br><span class="line"><span class="comment">//        printf("create:%s\n",errmsg);</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">    <span class="type">char</span> num[<span class="number">64</span>]={<span class="string">"111111"</span>};</span><br><span class="line">    <span class="type">char</span> pass[<span class="number">64</span>]={<span class="string">"222222"</span>};</span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">"insert into login values('%s','%s');"</span>,num,pass);</span><br><span class="line">    <span class="keyword">if</span>(sqlite3_exec(db,sql,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;errmsg)!=<span class="number">0</span>){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"insert:%s\n"</span>,errmsg);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(sql,<span class="number">0</span>,<span class="number">1024</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(sql,<span class="string">"select * from login;"</span>);</span><br><span class="line">    <span class="keyword">if</span>(sqlite3_exec(db,sql,mycallback,<span class="literal">NULL</span>,&amp;errmsg)!=<span class="number">0</span>){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"select:%s\n"</span>,errmsg);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    sqlite3_close(db);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mycallback</span><span class="params">( <span class="type">void</span> * para ,<span class="type">int</span> f_num ,<span class="type">char</span> **f_value,<span class="type">char</span> **f_name)</span>{</span><br><span class="line">    <span class="type">int</span> num =f_num;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>){</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i){</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%16s  "</span>,f_name[i]);</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%16s  "</span>,f_value[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态库和动态库的编译</title>
      <link href="/2023/04/02/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93%E7%9A%84%E7%BC%96%E8%AF%91/"/>
      <url>/2023/04/02/%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93%E7%9A%84%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><p>静态库是在编译期间将库代码和应用程序代码合并到一个可执行文件中的库。因此，静态库的大小比较大，但是它的优点是在程序运行时不需要加载库文件，因此执行速度比较快。静态库的文件扩展名通常为.a 或 .lib。</p><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/%E9%9D%99%E6%80%81%E5%BA%93.svg" alt="静态库"></p><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><p>动态库是在程序运行时才加载的库，因此它的文件大小比较小。动态库的优点是多个程序可以共享同一个动态库，从而节省系统资源。但是，与静态库相比，它的执行速度较慢。动态库的文件扩展名通常为.so 或 .dll。</p><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/typora/%E5%8A%A8%E6%80%81%E5%BA%93%20%EF%BC%88%E5%85%B1%E4%BA%AB%E5%BA%93%EF%BC%89.svg" alt="动态库 （共享库）"></p><h2 id="静态库和动态库的区别"><a href="#静态库和动态库的区别" class="headerlink" title="静态库和动态库的区别"></a>静态库和动态库的区别</h2><p>静态库和动态库都是用于存储编译后的二进制代码和函数库的文件。静态库和动态库的主要区别在于它们在程序编译期和运行期的使用不同。</p><blockquote><p>总的来说，静态库适合于小型应用程序和独立运行的程序，而动态库适合于大型应用程序和需要共享库的程序。</p></blockquote><blockquote><p>三种文件：</p><ul><li>头文件 .h</li><li>功能文件 .c</li><li>主文件 .c</li></ul><p>位置：</p><ul><li>头文件一般放在include文件夹里面</li><li>打包成库的一般就是功能文件，放在lib目录下</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 动态库 </tag>
            
            <tag> 静态库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言进程</title>
      <link href="/2023/03/31/C%E8%AF%AD%E8%A8%80%E8%BF%9B%E7%A8%8B/"/>
      <url>/2023/03/31/C%E8%AF%AD%E8%A8%80%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="程序和进程"><a href="#程序和进程" class="headerlink" title="程序和进程"></a>程序和进程</h2><blockquote><p>程序：是一些二进制、数据的有序集合，没有被加载到内存。没有“生命”</p><p>进程：程序执行的一次的过程，资源分配的总成</p></blockquote><h4 id="程序运行状态"><a href="#程序运行状态" class="headerlink" title="程序运行状态"></a>程序运行状态</h4><blockquote><ul><li>运行态：此时进程或者正在运行，或者准备运行</li><li>等待态：（挂起）此时进程在等待一个事件的发生或某种系统资源<ul><li>可中断</li><li>不可中断</li></ul></li><li>停止态：此时进程被中止</li><li>死亡态：（僵尸态）这是一个已终止的进程，但还在进程还在进程向量组中占有一个task_struct结构</li></ul></blockquote><h4 id="进程状态图"><a href="#进程状态图" class="headerlink" title="进程状态图"></a>进程状态图</h4><p><img src="https://typora-1307795383.cos.ap-chengdu.myqcloud.com/image-20230331144441349.png"></p><h4 id="进程相关命令"><a href="#进程相关命令" class="headerlink" title="进程相关命令"></a>进程相关命令</h4><h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">ps -ef</span><br><span class="line"></span><br><span class="line">ps -aux 有个状态STAT标识</span><br><span class="line"></span><br><span class="line">top</span><br><span class="line"></span><br><span class="line">nice</span><br><span class="line"></span><br><span class="line">renice</span><br><span class="line"></span><br><span class="line">kill</span><br><span class="line"></span><br><span class="line">bg 要先jobs获取一个序号，然后用bg 序号，把程序移入后台</span><br><span class="line"></span><br><span class="line">fg 和bg用法一样</span><br><span class="line"></span><br><span class="line">### 系统调用</span><br></pre></td></tr></tbody></table></figure><h4 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">pid_t</span> <span class="title function_">fork</span><span class="params">(<span class="type">void</span>)</span>; </span><br><span class="line"><span class="comment">//功能：创建一个子进程出来 返回值：0表示子进程，大于0表示父进程，-1出错</span></span><br></pre></td></tr></tbody></table></figure><h4 id="vfork"><a href="#vfork" class="headerlink" title="vfork"></a>vfork</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">pid_t</span> <span class="title function_">vfork</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//功能：创建一个子进程</span></span><br><span class="line"><span class="comment">//返回值：0表示子进程，大于0表示父进程，-1出错</span></span><br><span class="line"><span class="comment">//一定是子进程先运行，并且子进程不结束exit()或者不调用exec函数簇，父进程不会正确运行（应该是同一片空间，子进程不释放，父进程就不能访问，故所以会出现段错误）</span></span><br></pre></td></tr></tbody></table></figure><h4 id="exec函数族"><a href="#exec函数族" class="headerlink" title="exec函数族"></a>exec函数族</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execl</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">const</span> <span class="type">char</span> *arg, ...<span class="comment">/*(char *) NULL */</span>)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execlp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">const</span> <span class="type">char</span> *arg, ...<span class="comment">/*(char *) NULL */</span>)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execle</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">const</span> <span class="type">char</span> *arg, ..., <span class="type">char</span> *<span class="type">const</span> envp[]<span class="comment">/*(char *) NULL, char *const envp[] */</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">execv</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">char</span> *<span class="type">const</span> argv[])</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execvp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">char</span> *<span class="type">const</span> argv[])</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execvpe</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">char</span> *<span class="type">const</span> argv[], <span class="type">char</span> *<span class="type">const</span> envp[])</span></span><br></pre></td></tr></tbody></table></figure><ul><li>简单来说，<code>exec</code>函数族都是以<code>exec</code>开头，后面跟的不同字母表示不同的涵义：<ul><li><code>l</code> 表示 <code>list</code>，指代的是命令行参数列表。</li><li><code>p</code> 表示 <code>path</code>，指定搜索文件<code>file</code>时所使用的<code>path</code>变量。</li><li><code>v</code> 表示<code>vector</code>，指代的是命令行参数数组。</li><li><code>e</code> 表示 <code>environment</code>，指代的是环境变量数组。</li></ul></li><li>函数参数<ul><li><code>path</code> 表示要执行的程序路径，可以是绝对路径或是相对路径。</li><li><code>file</code> 表示要执行的程序名称，如果该参数中包含<code>/</code>字符则视为路径名并直接执行，否则则视为单独的文件名，系统将会根据环境变量<code>PATH</code>中设置的路径顺序去搜索指定的文件。</li><li><code>argv</code> 表示命令行参数的矢量数组</li><li><code>envp</code> 表示带有该参数的<code>exec</code>函数可以在调用时指定一个环境变量数组，其他不带该参数的<code>exec</code>函数则使用调用进程的环境变量。</li><li><code>arg</code> 表示程序的第0个参数，也就是程序名本身，相当于<code>argv[0]</code>。</li><li><code>...</code> 表示命令行参数列表，调用相应程序时有多少个命令行参数就需要有多少个输入参数项。</li></ul></li><li>返回值<ul><li>函数执行成功不会返回，若执行失败则返回-1，失败原因会记录在<code>error</code>中。</li></ul></li></ul><p>事实上，这6个函数中真正的系统调用只有<code>execve</code>函数，其它5个都是库函数，它们最终都会调用<code>execve</code>这个系统调用。</p><h4 id="进程退出"><a href="#进程退出" class="headerlink" title="进程退出"></a>进程退出</h4><h5 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span>;</span><br><span class="line">功能：主动结束进程</span><br><span class="line">status：进程退出时告诉别人一个状态（回收它的人）</span><br></pre></td></tr></tbody></table></figure><h5 id="exit-1"><a href="#exit-1" class="headerlink" title="_exit"></a>_exit</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> _exit(<span class="type">int</span> status);</span><br><span class="line">功能：主动结束进程</span><br><span class="line">status：进程退出时告诉别人一个状态（回收它的人）</span><br></pre></td></tr></tbody></table></figure><p>区别：exit退出时会清空缓冲，_exit不清空IO缓冲区</p><h4 id="进程回收·"><a href="#进程回收·" class="headerlink" title="进程回收·"></a>进程回收·</h4><h5 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">pid_t</span> <span class="title function_">wait</span><span class="params">(<span class="type">int</span> *wstatus)</span>;</span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">wait</span><span class="params">(<span class="type">int</span> *wstatus)</span>;</span><br><span class="line"><span class="comment">//功能：回收已经处于僵尸态（已经结束）的进程</span></span><br><span class="line"><span class="comment">//返回值：成功返回回收的子进程ID号，失败返回-1</span></span><br><span class="line">wstatus：子进程结束时要传递的状态。如果不在意子进程退出的状态就写<span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line">父进程调用wait回收子进程的资源，子进程如果执行完了父进程才会从wait继续执行，否则wait会阻塞</span><br></pre></td></tr></tbody></table></figure><h5 id="waitpid"><a href="#waitpid" class="headerlink" title="waitpid"></a>waitpid</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">pid_t</span> <span class="title function_">waitpid</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> *wstatus, <span class="type">int</span> options)</span>;</span><br><span class="line"><span class="comment">//功能：回收已经结束的子进程</span></span><br><span class="line"><span class="comment">//返回值：如果成功回收返回子进程的ID，如果是非阻塞情况下没有子进程结束，返回0.失败返回-1</span></span><br><span class="line">pid：指定要回收的进程号</span><br><span class="line">&gt; <span class="number">0</span> 表示一个具体的进程ID</span><br><span class="line"><span class="number">-1</span> 表示可以回收任意子进程</span><br><span class="line">wstatus：子进程退出时的状态</span><br><span class="line">options：waitpid的工作模式，可以是阻塞也可以非阻塞</span><br><span class="line"><span class="number">0</span>表示阻塞，WNOHANG表示非阻塞</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">wait</span><span class="params">(<span class="type">int</span> *wstatus)</span>;</span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">waitpid</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> *wstatus, <span class="type">int</span> options)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">waitid</span><span class="params">(<span class="type">idtype_t</span> idtype, <span class="type">id_t</span> id, <span class="type">siginfo_t</span> *infop, <span class="type">int</span> options)</span>;</span><br><span class="line">📝<span class="comment">//pid的值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The value of pid can be:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">💬&lt;-1   meaning wait for any child process whose process group ID is equal to theabsolute value of pid.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">⏩-1    meaning wait for any child process.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">⏩ 0    meaning  wait  for  any  child process whose process group ID is equal to that of the calling process at the ti me of the call to waitpid().</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">⏩&gt;0    meaning wait for the child whose process ID is equal to the value of pid.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">📝<span class="comment">//参数options</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The value of options is an OR of zero or more of the following constants:</span></span><br><span class="line"><span class="comment">⏩WNOHANG</span></span><br><span class="line"><span class="comment">       return immediately if no child has exited.</span></span><br><span class="line"><span class="comment">⏩WUNTRACED</span></span><br><span class="line"><span class="comment">       also return if a child has stopped (but not traced via ptrace(2)).   Status  for  traced children which have stopped is provided even if this option is not specified.</span></span><br><span class="line"><span class="comment">⏩WCONTINUED (since Linux 2.6.10)</span></span><br><span class="line"><span class="comment">       also return if a stopped child has been resumed by delivery of SIGCONT.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h4 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h4><p>创建步骤</p><blockquote><ul><li><p>创建子进程，退出父</p><ul><li>fork（）</li></ul></li><li><p>子进程</p><ul><li>setsid()</li></ul></li><li><p>改变</p><ul><li>chdir(“/temp”);</li><li>umask(0);</li></ul></li><li><p>关闭所有</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; getdtablesize();i++){</span><br><span class="line">    close(i);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//getdtablesize()是获取最大的文件标识符</span></span><br></pre></td></tr></tbody></table></figure></li></ul></blockquote><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">        <span class="type">pid_t</span> pt=fork();</span><br><span class="line">        <span class="keyword">if</span>(pt&lt;<span class="number">0</span>){</span><br><span class="line">                perror(<span class="string">"fork()"</span>);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(pt&gt;<span class="number">0</span>){</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">        setsid();</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>!=chdir(<span class="string">"/tmp"</span>)){</span><br><span class="line">                perror(<span class="string">"chdir"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;getdtablesize();i++){</span><br><span class="line">                close(i);</span><br><span class="line">        }</span><br><span class="line">        umask(<span class="number">0</span>);</span><br><span class="line">        <span class="type">time_t</span> tt;</span><br><span class="line">        FILE *f=fopen(<span class="string">"log_time.txt"</span>,<span class="string">"a+"</span>);</span><br><span class="line">                <span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line">                        time(&amp;tt);</span><br><span class="line">                        <span class="built_in">fprintf</span>(f,ctime(&amp;tt));</span><br><span class="line">                    sleep(<span class="number">1</span>);</span><br><span class="line">                }</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><blockquote><p>概念：轻量级的进程，任务调度的最小单位。</p><p>为了方便任务的切换，线程们共享同一个进程的空间。那么切换同一个进程下的任务时就不需要再切换内存了</p></blockquote><h3 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *thread, <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr,</span></span><br><span class="line"><span class="params">                   <span class="type">void</span> *(*start_routine) (<span class="type">void</span> *), <span class="type">void</span> *arg)</span>;</span><br><span class="line"><span class="comment">//功能：在系统中创建出来一个线程（任务）</span></span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回非0</span></span><br><span class="line">thread：线程对象</span><br><span class="line">attr：线程属性，一般使用系统提供的默认属性，写<span class="literal">NULL</span></span><br><span class="line">start_routine：线程要去执行的函数名</span><br><span class="line">arg：要传递给start_routine所指向函数的参数</span><br></pre></td></tr></tbody></table></figure><h3 id="线程退出"><a href="#线程退出" class="headerlink" title="线程退出"></a>线程退出</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pthread_exit</span><span class="params">(<span class="type">void</span> *retval)</span>;</span><br><span class="line"><span class="comment">//功能：主动退出一个线程</span></span><br><span class="line"><span class="comment">//retval：退出时要传递的信息</span></span><br></pre></td></tr></tbody></table></figure><h3 id="线程回收"><a href="#线程回收" class="headerlink" title="线程回收"></a>线程回收</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_join</span><span class="params">(<span class="type">pthread_t</span> thread, <span class="type">void</span> **retval)</span>;</span><br><span class="line"><span class="comment">//功能：阻塞等待子线程的退出</span></span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回错误号</span></span><br><span class="line">thread：要回收的子线程</span><br><span class="line">retval：用于存放子线程退出时指向的地址空间</span><br></pre></td></tr></tbody></table></figure><h3 id="线程分离"><a href="#线程分离" class="headerlink" title="线程分离"></a>线程分离</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_detach</span><span class="params">(<span class="type">pthread_t</span> thread)</span>;</span><br><span class="line"><span class="comment">//功能：使当前线程和thread表示的线程断开联系</span></span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回错误号</span></span><br><span class="line">thread：要分离的线程</span><br></pre></td></tr></tbody></table></figure><h3 id="线程间通讯方式"><a href="#线程间通讯方式" class="headerlink" title="线程间通讯方式"></a>线程间通讯方式</h3><h4 id="同步和互斥"><a href="#同步和互斥" class="headerlink" title="同步和互斥"></a>同步和互斥</h4><h5 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h5><p>相互排斥，只能存在一个。表示系统中的一种资源，主要用于保护代码，这种资源争抢到个数就会减一，释放出来就会加一</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_init</span><span class="params">(<span class="type">pthread_mutex_t</span>  *mutex,  <span class="type">const</span>  pthread_mutex‐</span></span><br><span class="line"><span class="params">       <span class="type">attr_t</span> *mutexattr)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//申请锁</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放锁</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li><p>练习</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line"><span class="type">pthread_mutex_t</span> pmt;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">compare</span><span class="params">()</span>{</span><br><span class="line"><span class="comment">//void *compare(){</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _LOCK_</span></span><br><span class="line">pthread_mutex_lock(&amp;pmt);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span>(a!=b){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a=%d , b=%d\n"</span>,a,b);</span><br><span class="line">}</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _LOCK_</span></span><br><span class="line">pthread_mutex_unlock(&amp;pmt);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">pthread_mutex_init(&amp;pmt,<span class="literal">NULL</span>);</span><br><span class="line"><span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="type">pthread_t</span> pt;</span><br><span class="line"><span class="type">int</span> flag=pthread_create(&amp;pt,<span class="literal">NULL</span>,compare,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(flag!=<span class="number">0</span>)</span><br><span class="line">perror(<span class="string">"pthread_create"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _LOCK_ </span></span><br><span class="line">pthread_mutex_lock(&amp;pmt);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">count++;</span><br><span class="line">a=count;</span><br><span class="line">b=count;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _LOCK_</span></span><br><span class="line">pthread_mutex_unlock(&amp;pmt);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><h5 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h5><h6 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h6><p>用于表示系统中的某种资源，这种资源的个数可以不定。需要程序申请或者释放资源</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_init</span><span class="params">(<span class="type">sem_t</span> *sem, <span class="type">int</span> pshared, <span class="type">unsigned</span> <span class="type">int</span> value)</span>;</span><br><span class="line"><span class="comment">//功能：在系统中创建出来一种资源并初始化个数</span></span><br><span class="line">sem：信号量对象</span><br><span class="line">pshared：<span class="number">0</span> 表示信号量作用于线程之间，非<span class="number">0</span>表示用于进程之间</span><br><span class="line">value：信号量初始|个数</span><br></pre></td></tr></tbody></table></figure><h6 id="生产者-V操作-："><a href="#生产者-V操作-：" class="headerlink" title="生产者(V操作)："></a>生产者(V操作)：</h6><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_post</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"><span class="comment">//功能：向系统提交一个资源，使系统中这种资源的个数+1</span></span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回-1</span></span><br><span class="line">sem:要操作的对象</span><br></pre></td></tr></tbody></table></figure><h6 id="消费者-P操作"><a href="#消费者-P操作" class="headerlink" title="消费者(P操作):"></a>消费者(P操作):</h6><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_wait</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"><span class="comment">//功能：向系统申请某个资源的使用权，使系统中这种资源的个数-1，如果系统中这个资源的个数为0，程序会阻塞等待资源，直到可以申请到该资源</span></span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回-1</span></span><br><span class="line">sem:要操作的信号量对象</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> a[<span class="number">20</span>]={<span class="number">-1</span>};</span><br><span class="line"><span class="type">sem_t</span> st_w;</span><br><span class="line"><span class="type">sem_t</span> st_r;</span><br><span class="line"><span class="type">void</span> * <span class="title function_">count_length</span><span class="params">()</span>{</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line">sem_wait(&amp;st_w);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"length = %ld\n"</span>,<span class="built_in">strlen</span>(a)<span class="number">-1</span>);</span><br><span class="line">sem_post(&amp;st_r);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line"><span class="type">pthread_t</span> pt;</span><br><span class="line">sem_init(&amp;st_w,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">sem_init(&amp;st_r,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">pthread_create(&amp;pt,<span class="literal">NULL</span>,count_length,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line">sem_wait(&amp;st_r);</span><br><span class="line">fgets(a,<span class="keyword">sizeof</span>(a)<span class="number">-1</span>,<span class="built_in">stdin</span>);</span><br><span class="line">sem_post(&amp;st_w);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="无名管道"><a href="#无名管道" class="headerlink" title="无名管道"></a>无名管道</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fd_pair</span> {</span></span><br><span class="line">    <span class="type">long</span> fd[<span class="number">2</span>];</span><br><span class="line">};</span><br><span class="line"><span class="type">int</span> <span class="title function_">pipe</span><span class="params">(<span class="type">int</span> fd[<span class="number">2</span>])</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//功能：在系统中创建一个特殊的管道文件(文件没有实体)，只能够用于亲缘间的进程</span></span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回-1</span></span><br><span class="line">fd:用于存放管道读端和写端的文件描述符</span><br><span class="line">    fd[<span class="number">1</span>]为写入端（写端）</span><br><span class="line">    fd[<span class="number">0</span>]为读取端（读端）</span><br><span class="line"><span class="comment">//一定要在fork()之前用pipe</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://store.codedrawing.top/Z%60H%5B79HR@HRU@GT1E%5D%7DK%7BNV.png" alt="img"></p><blockquote><p>父进程中的read，会卡住（如果不加sleep(5)），因为子进程中write写入后，马上就read(fd[0])，会把内容从fd[0]中读出，所以fd[0]中没有东西可读就会卡主。</p></blockquote><h5 id="读端"><a href="#读端" class="headerlink" title="读端"></a>读端</h5><blockquote><p>写段存在：</p><p>​如果管道中有数据，那么read可以正常读取，并且返回读取到的字节数;如果管道中没有数据，read会阻塞等待管道中的数据（例子见上面）</p><p>写端不存在：</p><p>​如果管道中有数据，read还是正常读取；管道中没有数据read直接返回0，表示已经关闭</p></blockquote><h5 id="写端"><a href="#写端" class="headerlink" title="写端"></a>写端</h5><blockquote><p>读端存在：</p><p>​如果剩余空间大于要写入的字节数，write正常写入；如果管道剩余空间比写入的字节数小，那么write就会写一部分进去然后阻塞。</p><p>读端不存在：</p><p>​往管道里面写入数据会使管道破裂</p></blockquote><p><code>注意：管道中的数据是临时的，可以被读走，当读取了管道的内容是，管道中被读的内容会消失</code></p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> fd[<span class="number">2</span>];</span><br><span class="line">pipe(fd);</span><br><span class="line">close(fd[<span class="number">0</span>]);</span><br><span class="line"><span class="type">pid_t</span> pid=fork();</span><br><span class="line"><span class="keyword">if</span>(pid&lt;<span class="number">0</span>){</span><br><span class="line">perror(<span class="string">"fork"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>){</span><br><span class="line"><span class="type">char</span> ch =<span class="number">10</span>;</span><br><span class="line">write(fd[<span class="number">1</span>],&amp;ch,<span class="number">1</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="type">int</span> status;</span><br><span class="line">wait(&amp;status);</span><br><span class="line"><span class="keyword">if</span>(WIFEXITED(status)==<span class="literal">true</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"normal\n"</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"abnormal\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(WIFSIGNALED(status)==<span class="literal">true</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sinal killed\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signal no.%d\n"</span>,status &amp; <span class="number">0x7f</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"none signal\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://store.codedrawing.top/image-20230403135548200.png" alt="image-20230403135548200"></p><h4 id="有名管道"><a href="#有名管道" class="headerlink" title="有名管道"></a>有名管道</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mkfifo</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">mode_t</span> mode)</span>;</span><br><span class="line"><span class="comment">//功能：创建一个管道文件</span></span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回-1</span></span><br><span class="line">pathname：文件名（包含路径）</span><br><span class="line">mode：创建文件时的权限 <span class="number">0777</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="comment">//创建一个管道文件，然后再另外一个终端对该管道进行写入内容，然后该程序把内容读出来</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line"><span class="type">char</span> buf[<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> mkfifo_o=mkfifo(<span class="string">"/tmp/test_mkfifo.txt"</span>,<span class="number">0775</span>);</span><br><span class="line"><span class="keyword">if</span>(mkfifo_o == <span class="number">-1</span>){</span><br><span class="line"><span class="keyword">if</span>(errno != EEXIST){<span class="comment">//errno表示错误号  EEXIST 表示是否存在 </span></span><br><span class="line">perror(<span class="string">"mkfifo"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"create success\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line"><span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="type">int</span> fifo=open(<span class="string">"/tmp/test_mkfifo.txt"</span>,O_RDWR); read(fifo,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,buf);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h4><h5 id="软件模拟的终端"><a href="#软件模拟的终端" class="headerlink" title="软件模拟的终端"></a>软件模拟的终端</h5><h6 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h6><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">kill</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> sig)</span>;</span><br><span class="line"><span class="comment">//功能：向一个进程发一个信号</span></span><br><span class="line"><span class="comment">//返回值：成功0，失败-1</span></span><br><span class="line">pid：要接收信号的进程</span><br><span class="line">&gt;<span class="number">0</span>：一个具体的进程号</span><br><span class="line"><span class="number">-1</span>：除了系统进程外的所有进程</span><br><span class="line">sig：要发送的信号</span><br><span class="line"><span class="comment">//向自己发送信号：kill(getpid(), 2);</span></span><br></pre></td></tr></tbody></table></figure><h6 id="raise"><a href="#raise" class="headerlink" title="raise"></a>raise</h6><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">raise</span><span class="params">(<span class="type">int</span> sig)</span>;</span><br><span class="line"><span class="comment">//功能：给进程添加一个定时器开始计时</span></span><br><span class="line"><span class="comment">//返回值：第一次定时返回0，之后的定时都会返回上一次定时器还剩多少秒</span></span><br><span class="line">seconds：定时多少秒</span><br><span class="line"><span class="number">0</span>取消定时器功能</span><br></pre></td></tr></tbody></table></figure><h6 id="alarm"><a href="#alarm" class="headerlink" title="alarm"></a>alarm</h6><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">alarm</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seconds)</span>;</span><br></pre></td></tr></tbody></table></figure><h6 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h6><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pause</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//功能：暂停进程，除非有新的信号（事件）产生程序才会被唤醒</span></span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回-1</span></span><br></pre></td></tr></tbody></table></figure><h6 id="⭐️-signal"><a href="#⭐️-signal" class="headerlink" title="⭐️ signal"></a>⭐️ signal</h6><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*<span class="type">sighandler_t</span>)</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">sighandler_t</span> <span class="title function_">signal</span><span class="params">(<span class="type">int</span> signum, <span class="type">sighandler_t</span> handler)</span>;</span><br><span class="line"><span class="comment">//功能：注册某个信号的处理方式</span></span><br><span class="line">signum：要注册的信号</span><br><span class="line">handler：要处理的方式</span><br><span class="line">自定义：处理</span><br><span class="line">SIG_IGN：忽略这个信号</span><br><span class="line">SIG_DFL：使用这个信号默认的处理方式</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在Linux中，使用kill -l查看所有信号宏</p><p><img src="https://store.codedrawing.top/image-20230403171741531.png" alt="image-20230403171741531"></p><p>常见的信号含义</p><ul><li>SIGHUP       终端关闭会发送时(挂起)              </li><li>SIGINT         终止当前进程时(ctrl + c)       </li><li>SIGQUIT      停止当前进程时(ctrl + <code>\</code>)     </li><li>SIGKILL       杀死进程时(并且不能被阻塞、处理和忽略)                      </li><li>SIGILL          文件本身出错,或者数据段、堆栈溢出时</li><li>SIGFPE         算术运算错误时(溢出、除数为0)时</li><li>SIGUSR2      用户自定信号        </li><li>SIGALRM      闹钟信号     由int alarm(int)发出</li><li>SIGSTOP       ctrl+z  挂起进程        转换成后台进程  </li><li>SIGCHLD      子进程改变状态时，父进程会收到这个信号</li><li>SIGABORT    用于结束进程</li></ul></blockquote><p>例子</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">signalhander</span><span class="params">(<span class="type">int</span> signum)</span>{</span><br><span class="line">    <span class="keyword">if</span> (signum==SIGCHLD){</span><br><span class="line">        <span class="type">int</span> status;</span><br><span class="line">        waitpid(<span class="number">-1</span>,&amp;status,WNOHANG);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"type:%d\n"</span>,status &amp; <span class="number">0x7f</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> fd=fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fd==<span class="number">-1</span>){</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span>(fd==<span class="number">0</span>){</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">        raise(SIGKILL);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        signal(SIGCHLD,signalhander);</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i++);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="进程间通信（IPC对象）"><a href="#进程间通信（IPC对象）" class="headerlink" title="进程间通信（IPC对象）"></a>进程间通信（IPC对象）</h2><p>共享内存，消息队列，信号灯集</p><p>都需要内核来帮助通信</p><blockquote><p>在linux下可以通过ipcs命令查询ipc对象</p></blockquote><h3 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h3><p><code>共享内存</code>是一种最为高效的进程间通信方式，<code>进程</code>可以直接读写内存，而不需要任何数据的拷贝为了在多个进程间交换信息，内核专门留出了一块内存区，可以由需要访问的进程将其<br><code>映射</code>到自己的私有地址空间。进程就可以直接读写这一内存区而<code>不需要进行数据的拷贝</code>，从而大大提高的效率。</p><p>由于多个进程共享一段内存， 因此也需要依靠某种同步机制，如互斥锁和信号量等。</p><p>表示ipc对象的key：</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">key_t</span> <span class="title function_">ftok</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> * pathname，<span class="type">int</span> proj. _id)</span>;</span><br><span class="line">功能:用文件的inode节点号和用户提供的数据组合生成一个key</span><br><span class="line">返回值:成功返回key，失败返回<span class="number">-1</span></span><br><span class="line">pathname:文件名(包含路径)</span><br><span class="line">proj_id:用户提供的数据</span><br></pre></td></tr></tbody></table></figure><h4 id="1、打开、创建共享内存对象"><a href="#1、打开、创建共享内存对象" class="headerlink" title="1、打开、创建共享内存对象"></a>1、打开、创建共享内存对象</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">shmget</span><span class="params">(<span class="type">key_t</span> key, <span class="type">size_t</span> size， <span class="type">int</span> shmf1g)</span>;</span><br><span class="line">功能:创建/打开一一个共享内存对象</span><br><span class="line">返回值:成功返回ID号，失败返回<span class="number">-1</span> </span><br><span class="line">key:表示要打开或者创建一个对象的<span class="string">"密钥"</span></span><br><span class="line">    可以写<span class="number">0</span>或者IPC_PRIVATE表示共享内存对象为私有</span><br><span class="line">size:要创建的共享内存大小</span><br><span class="line">shmf1g:打开或者创建时的权限</span><br><span class="line">    IPC_CREAT:不存在则创建</span><br><span class="line">    IPC_EXCL:存在(如果加上了IPC_CREAT) 就报错</span><br><span class="line">    创建需要给权限 | <span class="number">0666</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="2、映射空间地址"><a href="#2、映射空间地址" class="headerlink" title="2、映射空间地址"></a>2、映射空间地址</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syspes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sysm.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">shmat</span><span class="params">(<span class="type">int</span> shmid, <span class="type">const</span> <span class="type">void</span> *shmaddr, <span class="type">int</span> shmflg)</span>;</span><br><span class="line"><span class="comment">//功能：把内核中的共享内存空间映射到用户空间</span></span><br><span class="line"><span class="comment">//返回值：成功返回映射后的空间地址，失败返回(void *)-1,表示0XFFFF;</span></span><br><span class="line">shmid:共享内存的id号</span><br><span class="line">shamddr：可以指定要映射的空间地址</span><br><span class="line">    <span class="literal">NULL</span>：表示系统决定</span><br><span class="line">    <span class="number">0</span>X...：表示要把内核空间映射到这个地址</span><br><span class="line">fhmflg：共享内存的操作权限（读写）</span><br><span class="line">    SHM_RDONLY：表示只读（不用）</span><br><span class="line">    <span class="number">0</span>：表示可读可写</span><br></pre></td></tr></tbody></table></figure><h4 id="3、取消映射"><a href="#3、取消映射" class="headerlink" title="3、取消映射"></a>3、取消映射</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">&lt;sys/ipc.h&gt;</span><br><span class="line">&lt;sys/types.h&gt;</span><br><span class="line">&lt;sys/shm.h&gt;</span><br><span class="line"><span class="type">int</span> <span class="title function_">shmdt</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *shmaddr)</span>;</span><br><span class="line">shmaddr:是指向共享内存段的指针，它指向的内存区域将被从进程的地址空间中分离出来。</span><br><span class="line">返回值:为<span class="number">0</span>表示成功，<span class="number">-1</span>表示失败。在函数执行失败时，可以通过全局变量errno获取具体的错误信息。</span><br></pre></td></tr></tbody></table></figure><h4 id="4、删除共享内存对象"><a href="#4、删除共享内存对象" class="headerlink" title="4、删除共享内存对象"></a>4、删除共享内存对象</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sysm.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">shmctl</span><span class="params">(<span class="type">int</span> shmid, <span class="type">int</span> cmd, <span class="keyword">struct</span> shmid_ds *buf)</span>;</span><br><span class="line">/mid_ds结构体</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shmid_ds</span> {</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ipc_perm</span> <span class="title">shm_perm</span>;</span>    <span class="comment">/* Ownership and permissions */</span></span><br><span class="line">    <span class="type">size_t</span>          shm_segsz;   <span class="comment">/* Size of segment (bytes) */</span></span><br><span class="line">    <span class="type">time_t</span>          shm_atime;   <span class="comment">/* Last attach time */</span></span><br><span class="line">    <span class="type">time_t</span>          shm_dtime;   <span class="comment">/* Last detach time */</span></span><br><span class="line">    <span class="type">time_t</span>          shm_ctime;   <span class="comment">/* Creation time/time of last modification via shmctl() */</span></span><br><span class="line">    <span class="type">pid_t</span>           shm_cpid;    <span class="comment">/* PID of creator */</span></span><br><span class="line">    <span class="type">pid_t</span>           shm_lpid;    <span class="comment">/* PID of last shmat(2)mdt(2) */</span></span><br><span class="line">    <span class="type">shmatt_t</span>        shm_nattch;  <span class="comment">/* No. of current attaches */</span></span><br><span class="line">    ...</span><br><span class="line">};</span><br><span class="line"><span class="comment">//功能：整体控制共享内存对象</span></span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回-1</span></span><br><span class="line">shimid：共享内存对象ID号</span><br><span class="line">cmd:要执行的操作</span><br><span class="line">    IPC_STAT 获取对象属性</span><br><span class="line">    IPC_SET 设置对象属性</span><br><span class="line">IPC_RMID  删除对象</span><br><span class="line">buf：用于设置或者获取对象的属性，如果是删除对象，写<span class="literal">NULL</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注：删除对象不是直接删除，而是标记为删除对象</p></blockquote><h4 id="共享内存的删除机制"><a href="#共享内存的删除机制" class="headerlink" title="共享内存的删除机制"></a>共享内存的删除机制</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">在C语言中，删除共享内存需要经过以下步骤：</span><br><span class="line"></span><br><span class="line">1. 获取共享内存的标识符（也称为键值）。</span><br><span class="line">2. 使用标识符获取共享内存的ID（也称为shmid）。</span><br><span class="line">3. 使用shmid获取指向共享内存的指针。</span><br><span class="line">4. 标记共享内存为删除状态，可以使用shmctl函数IPC<span class="built_in">_</span>RMID命令。</span><br><span class="line"></span><br><span class="line">如果没有其他进程或线程正在使用该共享内存，系统会立即删除该共享内存。否则，该共享内存将一直保持在删除状态，直到所有使用它的进程或线程都标记为删除状态。</span><br><span class="line"></span><br><span class="line">需要注意的是，如果一个进程或线程在使用该共享内存时崩溃了，那么该共享内存可能会一直保持在删除状态，直到系统重启。因此，在编写使用共享内存的程序时，应该考虑到这种情况，并实现适当的错误处理机制。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">第一个标记了共享内存的删除状态 其他线程都调用 exit函数共享内存能被删除吗?</span><br><span class="line">   </span><br><span class="line">如果一个线程标记了共享内存的删除状态，但是其他线程调用了exit()函数退出了进程，那么这些线程所使用的共享内存将不会被显式地释放。因为exit()函数会终止整个进程，并且会自动释放该进程所占用的所有资源，包括共享内存。</span><br><span class="line"></span><br><span class="line">在这种情况下，共享内存将被操作系统自动释放，通常是在进程退出后立即释放。但是，具体的释放时间是由操作系统内核来决定的，因此不能保证在进程退出后立即释放共享内存。因此，在编写使用共享内存的程序时，最好在程序中显式地释放共享内存，而不要依赖于操作系统自动释放共享内存。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">key_t</span> key=ftok(<span class="string">"."</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"key=%d\n"</span>,key);</span><br><span class="line">    <span class="type">int</span> shmid =shmget(key,<span class="number">1024</span>,IPC_CREAT|<span class="number">0777</span>|IPC_EXCL);</span><br><span class="line">    <span class="keyword">if</span>(shmid==<span class="number">-1</span>){</span><br><span class="line">        <span class="keyword">if</span>(errno!=EEXIST){</span><br><span class="line">            perror(<span class="string">"shmget"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            shmid =shmget(key,<span class="number">1024</span>,<span class="number">0777</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"shmid=%d\n"</span>,shmid);</span><br><span class="line">    <span class="type">char</span> * p = shmat(shmid,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    fgets(p,<span class="number">1024</span>,<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, p);</span><br><span class="line">    shmdt(p);</span><br><span class="line">    shmctl(shmid,IPC_RMID,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>消息队列是IPC对象的一种。消息队列由消息队列ID来唯一标识。消息队列就是一个消息的列表。 用户可以在消息队列中添加消息、读取消息等。消息队列可以按照类型来发送/接收消息。</p><p>结构体</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">msgbuf</span>{</span></span><br><span class="line">    <span class="type">__syscall_slong_t</span> mtype;    <span class="comment">/* type of received/sent message */</span></span><br><span class="line">    <span class="type">char</span> mtext[<span class="number">1</span>];      <span class="comment">/* text of the message */</span></span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msqid_ds</span>{</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">ipc_perm</span> <span class="title">msg_perm</span>;</span> <span class="comment">/* structure describing operation permission */</span></span><br><span class="line">  <span class="type">__time_t</span> msg_stime;       <span class="comment">/* time of last msgsnd command */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> __msg_stime_high;</span><br><span class="line">  <span class="type">__time_t</span> msg_rtime;       <span class="comment">/* time of last msgsnd command */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> __msg_rtime_high;</span><br><span class="line">  <span class="type">__time_t</span> msg_ctime;       <span class="comment">/* time of last change */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> __msg_ctime_high;</span><br><span class="line">  <span class="type">__time_t</span> msg_stime;       <span class="comment">/* time of last msgsnd command */</span></span><br><span class="line">  <span class="type">__time_t</span> msg_rtime;       <span class="comment">/* time of last msgsnd command */</span></span><br><span class="line">  <span class="type">__time_t</span> msg_ctime;       <span class="comment">/* time of last change */</span></span><br><span class="line">  <span class="type">__syscall_ulong_t</span> __msg_cbytes; <span class="comment">/* current number of bytes on queue */</span></span><br><span class="line">  <span class="type">msgqnum_t</span> msg_qnum;       <span class="comment">/* number of messages currently on queue */</span></span><br><span class="line">  <span class="type">msglen_t</span> msg_qbytes;      <span class="comment">/* max number of bytes allowed on queue */</span></span><br><span class="line">  <span class="type">__pid_t</span> msg_lspid;        <span class="comment">/* pid of last msgsnd() */</span></span><br><span class="line">  <span class="type">__pid_t</span> msg_lrpid;        <span class="comment">/* pid of last msgrcv() */</span></span><br><span class="line">  <span class="type">__syscall_ulong_t</span> __glibc_reserved4;</span><br><span class="line">  <span class="type">__syscall_ulong_t</span> __glibc_reserved5;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="创建-x2F-打开消息队列"><a href="#创建-x2F-打开消息队列" class="headerlink" title="创建/打开消息队列"></a>创建/打开消息队列</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">msgget</span><span class="params">(<span class="type">key_t</span> key, <span class="type">int</span> msgflg)</span>;</span><br><span class="line">key：用于标识消息队列的键。</span><br><span class="line">msgflg：标志参数，用于指定创建新消息队列时的行为，或者用于访问现有消息队列时的访问权限。</span><br><span class="line">    IPC_CREAT:如果消息队列不存在，则创建它。</span><br><span class="line">    IPC_EXCL:如果消息队列已存在，则返回错误。</span><br><span class="line"><span class="number">0666</span>：指定消息队列的访问权限。</span><br><span class="line">IPC_NOWAIT：当消息队列已满或没有可读消息时，不要将进程挂起等待可用空间或消息，而是立即返回错误。</span><br><span class="line">MSG_EXCEPT：在读取消息时，只接收类型不等于指定类型的消息。此标志必须与 IPC_NOWAIT 标志结合使用。</span><br><span class="line">MSG_NOERROR：在读取消息时，如果读取的消息长度超过了接收方的缓冲区长度，则截断该消息，不返回错误。如果没有设置此标志，则读取过长的消息将返回错误。</span><br><span class="line">返回值：返回一个非负整数表示消息队列的标识符(也称为消息队列的键)。如果函数返回值为<span class="number">-1</span>，则表示出现了错误，具体错误信息可以通过查看errno变量来确定。</span><br></pre></td></tr></tbody></table></figure><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">msgsnd</span><span class="params">(<span class="type">int</span> msqid, <span class="type">const</span> <span class="type">void</span> *msgp, <span class="type">size_t</span> msgsz, <span class="type">int</span> msgflg)</span>;</span><br><span class="line">msqid：要发送到的消息队列的标识符。</span><br><span class="line">msgp：指向包含要发送的消息的指针。</span><br><span class="line">msgsz：要发送的消息的大小（以字节为单位）。</span><br><span class="line">msgflg：指定消息发送的标志。常见的标志包括IPC_NOWAIT和MSG_NOERROR等。</span><br><span class="line">返回值：成功，则<span class="string">"msgsnd"</span>返回<span class="number">0</span>，否则返回<span class="number">-1</span>并设置errno以指示错误的类型。</span><br></pre></td></tr></tbody></table></figure><h4 id="接受消息"><a href="#接受消息" class="headerlink" title="接受消息"></a>接受消息</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">msgrcv</span><span class="params">(<span class="type">int</span> msqid, <span class="type">void</span> *msgp, <span class="type">size_t</span> msgsz, <span class="type">long</span> msgtyp, <span class="type">int</span> msgflg)</span>;</span><br><span class="line">msqid：消息队列的标识符，该标识符由msgget函数返回。</span><br><span class="line">msgp：指向消息缓冲区的指针，用于存储接收到的消息。</span><br><span class="line">msgsz：接收消息缓冲区的大小，以字节为单位。如果接收到的消息大于msgsz，则会被截断。</span><br><span class="line">msgtyp：指定要接收的消息类型。</span><br><span class="line">    msgtyp大于<span class="number">0</span>，则只接收消息类型等于msgtyp的消息；</span><br><span class="line">    msgtyp等于<span class="number">0</span>，则接收队列中的第一个消息；</span><br><span class="line">    msgtyp小于<span class="number">0</span>，则接收类型小于或等于msgtyp绝对值的第一个消息。</span><br><span class="line">msgflg：指定接收消息的选项。</span><br><span class="line">    IPC_NOWAIT（非阻塞方式）</span><br><span class="line">    MSG_NOERROR（不截断消息）</span><br><span class="line">    IPC_EXCEPT（接收第一个类型不为msgtyp的消息）MSG_COPY（返回消息副本而不是原始消息）</span><br><span class="line">    也可以使用它们的按位或运算。</span><br><span class="line">返回值：msgrcv函数的返回值为接收到的消息的长度（以字节为单位），如果接收消息时出现错误，则返回<span class="number">-1</span>。可以使用errno变量来查看发生的错误类型。</span><br></pre></td></tr></tbody></table></figure><h4 id="控制消息队列"><a href="#控制消息队列" class="headerlink" title="控制消息队列"></a>控制消息队列</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">msgctl</span><span class="params">(<span class="type">int</span> msqid, <span class="type">int</span> cmd, <span class="keyword">struct</span> msqid_ds *buf)</span>;</span><br><span class="line">msqid：由msgget函数创建或获取的消息队列标识符</span><br><span class="line">cmd：控制命令，参数可取以下值：</span><br><span class="line">IPC_STAT：获取消息队列的属性信息，将其存储在buf指向的msqid_ds结构体中。</span><br><span class="line">IPC_SET：设置消息队列的属性信息，其中buf指向的msqid_ds结构体中存储了新的属性值。</span><br><span class="line">IPC_RMID：删除消息队列。删除操作，buf为<span class="literal">NULL</span>。</span><br><span class="line">返回值：返回<span class="number">0</span>表示成功，<span class="number">-1</span>表示出错，并设置errno为相应的错误代码。</span><br><span class="line">buf：msqid_ds结构体的指针，用于获取或修改消息队列的属性信息。</span><br></pre></td></tr></tbody></table></figure><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">msgbuf</span>{</span></span><br><span class="line">    <span class="type">long</span> mtype;    <span class="comment">/* type of received/sent message */</span></span><br><span class="line">    <span class="type">char</span> mtext[<span class="number">100</span>];      <span class="comment">/* text of the message */</span></span><br><span class="line">}msgbuf;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="type">int</span> key = ftok(<span class="string">"."</span>,<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> msgid=msgget(key,IPC_CREAT|<span class="number">0666</span>);</span><br><span class="line"><span class="keyword">if</span>(msgid==<span class="number">-1</span>){</span><br><span class="line">perror(<span class="string">"msgget"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"msgget success\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//发送</span></span><br><span class="line">msgbuf sndbuf={<span class="number">1</span>,<span class="string">"hello world!"</span>};</span><br><span class="line"><span class="type">int</span> retsnd = msgsnd(msgid,&amp;sndbuf,<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(retsnd==<span class="number">-1</span>){</span><br><span class="line">perror(<span class="string">"msgsnd"</span>);</span><br><span class="line"><span class="keyword">goto</span> error1;</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"msgsnd success\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收</span></span><br><span class="line">msgbuf rcvbuf;</span><br><span class="line"><span class="type">int</span> retrcv = msgrcv(msgid,&amp;rcvbuf,<span class="number">100</span>,<span class="number">0</span>,IPC_NOWAIT);</span><br><span class="line"><span class="keyword">if</span> (retrcv == <span class="number">-1</span>){</span><br><span class="line">perror(<span class="string">"msgrcv"</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"msgrcv success\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,rcvbuf.mtype);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,rcvbuf.mtext);</span><br><span class="line">error1:</span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line">msgctl(msgid,IPC_RMID,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="信号灯集"><a href="#信号灯集" class="headerlink" title="信号灯集"></a>信号灯集</h3><p>概念:多种信号量的集合，每种信号量下可以多个信号量</p><p>1、创建、打开信号灯集对象</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syspes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sysm.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">semget</span><span class="params">(<span class="type">key_t</span> key, <span class="type">int</span> nsems, <span class="type">int</span> semflg)</span>;</span><br><span class="line"><span class="comment">//功能：创建或者打开一个信号灯集对象</span></span><br><span class="line"><span class="comment">//返回值：成功返回ID号，失败返回-1</span></span><br><span class="line">key：要打开或者创建对象时的“密钥”</span><br><span class="line">nesms</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">key_t</span> key =ftok(<span class="string">"."</span>,<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">if</span>(key&lt;<span class="number">0</span>){</span><br><span class="line">        perror(<span class="string">"ftok"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"key=%d\n"</span>,key);</span><br><span class="line">    <span class="type">int</span> semid=semget(key,<span class="number">3</span>,IPC_CREAT|<span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span>(semid&lt;<span class="number">0</span>){</span><br><span class="line">        perror(<span class="string">"semget"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sem id =%d"</span>,semid);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>2、信号灯集的操作(P/V)</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">semop</span><span class="params">( <span class="type">int</span> semid, <span class="keyword">struct</span> sembuf *opsptr， <span class="type">size_t</span> nops)</span>;</span><br><span class="line">功能:申请或者释放资源</span><br><span class="line">返回值:成功返回<span class="number">0</span>，失败返回<span class="number">-1</span></span><br><span class="line">semid:信号灯集ID号</span><br><span class="line">opsptr:要对信号灯的操作</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> {</span></span><br><span class="line">    <span class="type">short</span> sem_ num;<span class="comment">//要操作的信 号灯的编号</span></span><br><span class="line"><span class="type">short</span> sem_ op;</span><br><span class="line">    <span class="comment">//0 :等待，直到信号灯的值变成0</span></span><br><span class="line">        <span class="comment">//1 :释放资源，V操作</span></span><br><span class="line">        <span class="comment">//-1 :分配资源，P操作</span></span><br><span class="line"><span class="type">short</span> sem_ _f1g; <span class="comment">// 0，IPC_ NOWAIT, SEM_ _UNDO</span></span><br><span class="line">};</span><br><span class="line">nops:要操作的个数-- <span class="number">1</span>|</span><br></pre></td></tr></tbody></table></figure><p>2、信号灯集的整体控制(删除、初始化)</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">semctl</span><span class="params">(<span class="type">int</span> semid, <span class="type">int</span> semnum, <span class="type">int</span> cmd...<span class="comment">/*union semun arg*/</span>)</span>;</span><br><span class="line">功能:整体控制信号灯集</span><br><span class="line">返回值:成功返回<span class="number">0</span>，失败返回<span class="number">-1</span></span><br><span class="line">semid:要操作的id号</span><br><span class="line">semnum: </span><br><span class="line">要修改的信号灯编号(type) </span><br><span class="line">cmd:要执行的指令</span><br><span class="line">GETVAL:获取信号灯的值</span><br><span class="line">SETVAL:设置信号灯的值</span><br><span class="line">IPC_ RMID:从系统中删除信号灯集合</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> {</span></span><br><span class="line"><span class="type">int</span> val;<span class="comment">/* Value for SETVAL */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semid_</span> _<span class="title">ds</span> *<span class="title">buf</span>;</span><span class="comment">/* Buffer for IPC_ STAT， IPC_ _SET */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">short</span> *<span class="built_in">array</span>; <span class="comment">/* Array for GETALL， SETALL */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">seminfo</span> *__ <span class="title">buf</span>;</span> <span class="comment">/* Buffer for IPC_ INFO</span></span><br><span class="line"><span class="comment">(Linux-specific) */</span></span><br><span class="line">    };</span><br><span class="line">如果需要设置值，那么会有第四个参数(共用体)，这个共用体里的va1成员表示给信号灯初始化个数</span><br><span class="line">注:如果是删除，不需要共用体。只需要在semnum这个参数随便写一个信号灯集的编号就能整体删完对象</span><br></pre></td></tr></tbody></table></figure><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> P-1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> V1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> {</span></span><br><span class="line">    <span class="type">int</span>              val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span>  *<span class="built_in">array</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">seminfo</span>  *__<span class="title">buf</span>;</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">init_sem</span><span class="params">(<span class="type">int</span> semid, <span class="type">int</span> s[], <span class="type">int</span> n)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i, ret;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">myun</span>;</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line">        myun.val = s[i];</span><br><span class="line">        ret = semctl(semid, i, SETVAL, myun);</span><br><span class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>){</span><br><span class="line">            perror(<span class="string">"semctl"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_pv</span><span class="params">(<span class="type">int</span> semid, <span class="type">int</span> num, <span class="type">int</span> op)</span></span><br><span class="line">{</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">buf</span>;</span></span><br><span class="line">    buf.sem_num= num;</span><br><span class="line">    buf.sem_op= op;</span><br><span class="line">    buf.sem_flg= <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = semop(semid, &amp;buf, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>){</span><br><span class="line">        perror(<span class="string">"semop"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sig_handler</span><span class="params">(<span class="type">int</span> sig)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(sig == SIGCHLD){</span><br><span class="line">        waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, WNOHANG);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> s[] = {<span class="number">0</span>, <span class="number">1</span>};</span><br><span class="line">    <span class="type">key_t</span> key = ftok(<span class="string">"."</span>, <span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">if</span>(key &lt; <span class="number">0</span>){</span><br><span class="line">        perror(<span class="string">"ftok"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*1. create share memory*/</span></span><br><span class="line">    <span class="type">int</span> shmid = shmget(key, <span class="number">512</span>, IPC_CREAT | <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span>(shmid &lt; <span class="number">0</span>){</span><br><span class="line">        perror(<span class="string">"shmget"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*2. shm mmap*/</span></span><br><span class="line">    <span class="type">char</span> *shmaddr = shmat(shmid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(shmaddr == (<span class="type">void</span> *)<span class="number">-1</span>){</span><br><span class="line">        perror(<span class="string">"shmat"</span>);</span><br><span class="line">        <span class="keyword">goto</span> _error1;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*3. create sem*/</span></span><br><span class="line">    <span class="type">int</span> semid = semget(key, <span class="number">2</span>, IPC_CREAT | <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span>(semid &lt; <span class="number">0</span>){</span><br><span class="line">        perror(<span class="string">"semget"</span>);</span><br><span class="line">        <span class="keyword">goto</span> _error1;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*4. init sem*/</span></span><br><span class="line">    <span class="type">int</span> ret = init_sem(semid, s, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> _error2;</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>){</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="keyword">goto</span> _error2;</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>){</span><br><span class="line">        <span class="comment">//child -- function : delete space</span></span><br><span class="line">        <span class="type">char</span> *p, *q;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line">            <span class="comment">//P - read</span></span><br><span class="line">            sem_pv(semid, READ, P);</span><br><span class="line">            <span class="keyword">if</span>(strncasecmp(shmaddr, <span class="string">"quit\n"</span>, <span class="number">5</span>) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">goto</span> _error2;</span><br><span class="line">            p = q = shmaddr;</span><br><span class="line">            <span class="keyword">while</span>(*p != <span class="string">'\0'</span>){</span><br><span class="line">                <span class="keyword">if</span>(*p != <span class="string">' '</span>)</span><br><span class="line">                    *q++ = *p;</span><br><span class="line">                p++;</span><br><span class="line">            }</span><br><span class="line">            *q = <span class="string">'\0'</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"result : %s"</span>, shmaddr);</span><br><span class="line">            <span class="comment">//V - write</span></span><br><span class="line">            sem_pv(semid, WRITE, V);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="comment">//parent -- function: fgets strings</span></span><br><span class="line">        signal(SIGCHLD, sig_handler);</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line">            <span class="comment">//P - write</span></span><br><span class="line">            sem_pv(semid, WRITE, P);</span><br><span class="line">            fgets(shmaddr, <span class="number">256</span>, <span class="built_in">stdin</span>);</span><br><span class="line">            <span class="comment">//V - read</span></span><br><span class="line">            sem_pv(semid, READ, V);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    _error2:</span><br><span class="line">    semctl(semid, <span class="number">0</span>, IPC_RMID);</span><br><span class="line"></span><br><span class="line">    _error1:</span><br><span class="line">    shmctl(shmid, IPC_RMID, <span class="literal">NULL</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO</title>
      <link href="/2023/03/29/IO/"/>
      <url>/2023/03/29/IO/</url>
      
        <content type="html"><![CDATA[<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h2 id="标准IO"><a href="#标准IO" class="headerlink" title="标准IO"></a>标准IO</h2><p>流-FILE结构体</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">grep -r "struct _IO_FILE" /user/include/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  <span class="type">int</span> _flags;           <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_base; <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_end;  <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line">    <span class="type">int</span> _fileno;</span><br><span class="line">    <span class="type">int</span> _flags2;</span><br><span class="line">  <span class="type">__off_t</span> _old_offset; <span class="comment">/* This used to be _offset but it's too small.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h4><ol><li>全缓冲：当缓冲区满了或者特定的情况下才会刷新</li><li>行缓冲：当缓冲区中有了换行\n就会刷新</li><li>无缓冲：任何东西进入缓冲区马上被刷新走</li></ol><ul><li>默认：程序结束会刷新缓冲区</li></ul><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">   <span class="type">char</span> buff[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">   <span class="built_in">memset</span>( buff, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>( buff ));</span><br><span class="line"></span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"启用全缓冲\n"</span>);</span><br><span class="line">   setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IOFBF, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"这里是 runoob.com\n"</span>);</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"该输出将保存到 buff\n"</span>);</span><br><span class="line">   fflush( <span class="built_in">stdout</span> );</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"这将在编程时出现\n"</span>);</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"最后休眠五秒钟\n"</span>);</span><br><span class="line"></span><br><span class="line">   sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="setvbuf"><a href="#setvbuf" class="headerlink" title="setvbuf"></a>setvbuf</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">setvbuf</span><span class="params">(FILE *stream, <span class="type">char</span> *buf, <span class="type">int</span> mode, <span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="comment">//功能：可以更改缓冲区类型（缓冲区可以人为指定）</span></span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回非0</span></span><br><span class="line"><span class="comment">//stream：流，表示要更改缓冲类型的流</span></span><br><span class="line"><span class="comment">//buf：缓冲区地址</span></span><br><span class="line"><span class="comment">//mode：要改成的缓冲区类型</span></span><br><span class="line"><span class="comment">//_IONBF：无缓冲</span></span><br><span class="line"><span class="comment">//_IOLBF：行缓冲</span></span><br><span class="line"><span class="comment">//_IOFBF：全缓冲</span></span><br><span class="line"><span class="comment">//size：要更改buf的大小（单位字节）</span></span><br></pre></td></tr></tbody></table></figure><h4 id="perror、errno、stderr"><a href="#perror、errno、stderr" class="headerlink" title="perror、errno、stderr"></a>perror、errno、stderr</h4><blockquote><ul><li>errno：错误号，用于内核调用完函数后设置调用结果的编号</li><li>perror：输出对应错误号的信息</li><li>stderr：标准出错流 – 无缓冲</li></ul></blockquote><h3 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h3><blockquote><p>标准输入流：stdin – 0</p><p>标准输出流：stdout – 1</p><p>标准出错流：stderr – 2</p><p>每打开一个终端，都会默认打开这三个流</p></blockquote><h4 id="刷新缓冲区-—-fflush"><a href="#刷新缓冲区-—-fflush" class="headerlink" title="刷新缓冲区 — fflush"></a>刷新缓冲区 — fflush</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fflush</span><span class="params">(FILE *stream)</span>;</span><br><span class="line"><span class="comment">//功能：强制刷新一个流（Linux下不能刷新stdin）</span></span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回EOF</span></span><br><span class="line"><span class="comment">//stream：要刷新的流</span></span><br></pre></td></tr></tbody></table></figure><h4 id="打开文件-—-fopen"><a href="#打开文件-—-fopen" class="headerlink" title="打开文件 — fopen()"></a>打开文件 — fopen()</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname,<span class="type">const</span> <span class="type">char</span> mode)</span>;</span><br><span class="line"><span class="comment">//功能：</span></span><br><span class="line"><span class="comment">//让内核打开一个文件并且标记它</span></span><br><span class="line"><span class="comment">//返回值：</span></span><br><span class="line"><span class="comment">//成功返回流指针，失败返回NULL</span></span><br><span class="line"><span class="comment">//pathname：要打开的文件名（包含路径）</span></span><br><span class="line"><span class="comment">//mode：打开文件的方式（只读、只写...）</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注：如果操作二进制文件，那么打开文件时的方式可以加上b，但是Linux下不区分二进制流和文本流</p></blockquote><h4 id="关闭流-—-fclose"><a href="#关闭流-—-fclose" class="headerlink" title="关闭流 — fclose()"></a>关闭流 — fclose()</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">(FILE *stream)</span></span><br><span class="line"><span class="comment">//功能：关闭已经打开的流</span></span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回EOF</span></span><br><span class="line"><span class="comment">//stream：要关闭的流</span></span><br></pre></td></tr></tbody></table></figure><h4 id="按字符读-—-fgetc"><a href="#按字符读-—-fgetc" class="headerlink" title="按字符读 — fgetc()"></a>按字符读 — fgetc()</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">(FILE *stream)</span>;</span><br><span class="line"><span class="comment">//功能：从流里面读取一个字符</span></span><br><span class="line"><span class="comment">//返回值：成功返回读到的字符，失败返回EOF</span></span><br><span class="line"><span class="comment">//stream：要读的流</span></span><br></pre></td></tr></tbody></table></figure><h4 id="按字符写-—-fputs"><a href="#按字符写-—-fputs" class="headerlink" title="按字符写 — fputs()"></a>按字符写 — fputs()</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> c, FILE *stream)</span>;</span><br><span class="line"><span class="comment">//功能：往流里面写一个字符</span></span><br><span class="line"><span class="comment">//返回值：成功返回写入的字符，失败返回EOF</span></span><br><span class="line"><span class="comment">//c：要写的字符</span></span><br><span class="line"><span class="comment">//stream：要写入的流</span></span><br></pre></td></tr></tbody></table></figure><h4 id="按行读-—-fgets"><a href="#按行读-—-fgets" class="headerlink" title="按行读 —- fgets()"></a>按行读 —- fgets()</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">fgets</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> size, FILE *stream)</span>;</span><br><span class="line"><span class="comment">//功能：读取一行的内容</span></span><br><span class="line"><span class="comment">//返回值：成功返回s的地址，失败返回NULL</span></span><br><span class="line"><span class="comment">//s：要把内容读到哪里去（缓冲区）</span></span><br><span class="line"><span class="comment">//size：预计要读的字节数</span></span><br><span class="line"><span class="comment">//stream：从哪个流读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注：fgets是表示遇到了换行符才终止，如果size比一行的数据大，就读完所有内容。size如果比一行数据小，只读size-1个，追加一个'\0'，表示没读完。</span></span><br></pre></td></tr></tbody></table></figure><h4 id="按行写-—-fputs"><a href="#按行写-—-fputs" class="headerlink" title="按行写 — fputs()"></a>按行写 — fputs()</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, FILE *stream)</span>;</span><br><span class="line"><span class="comment">//功能：往一个流里面写一行数据</span></span><br><span class="line"><span class="comment">//返回值：成功返回非负数，失败返回EOF</span></span><br><span class="line"><span class="comment">//s：要写入的内容所在的缓冲区</span></span><br><span class="line"><span class="comment">//stream：要写入的流</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注：fputs和puts不一样，puts会自动添加一个换行，fputs不添加</span></span><br></pre></td></tr></tbody></table></figure><h4 id="按对象读-—-fread"><a href="#按对象读-—-fread" class="headerlink" title="按对象读 — fread()"></a>按对象读 — fread()</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream)</span>;</span><br><span class="line"><span class="comment">//功能：从流里面读取内容，内容分了组（对象）</span></span><br><span class="line"><span class="comment">//返回值：成功返回实际读到的对象个数，失败返回EOF</span></span><br><span class="line"><span class="comment">//ptr：要把读到内容放在哪个缓冲区</span></span><br><span class="line"><span class="comment">//size：每个对象的字节大小</span></span><br><span class="line"><span class="comment">//nmemb：预计要读多少个对象</span></span><br><span class="line"><span class="comment">///stream：要读的流</span></span><br><span class="line"><span class="comment">//注：size * nmemb不能超过缓冲区(ptr)大小</span></span><br></pre></td></tr></tbody></table></figure><h4 id="按对象写-—-fwrite"><a href="#按对象写-—-fwrite" class="headerlink" title="按对象写 — fwrite()"></a>按对象写 — fwrite()</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb,FILE *stream)</span>;</span><br><span class="line"><span class="comment">//功能：把缓冲区的内容写入到流里面</span></span><br><span class="line"><span class="comment">//返回值：成功返回实际写入的对象个数，失败返回EOF</span></span><br><span class="line">/ptr：要写入的数据所在的缓冲区</span><br><span class="line"><span class="comment">//size：每个对象的字节大小</span></span><br><span class="line"><span class="comment">//nmemb：预计要写入的对象个数</span></span><br><span class="line"><span class="comment">///stream：要写入的流</span></span><br></pre></td></tr></tbody></table></figure><h4 id="重定向-—-freopen"><a href="#重定向-—-freopen" class="headerlink" title="重定向 — freopen()"></a>重定向 — freopen()</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">FILE *<span class="title function_">freopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">const</span> <span class="type">char</span> *mode, FILE *stream)</span>;</span><br><span class="line"><span class="comment">//功能：打开一个文件并且会产生一个流，stream所表示的流会被替代</span></span><br><span class="line"><span class="comment">//返回值：成功返回流指针，失败返回NULL</span></span><br><span class="line"><span class="comment">//pathname：要打开的文件</span></span><br><span class="line"><span class="comment">//mode：打开文件的方式</span></span><br><span class="line"><span class="comment">//stream：要重定向的流</span></span><br></pre></td></tr></tbody></table></figure><h4 id="定位流"><a href="#定位流" class="headerlink" title="定位流"></a>定位流</h4><h5 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a>fseek</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fseek</span><span class="params">(FILE *stream, <span class="type">long</span> offset, <span class="type">int</span> whence)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//功能：fseek()用来移动文件流的读写位置。参数stream为已打开的文件指针, 参数offset为根据参数whence来移动读写位置的位移数。</span></span><br><span class="line"><span class="comment">//参数：</span></span><br><span class="line">whence为下列其中一种:</span><br><span class="line">   SEEK_SET：文件开头</span><br><span class="line">              The offset is <span class="built_in">set</span> to offset bytes.</span><br><span class="line">       SEEK_CUR：当前位置</span><br><span class="line">              The offset is <span class="built_in">set</span> to its current location plus offset bytes.</span><br><span class="line">       SEEK_END：文件末尾</span><br><span class="line">              The offset is <span class="built_in">set</span> to the size of the file plus offset bytes.</span><br><span class="line">SEEK_END将读写位置指向文件尾后再增加offset个位移量。</span><br><span class="line">当whence值为SEEK_CUR 或SEEK_END时, 参数offset允许负值的出现。</span><br><span class="line"><span class="comment">//返回值</span></span><br><span class="line">        当调用成功时则返回<span class="number">0</span>, 若有错误则返回<span class="number">-1</span>, errno会存放错误代码。</span><br></pre></td></tr></tbody></table></figure><h5 id="ftell"><a href="#ftell" class="headerlink" title="ftell"></a>ftell</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">ftell</span><span class="params">(FILE *stream)</span>;</span><br><span class="line"><span class="comment">//功能：检索当前光标位置</span></span><br><span class="line"><span class="comment">//返回值：成功返回位置值，失败返回-1</span></span><br></pre></td></tr></tbody></table></figure><h5 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h5><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rewind</span><span class="params">(FILE *stream)</span>;</span><br><span class="line"><span class="comment">//功能：返回文件的开头</span></span><br><span class="line"><span class="comment">//和(void) fseek(stream, 0L, SEEK_SET)功能一样</span></span><br></pre></td></tr></tbody></table></figure><h2 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h2><blockquote><ul><li>不带缓冲</li></ul><ol><li>不带缓冲指的是每个read和write都调用内核中的相应系统调用</li><li>不带缓冲的I/O函数不是ANSI C的组成部分，但是是POSIX和XPG3的组成部分</li><li>通过文件描述符来访问文件</li></ol></blockquote><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><blockquote><ol><li>是非负整数（共1024个：0-1023）但是0、1、2被系统占用，用户的第一个从1开始</li><li>对于内核而言，所有打开文件都由文件描述符引用。当打开一个现存文件或创建一个新文件时，内核向进程返回一个文件描述符。 1.</li><li>文件io：符合常量: 幻数0、1、2应被代换成符号常数STDIN_FILENO、STDOUT_FILENO、STDERR_FILENO。这些常数都定义在头文件&lt;unistd.h&gt;中。<ol><li>标准io是流： 0 ：stdin 1： stdout 2： stderr</li></ol></li></ol></blockquote><h3 id="open"><a href="#open" class="headerlink" title="open"></a>open</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//功能： open, creat - open and possibly create a file or device</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//头文件：</span></span><br><span class="line">       <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line">       <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line">       <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数原型：</span></span><br><span class="line">       <span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags)</span>; <span class="comment">//</span></span><br><span class="line">       <span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags, <span class="type">mode_t</span> mode)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="title function_">creat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">mode_t</span> mode)</span>;</span><br><span class="line"><span class="comment">//参数说明：</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pathname：被打开的文件名（可包括路径名）</span><br><span class="line">     <span class="type">int</span> flags：（读写三个参数互斥，只允许选择一个）</span><br><span class="line">            O_RDONLY：只读方式打开文件。：read only</span><br><span class="line">            O_WRONLY:只写方式打开文件。 ：write only</span><br><span class="line">            O_RDWR: 可读写方式打开文件。：read write</span><br><span class="line"></span><br><span class="line">            <span class="comment">//以下参数和读写参数可以用 '|' 连接使用</span></span><br><span class="line">            O_CREAT：如果该文件不存在，就创建一个新的文件，并用第三的参数为其设置权限。</span><br><span class="line">            O_EXCL：如果使用O_CREAT时文件存在，则可返回错误消息。这一参数可测试文件是否存在。</span><br><span class="line">            O_NOCTTY：使用本参数时，如文件为终端，那么终端不可以作为调用open()系统调用的那个进程的控制终端</span><br><span class="line">             O_APPEND：以添加方式打开文件，所以对文件的写操作都在文件的末尾进行。</span><br><span class="line">            O_TRUNC：如文件已经存在，那么打开文件时先删除文件中原有数据。（截断式打开：如果文件有内容，先清空文件内容，再打开）</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mode_t mode：文件权限（只有用到O_CREAT 创建文件的时候才有用）</span></span><br><span class="line">            <span class="number">0777</span></span><br><span class="line">            <span class="number">0664</span></span><br><span class="line">    <span class="comment">//返回值：</span></span><br><span class="line">            成功：返回对应的文件描述符</span><br><span class="line">            失败：<span class="number">-1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="close"><a href="#close" class="headerlink" title="close"></a>close</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//功能：close - close a file descriptor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//头文件：</span></span><br><span class="line">       <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数原型：</span></span><br><span class="line">       <span class="type">int</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br><span class="line"><span class="comment">//参数说明：</span></span><br><span class="line">     <span class="type">int</span> fd:已经打开的要关闭的文件  </span><br><span class="line"><span class="comment">//返回值： </span></span><br><span class="line">        成功：<span class="number">0</span></span><br><span class="line">        失败：<span class="number">-1</span> 并设置错误码（errno）</span><br></pre></td></tr></tbody></table></figure><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//功能：</span></span><br><span class="line">read - read from a file descriptor</span><br><span class="line"><span class="comment">//头文件：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数原型：</span></span><br><span class="line">       <span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line"><span class="comment">//参数说明：</span></span><br><span class="line"><span class="type">int</span> fd:已经打开的可读文件</span><br><span class="line">   <span class="type">void</span> *buf：用于保存读取到的数据</span><br><span class="line">    <span class="type">size_t</span> count：每次读取的字节数 </span><br><span class="line"> <span class="comment">//返回值：</span></span><br><span class="line">        <span class="number">-1</span>：失败</span><br><span class="line">        <span class="number">0</span>：读取到文件末尾或文件为空（在网络通信里面表示客户端退出）</span><br><span class="line">        大于<span class="number">0</span>：成功读取到数据</span><br></pre></td></tr></tbody></table></figure><h3 id="write"><a href="#write" class="headerlink" title="write"></a>write</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//功能：</span></span><br><span class="line">write - write to a file descriptor</span><br><span class="line"><span class="comment">//头文件：</span></span><br><span class="line">       <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数原型：</span></span><br><span class="line">       <span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line"><span class="comment">//参数说明：</span></span><br><span class="line"><span class="type">int</span> fd:已经打开的可写文件</span><br><span class="line">   <span class="type">const</span> <span class="type">void</span> *buf：用于保存读取到的数据</span><br><span class="line">    <span class="type">size_t</span> count：每次读取的字节数 </span><br><span class="line"><span class="comment">//返回值：</span></span><br><span class="line">        <span class="number">-1</span>：失败</span><br><span class="line">       </span><br><span class="line">        大于<span class="number">0</span>：成功写入的数据</span><br></pre></td></tr></tbody></table></figure><h3 id="lseek"><a href="#lseek" class="headerlink" title="lseek"></a>lseek</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//功能：lseek - reposition read/write file offset</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//头文件：</span></span><br><span class="line">       <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line">       <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数原型：</span></span><br><span class="line">       <span class="type">off_t</span> <span class="title function_">lseek</span><span class="params">(<span class="type">int</span> fd, <span class="type">off_t</span> offset, <span class="type">int</span> whence)</span>;</span><br><span class="line"><span class="comment">//参数说明：</span></span><br><span class="line"><span class="type">int</span> fd： 操作的文件</span><br><span class="line">    <span class="type">off_t</span> offset:偏移量       （+n  向后偏移   -n  向前偏移   <span class="number">0</span>  不偏移）</span><br><span class="line">    <span class="type">int</span> whence：参考的基准位置 </span><br><span class="line">       SEEK_SET：文件开头</span><br><span class="line">              The offset is <span class="built_in">set</span> to offset bytes.</span><br><span class="line">       SEEK_CUR：当前位置</span><br><span class="line">              The offset is <span class="built_in">set</span> to its current location plus offset bytes.</span><br><span class="line">       SEEK_END：文件末尾</span><br><span class="line">              The offset is <span class="built_in">set</span> to the size of the file plus offset bytes.</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：</span></span><br><span class="line">        文件的当前光标位置（按字节数计算）</span><br></pre></td></tr></tbody></table></figure><p>标准IO和文件IO的区别：</p><blockquote><ul><li>标准IO是c库函数，文件IO是系统调用接口</li><li>标准IO自带缓冲区，文件IO没有缓冲</li><li>标准IO的实现还是要依赖文件IO</li></ul></blockquote><table><thead><tr><th align="left"></th><th align="left">文件io</th><th align="left">标准io</th></tr></thead><tbody><tr><td align="left">缓冲</td><td align="left">无</td><td align="left">有</td></tr><tr><td align="left">高低级</td><td align="left">linux系统io、低级io</td><td align="left">高级io</td></tr><tr><td align="left">操作对象</td><td align="left">文件描述符</td><td align="left">流</td></tr><tr><td align="left">能否打开设备文件</td><td align="left">可以</td><td align="left">不可以</td></tr><tr><td align="left">API</td><td align="left">open close read write sleek</td><td align="left">fopen fclose fread fwrite fseek</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> IO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/03/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/03/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell</title>
      <link href="/2023/03/20/shell/"/>
      <url>/2023/03/20/shell/</url>
      
        <content type="html"><![CDATA[<h1 id="star-shell脚本"><a href="#star-shell脚本" class="headerlink" title=":star:shell脚本"></a><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>shell脚本</h1><h2 id="本质：shell命令的有序集合"><a href="#本质：shell命令的有序集合" class="headerlink" title="本质：shell命令的有序集合"></a>本质：shell命令的有序集合</h2><ol><li><p>bash解释器</p><ul><li>作用：指向.sh脚本</li></ul></li><li><p>编写shell脚本</p><ol><li>创建一个.sh的文件</li><li>写shell命令</li><li>执行<ul><li>通过bash这个解释器来执行</li><li>通过./来执行，但是需要有执行权限，使用chmod来给文件提权示例</li></ul></li></ol><p>示例</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash    //第一行一般都这样写,表示解释器的路径</span></span><br><span class="line"><span class="built_in">cp</span> ../1.c 1.c</span><br><span class="line"><span class="built_in">cp</span> ../2.c 2.c</span><br><span class="line"> 1.c Hello world</span><br></pre></td></tr></tbody></table></figure></li></ol><p>shell中0表示真，1表示假</p><h2 id="shell的特殊字符"><a href="#shell的特殊字符" class="headerlink" title="shell的特殊字符"></a>shell的特殊字符</h2><ol><li><p><code>|</code></p><ul><li>作用：管道</li><li>示例<ul><li>forune | lolcat</li></ul></li></ul></li><li><p>`  `<br>作用：命令置换：<br>示例：</p> <figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> `<span class="built_in">ls</span>`    <span class="comment">#echo 在终端显示)</span></span><br></pre></td></tr></tbody></table></figure></li></ol><p>   <img src="https://typora-1304577690.cos.ap-chengdu.myqcloud.com/image-20230314144510596.png"></p><ol start="3"><li><p>&gt;&gt;<br>输出重定向</p><p>​&gt; 覆盖输入<br>​&gt;&gt; 最佳输入<br>​示例：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> Hello world  1.c</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>通配符</strong></p><ul><li>*：匹配所有字符</li><li>{起始..结束}   创建连续的文件</li><li>[ ]<ul><li>rm [13579].c 删除了1.c 2.c 3.c 4.c 5.c</li><li>rm [1-5].c    删除了1-5.c</li></ul></li><li>？：匹配一个字符串</li><li>[^]：删除除了指定的文件，只能通配一个</li></ul></li></ol><h2 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a><strong>shell变量</strong></h2><ol><li><p>自定义变量</p><ul><li><p>没有数据类型，默认为字符串类型</p></li><li><p>赋值不能隔开</p></li><li><p>变量名=值</p></li><li><p>没有分号，换行相当于分号</p></li><li><p>变量的调用需要加$</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=2</span><br><span class="line">echo $a</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>位置变量</p><ul><li>命令行参数的变量，从终端传递参数给shell脚本</li><li>从$0开始到$9如果要打印9以后的变量需要加{ }，例如${12}</li></ul></li><li><p>环境变量</p><ul><li>计算机定义好的变量</li><li>env可以查看所有环境变量</li><li>调用需要加$</li></ul></li><li><p>预定义变量</p><ul><li><p>计算机给出一些特殊变量赋予特殊意义</p></li><li><p><strong>格式</strong></p><table><thead><tr><th align="left"></th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数。 如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。 如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td align="left">$-</td><td align="left">显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table></li></ul></li></ol><h2 id="变量的四则运算"><a href="#变量的四则运算" class="headerlink" title="变量的四则运算"></a>变量的四则运算</h2><ol><li><p>$( () )</p><ul><li>不能进行浮点运算</li><li>调用的时候要加钱$</li><li>可以进行幂数运算</li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=$((3**3))</span><br><span class="line">echo $a </span><br><span class="line">结果为27</span><br></pre></td></tr></tbody></table></figure></li><li><p>$[ ]</p><ul><li>不能进行浮点运算</li><li>调用的时候要加钱$</li><li>可以进行幂数运算</li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=$[ 3+3]</span><br><span class="line">echo $a </span><br><span class="line">结果为6</span><br></pre></td></tr></tbody></table></figure></li><li><p>expr</p><ul><li>需要命令置换符置换出来结果</li><li>算数之间需要空开</li><li>当进行乘法的时候需要用\区分,其他都不需要</li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a='expr 1 \* 2'</span><br><span class="line">a='expr 1\*2'//报错 需要空开</span><br><span class="line">echo $a </span><br><span class="line">结果为2</span><br></pre></td></tr></tbody></table></figure></li><li><p>练习</p><ul><li>交换a,b的值</li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=$[ 3 * 3 * 3]</span><br><span class="line">b=$((5*7))</span><br><span class="line">c=$a</span><br><span class="line">a=$b</span><br><span class="line">b=$c</span><br><span class="line">echo  a=$a b=$b  1.txt</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="Shell语句"><a href="#Shell语句" class="headerlink" title="Shell语句"></a>Shell语句</h2><ul><li><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><ul><li>test 字符串1 = 字符串2 —- 比较两个字符串是否相等</li><li>test 字符串1 != 字符串2 —- 比较两个字符串是否不相等</li><li>test -z 字符串 —- 判断字符串为不为空</li><li>test -n 字符串 —- 判断字符串是否为不空</li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a="hello"</span><br><span class="line">b="hello"</span><br><span class="line">test $a != $b</span><br><span class="line">test -z $a</span><br><span class="line">test -n $a</span><br><span class="line">echo $?  //？表示上一个结果</span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="整数比较"><a href="#整数比较" class="headerlink" title="整数比较"></a>整数比较</h3><ul><li>-eq —- 等于</li><li>-ne —- 不等于</li><li>-gt —- 大于</li><li>-lt —- 小于</li><li>-ge —- 大于等于</li><li>-le —- 小于等于</li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">test 23 -eq 32</span><br><span class="line">echo $?  #？表示上一个结果</span><br><span class="line">结果 1    #shell中1表示假，0表示真</span><br></pre></td></tr></tbody></table></figure></li><li><h3 id="文件比较"><a href="#文件比较" class="headerlink" title="文件比较"></a>文件比较</h3><ul><li>-e 文件 —- 判断文件是否存在</li><li>-f 文件 —- 判断文件是否为普通文件</li><li>-L 文件 —- 判断文件是否为链接文件</li><li>-S 文件 —- 判断文件是否为套接字文件</li><li>-b 文件 —- 判断文件是否为块文件</li><li>-c 文件 —- 判断文件是否为字符文件</li><li>-d 文件 —- 判断文件是否为目录文件</li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">test -d $1 #$1表示从命令行去获取参数</span><br><span class="line">echo $?  #？表示上一个结果</span><br></pre></td></tr></tbody></table></figure><ul><li><p>-p 文件 —- 判断文件是否为管道文件</p></li><li><p>文件1 -nt 文件2 —- 判断文件1是否比文件2新（时间戳）</p></li><li><p>文件1 -ot 文件2 —- 判断文件1是否比文件2旧（时间戳）</p></li><li><p>-o —- 或 or</p></li><li><p>-a —- 与 and文件权限</p></li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">test -d $1 -o -f $2 #$1 $2表示从命令行去获取参数</span><br><span class="line">echo $?  #？表示上一个结果</span><br></pre></td></tr></tbody></table></figure><ul><li>-r —- 判断文件是否有可读写权限</li><li>-w —- 判断文件是否有可写权限</li><li>-x —- 判断文件是否有可执行权限</li></ul></li><li><h3 id="read-—–-把终端上的输入传给参数"><a href="#read-—–-把终端上的输入传给参数" class="headerlink" title="read —– 把终端上的输入传给参数"></a>read —– 把终端上的输入传给参数</h3><ul><li>用法 ：read 变量1 变量2 …</li><li>参数：<ul><li>read -p “提示” 变量名 —- 给出提示</li><li>read -t 时间(秒) 变量名 —- 超过时间自动停止</li><li>read -n 数字 变量名 —- 显示输入的个数，超出个数也会自动结束</li><li>read -s —- 隐藏输入，不显示</li></ul></li></ul></li></ul><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><ul><li>第一种</li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">if []</span><br><span class="line">then</span><br><span class="line">    shell 语句;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意 <span class="keyword">if</span> 和[]中需要加空格</span></span><br></pre></td></tr></tbody></table></figure><ul><li>第二种</li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">if test语句</span><br><span class="line">then</span><br><span class="line">    shell 语句;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意 <span class="keyword">if</span> 和[]中需要加空格</span></span><br></pre></td></tr></tbody></table></figure><h4 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if -elif -else"></a>if -elif -else</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read a</span><br><span class="line">if test -e $a</span><br><span class="line">then</span><br><span class="line">    if test -w $a</span><br><span class="line">    then </span><br><span class="line">        echo "hello World"  $a</span><br><span class="line">    else</span><br><span class="line">        chmod u+w $a</span><br><span class="line">        echo "hello World"  $a</span><br><span class="line">    fi</span><br><span class="line">else</span><br><span class="line">    touch $a</span><br><span class="line">    chmod u+w $a </span><br><span class="line">    echo "hello World"  $a</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"> case 表达式 in</span><br><span class="line">     值1)</span><br><span class="line">         语句1</span><br><span class="line">     ;;</span><br><span class="line">     值2)</span><br><span class="line">         语句2</span><br><span class="line">     ;;</span><br><span class="line">     .</span><br><span class="line">     .</span><br><span class="line">     .</span><br><span class="line">     *)</span><br><span class="line">         语句n</span><br><span class="line"> esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">同时可以在值中使用|、[]来匹配多种值</span></span><br><span class="line">read day       </span><br><span class="line"> case $day in</span><br><span class="line">     1|5|7)</span><br><span class="line">         echo "单数日"</span><br><span class="line">     ;;</span><br><span class="line">     [2-4])</span><br><span class="line">        echo "中间两天"</span><br><span class="line">     ;;</span><br><span class="line">     *)</span><br><span class="line">        echo "双数日"</span><br><span class="line"> esac</span><br></pre></td></tr></tbody></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 表达式</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    shell语句</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">((a--)) ---表示自减</span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#!/bin/bash   </span></span><br><span class="line">  a=5</span><br><span class="line">  <span class="keyword">while</span> <span class="built_in">test</span> <span class="variable">$a</span> -gt 0</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">      ((a--))</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    shell语句</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><ul><li><p>方式一</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>((表达式<span class="number">1</span>；表达式<span class="number">2</span>；表达式<span class="number">3</span>))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    shell语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#!/bin/bash </span></span><br><span class="line">i=5</span><br><span class="line"><span class="keyword">for</span>((i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>方式二</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">for 变量 in 单词表</span><br><span class="line">do</span><br><span class="line">    shell语句</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">示例</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=5</span><br><span class="line">for i in he li oi asda adsa ada ad</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure></li><li><p>方式三—-连续的</p><ul><li>for 变量 in {起始..结束}</li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">i=5</span><br><span class="line">for i in {a..z}</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br><span class="line">   </span><br></pre></td></tr></tbody></table></figure><ul><li>for 变量 in</li></ul><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">i=5</span><br><span class="line">for i in `ls`</span><br><span class="line">do</span><br><span class="line">   echo $i</span><br><span class="line">done</span><br><span class="line">   </span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="shell数组"><a href="#shell数组" class="headerlink" title="shell数组"></a>shell数组</h2><ul><li><p>shell脚本中只有一维数组</p></li><li><p>没有数据类型</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#声明 ：数组名=(元素1 元素2 元素3...)</span></span><br><span class="line">arr=(hello world nihao shijie)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">${arr[0]}</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>遍历数组</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">arr=(hello world nihao shijie)</span><br><span class="line">echo ${arr[*]}</span><br><span class="line">echo ${arr[@]}</span><br></pre></td></tr></tbody></table></figure></li><li><p>求数组的长度</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">arr=(hello world nihao shijie)</span><br><span class="line">echo ${#arr[*]}</span><br><span class="line">结果是4</span><br></pre></td></tr></tbody></table></figure></li><li><p>练习—-  交换数组</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">arr=(hello world chengdu sichuan asss)</span><br><span class="line">right=$[${#arr[*]} - 1]</span><br><span class="line">left=0</span><br><span class="line">temp=0</span><br><span class="line">while (test ${left} -le ${right})</span><br><span class="line">do</span><br><span class="line">    temp=${arr[left]}</span><br><span class="line">    arr[left]=${arr[right]}</span><br><span class="line">    arr[right]=$temp</span><br><span class="line">    ((left++))</span><br><span class="line">    ((right--))</span><br><span class="line">done</span><br><span class="line">echo ${arr[*]}</span><br></pre></td></tr></tbody></table></figure><p>练习：求1到100的和</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">sum=0</span><br><span class="line">i=5</span><br><span class="line">for((i=0;i&lt;101;i++))</span><br><span class="line">do</span><br><span class="line">     sum=$(($sum+$i))</span><br><span class="line">done</span><br><span class="line">echo "sum=$sum"</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line">sum=0</span><br><span class="line">i=5</span><br><span class="line">for((i=0;i&lt;101;i++))</span><br><span class="line">do</span><br><span class="line">    sum=`expr $sum + $i`</span><br><span class="line">done</span><br><span class="line">echo "sum=$sum"</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="shell-函数"><a href="#shell-函数" class="headerlink" title="shell 函数"></a>shell 函数</h2><ul><li><p>没有数据类型</p></li><li><p>没有写形参，但是可以传参</p></li><li><p>只有调用函数后，里面的东西才会生效</p></li><li><p>定义：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一种</span></span><br><span class="line">funtion 函数名()</span><br><span class="line">{</span><br><span class="line">    return 返回值</span><br><span class="line">}</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第二种</span></span><br><span class="line">函数名(){</span><br><span class="line">    return 返回值</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>调用：直接函数名</p></li><li><p>获取返回值 ： $?</p></li><li><p>函数的传参</p><ul><li>函数名 实参1 实参2…</li><li>函数体中用$1, $2, $3…${15}来接收</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>makefile</title>
      <link href="/2023/03/20/makefile/"/>
      <url>/2023/03/20/makefile/</url>
      
        <content type="html"><![CDATA[<h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><blockquote><ul><li><p>makefile是一个文件，里面放的是编译的规则，可以管理多个文件</p></li><li><p>make是一个工具，用来解析我们的makefile</p></li><li><p>make会根据文件的时间戳进行编译，如果文件的时间戳没有改变，则不会编译文件</p></li><li><p>makefile的逻辑</p><ul><li><p>目标文件:依赖文件</p><p> (tab) 编译语句</p><p>目标文件就是我们最终生成的文件，要生成这个文件，会去找生成它需要的文件，就叫做依赖文件，如果依赖文件又需要其他的文件来生成，继续找它的依赖文件，直到不需要为止</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">app:<span class="built_in">list</span>.o main.o</span><br><span class="line">    gcc  <span class="built_in">list</span>.o main.o -o app</span><br><span class="line"><span class="built_in">list</span>.o:<span class="built_in">list</span>.c</span><br><span class="line">    gcc -c <span class="built_in">list</span>.c -o <span class="built_in">list</span>.o</span><br><span class="line">main.o:main.c</span><br><span class="line">    gcc -c main.c -o main.o</span><br><span class="line">clean:</span><br><span class="line">    rm main.o <span class="built_in">list</span>.o app </span><br></pre></td></tr></tbody></table></figure><p>C</p></li><li><p>make clean 删除生成的文件（执行clean后面的语句）</p></li><li><p>执行：make，默认解析当前目录下的makefile或者Makefile</p></li><li><p>选项</p><ul><li><p>-f —- 编译指定的makefile文件</p></li><li><p>-I(大写的i) —- 调用外部头文件 加头文件的路径</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span> app:<span class="built_in">list</span>.o main.o</span><br><span class="line">    gcc  <span class="built_in">list</span>.o main.o -I ./include -o app</span><br><span class="line"><span class="built_in">list</span>.o:<span class="built_in">list</span>.c</span><br><span class="line">    gcc -c <span class="built_in">list</span>.c -I ./include -o <span class="built_in">list</span>.o</span><br><span class="line">main.o:main.c</span><br><span class="line">    gcc -c main.c -I ./include -o main.o</span><br><span class="line">clean:</span><br><span class="line">    rm main.o <span class="built_in">list</span>.o app </span><br></pre></td></tr></tbody></table></figure><p>C</p></li></ul></li></ul></li></ul></blockquote><h3 id="makefile的变量"><a href="#makefile的变量" class="headerlink" title="makefile的变量"></a>makefile的变量</h3><blockquote><p>变量的赋值：</p><ul><li>=：给当前变量赋值，但是如果后面有新的赋值，把新的赋值给变量</li></ul><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">a=<span class="number">12</span></span><br><span class="line">b=$(a)</span><br><span class="line">a=<span class="number">34</span></span><br><span class="line">all:</span><br><span class="line">   @echo $(b)</span><br><span class="line">输出:b=<span class="number">34</span></span><br></pre></td></tr></tbody></table></figure><p>C</p><ul><li>:=—立即赋值,和平时的赋值一样，后面新的赋值不会改变当前值</li></ul><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">a=<span class="number">12</span></span><br><span class="line">b:=$(a)</span><br><span class="line">a=<span class="number">34</span></span><br><span class="line">all:</span><br><span class="line">    @echo $(b)</span><br><span class="line">输出:b=<span class="number">12</span></span><br></pre></td></tr></tbody></table></figure><p>C</p><ul><li>？=—询问赋值,询问前面有没有赋值，如果有，此次赋值无效</li></ul><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">a=<span class="number">12</span></span><br><span class="line">b:=$(a)</span><br><span class="line">a?=<span class="number">34</span></span><br><span class="line">all:</span><br><span class="line">    @echo $(b)</span><br><span class="line">    echo $(a)</span><br><span class="line">a=<span class="number">12</span></span><br></pre></td></tr></tbody></table></figure><p>C</p><ul><li>+=：追加赋值</li></ul><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">a=<span class="number">12</span></span><br><span class="line">b:=$(a)</span><br><span class="line">a+=hello</span><br><span class="line">all:</span><br><span class="line">    @echo $(b)</span><br><span class="line">    echo $(a)</span><br><span class="line">a=<span class="number">12</span> hello</span><br></pre></td></tr></tbody></table></figure><p>C</p><ul><li>可以在语句前加@隐藏显示语句</li><li>利用变量写makefile：</li></ul><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">TARGET=app</span><br><span class="line">OBJS=<span class="built_in">list</span>.o main.o</span><br><span class="line">CC=gcc</span><br><span class="line">OBJS2=<span class="built_in">list</span>.c</span><br><span class="line">OBJS3=main.c</span><br><span class="line">PATH=-I ./include</span><br><span class="line">$(TARGET):$(OBJS)</span><br><span class="line">    $(CC)  $(OBJS) $(PATH) -o $(TARGET)</span><br><span class="line"><span class="built_in">list</span>.o:$(OBJS2)</span><br><span class="line">    $(CC) -c $(OBJS2) $(PATH) -o <span class="built_in">list</span>.o</span><br><span class="line">main.o:$(OBJS3)</span><br><span class="line">    $(CC) -c $(OBJS3) $(PATH) -o main.o</span><br><span class="line">clean:</span><br><span class="line">    rm $(OBJS) $(TARGET)                             </span><br></pre></td></tr></tbody></table></figure><p>C</p><ul><li>特殊的变量：<ul><li>$@—目标文件</li><li>$^—所有依赖文件</li><li>$&lt;:第一个依赖文件</li><li>通配符：%</li></ul></li></ul><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">TARGET=app</span><br><span class="line">OBJS=<span class="built_in">list</span>.o main.o</span><br><span class="line">CC=gcc</span><br><span class="line">OBJS2=<span class="built_in">list</span>.c</span><br><span class="line">OBJS3=main.c</span><br><span class="line">path=-I ./include</span><br><span class="line">$(TARGET):$(OBJS)</span><br><span class="line">    $(CC)  $^ $(path) -o $@</span><br><span class="line">%.o:%.c</span><br><span class="line">    $(CC) -c $^ $(path) -o $@</span><br><span class="line">clean:</span><br><span class="line">    rm $(TARGET) $(OBJS)</span><br></pre></td></tr></tbody></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDB调试</title>
      <link href="/2023/03/20/GDB%E8%B0%83%E8%AF%95/"/>
      <url>/2023/03/20/GDB%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="gdb调式工具"><a href="#gdb调式工具" class="headerlink" title="gdb调式工具"></a>gdb调式工具</h3><ul><li>帮我们找出代码的问题</li></ul><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li>gcc -g 编译的文件名 ,回生产一个a.out的执行文件 这个文件就可以调式</li><li>gdb a.out</li></ol><h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><ol><li>r —- 运行程序</li><li>l —- 查看程序代码</li><li>b —- 设置断点，让程序跑到设置那一行</li><li>c —- 继续运行程序，直到下一个断点，如果没有直接运行完</li><li>p 变量名 —- 查看变量值</li><li>n —- 一行一行的运行（next），但是不进入函数</li><li>s —- 按行执行，但会进入函数</li><li>delete —- 删除所有断点</li><li>q —- 退出</li></ol><table><thead><tr><th align="left">命令</th><th align="left">简介</th><th align="left">gdb功能</th><th align="left">使用方法及备注</th></tr></thead><tbody><tr><td align="left">run</td><td align="left">r</td><td align="left">运行</td><td align="left">调试开始</td></tr><tr><td align="left">break</td><td align="left">b</td><td align="left">设置断点</td><td align="left">b断点处</td></tr><tr><td align="left">info</td><td align="left">i</td><td align="left">查看信息</td><td align="left">查看断点i b，等后面详细列举</td></tr><tr><td align="left">delete</td><td align="left">d</td><td align="left">删除断点</td><td align="left">delete断点编号</td></tr><tr><td align="left">disable</td><td align="left">disable</td><td align="left">禁用断点</td><td align="left">disable断点编号</td></tr><tr><td align="left">backtrace</td><td align="left">bt,where</td><td align="left">查看栈帧</td><td align="left">bt N显示开头N个栈帧， bt -N最后N个栈帧</td></tr><tr><td align="left">print</td><td align="left">p</td><td align="left">打印变量</td><td align="left">p argc打印变量，后面详细介绍</td></tr><tr><td align="left">x</td><td align="left">x</td><td align="left">显示内存</td><td align="left">x 0x1234567，后面详细介绍</td></tr><tr><td align="left">set</td><td align="left">set</td><td align="left">改变变量值</td><td align="left">set variable &lt;变量&gt; = &lt;表达式&gt;；比如 set var test=3</td></tr><tr><td align="left">next</td><td align="left">n</td><td align="left">执行下一行</td><td align="left">n;执行到下一行，不管下一行多复杂</td></tr><tr><td align="left">step</td><td align="left">s</td><td align="left">执行下一行</td><td align="left">s;若下一行为函数，则进入函数内部</td></tr><tr><td align="left">continue</td><td align="left">c,cont</td><td align="left">继续</td><td align="left">c为继续的次数，可省略，表示继续一次</td></tr><tr><td align="left">finish</td><td align="left">finish</td><td align="left"></td><td align="left">执行完成当前函数</td></tr><tr><td align="left">until</td><td align="left">until</td><td align="left"></td><td align="left">执行完成代码块</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C高级</title>
      <link href="/2023/03/16/C%E9%AB%98%E7%BA%A7/"/>
      <url>/2023/03/16/C%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>完成特点的程序模块</li><li>函数的分类<ul><li>库函数：给用户直接调用的函数（调用时需要加对应的头文件）</li><li>自定义函数：用户中间写的函数</li></ul></li></ul><h3 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h3><p>本质是一个数组，只是这个数组里面放的是指向函数的指针</p><p>一般形式：存储类型 数据类型 （*数组名【下标】）（数据类型 形参1，数据类型 形参2.。。。）</p><p>例如：int (*p[3])(int ，int)；</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">jian</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">cheng</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> a*b;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">chu</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> a/b;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{ </span><br><span class="line">    <span class="type">int</span> (*p[<span class="number">4</span>])(<span class="type">int</span> a,<span class="type">int</span> b)={add,jian,cheng,chu};</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%c%d"</span>,&amp;i,&amp;c,&amp;j);</span><br><span class="line">    <span class="keyword">switch</span>(c)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p[<span class="number">0</span>](i,j));<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p[<span class="number">1</span>](i,j));<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p[<span class="number">2</span>](i,j));<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'/'</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p[<span class="number">3</span>](i,j));<span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><h3 id="数的多文件封装"><a href="#数的多文件封装" class="headerlink" title="数的多文件封装"></a>数的多文件封装</h3><ol><li><p>头文件–可以放库头文件和所有功能函数的声明</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _JISUAN_H ---- 防止头文件重复包含</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _JISUAN_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> ---- 库头文件</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>; ---- 函数的声明</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure></li><li><p>功能文件— 自定义的头文件和所有功能函数代码</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"jisuan.h"</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line"> {</span><br><span class="line">     <span class="keyword">return</span> a+b;</span><br><span class="line"> }</span><br><span class="line"> <span class="type">int</span> <span class="title function_">jian</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line"> {</span><br><span class="line">     <span class="keyword">return</span> a-b;</span><br><span class="line"> }</span><br><span class="line"> <span class="type">int</span> <span class="title function_">cheng</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line"> {</span><br><span class="line">     <span class="keyword">return</span> a*b;</span><br><span class="line"> }</span><br><span class="line"> <span class="type">int</span> <span class="title function_">chu</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line"> {</span><br><span class="line">     <span class="keyword">return</span> a/b;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></li><li><p>主函数文件—自定义头文件和函数的调用</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">"jisuan.h"</span></span></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line"> {</span><br><span class="line">     <span class="type">int</span> x=<span class="number">12</span>,y=<span class="number">34</span>;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"sum=%d\n"</span>,add(x,y)); </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> }</span><br><span class="line">编译：至少编译两个.c文件，头文件默认在当前目录下去找</span><br><span class="line">    调用外部头文件：-I</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><ul><li>直接或间接的调用函数本身的函数</li><li>两个条件：调用自己，要有结束表示</li><li>每次调用自己都会给函数开辟空间，所以每次调用的变量都会被保留在当前函数内，</li><li>循环能做的递归能做，但递归能做的循环不能做</li></ul><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><ul><li><p>把函数作为一个参数，用函数指针来接受的函数</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>{</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>{</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>{</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>{</span><br><span class="line">    <span class="keyword">return</span> a / b;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span>(*p)(<span class="type">int</span> a,<span class="type">int</span> b))</span>{</span><br><span class="line">    <span class="keyword">return</span> p(a,b);</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line"><span class="type">int</span> a=<span class="number">21</span>,b=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"result = %d"</span>,calc(a,b,sub));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="动态开辟空间函数"><a href="#动态开辟空间函数" class="headerlink" title="动态开辟空间函数"></a>动态开辟空间函数</h3><h4 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h4><ul><li><p>在堆区中开辟空间，需要我们手动开辟，也需要我们手动释放</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="comment">//参数  size:需要开辟空间的大小</span></span><br><span class="line"><span class="comment">//返回值：开辟成功返回开辟的地址，失败返回空</span></span><br><span class="line"><span class="comment">//释放空间地址：</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *ptr)</span>;</span><br><span class="line"><span class="comment">//参数：ptr:要释放的首地址,是开辟的指针并不是指针本身所在的栈空间</span></span><br><span class="line"><span class="comment">//最后为了避免野指针，所以需要把NULL赋值给指针</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>练习</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> *p=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="type">int</span>)*<span class="number">10</span>);</span><br><span class="line">    <span class="type">int</span> *pp=p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) {</span><br><span class="line">        *p=rand();</span><br><span class="line">        p++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,*pp);</span><br><span class="line">        pp++;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p=<span class="literal">NULL</span>;</span><br><span class="line">    pp=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="const-—-变量常量化"><a href="#const-—-变量常量化" class="headerlink" title="const — 变量常量化"></a>const — 变量常量化</h4><blockquote><ul><li>const修饰指针</li><li>int const *p =&amp;a —p的内容不能改</li><li>int *const p =&amp;a —p的地址不能改</li></ul></blockquote><h4 id="define-—宏定义"><a href="#define-—宏定义" class="headerlink" title="define —宏定义"></a>define —宏定义</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> A char *</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="type">char</span> * B;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    A a,b;</span><br><span class="line">    B c,d;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%ld\n"</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b=%ld\n"</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c=%ld\n"</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"d=%ld\n"</span>,<span class="keyword">sizeof</span>(d));     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://typora-1304577690.cos.ap-chengdu.myqcloud.com/image-20230317090936491.png" alt="image-20230317090936491"></p><p>上面结果为上图 ，所可以看到b=1，表示把A a,b;中的A替换成了char *, 故为char *a,b;类型为char 而不是char *</p><h4 id="typedef-—-重命名"><a href="#typedef-—-重命名" class="headerlink" title="typedef —- 重命名"></a>typedef —- 重命名</h4><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">已知数据类型的重命名</span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="keyword">typedef</span> <span class="type">int</span> A;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line">     A a=<span class="number">12</span>;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"a=%d\n"</span>,a);    </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> }  </span><br></pre></td></tr></tbody></table></figure><h5 id="define-和typedef二者区别"><a href="#define-和typedef二者区别" class="headerlink" title="define 和typedef二者区别"></a>define 和typedef二者区别</h5><p><img src="https://typora-1304577690.cos.ap-chengdu.myqcloud.com/image-20230316145602504.png" alt="image-20230316145602504"></p><ul><li><p>练习 — 利用宏定义求出两个数之间的最大值</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(x,y) x&gt;y?x:y</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> a=<span class="number">5</span>,b=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,MAX(a,b));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="static-—静态区域存储"><a href="#static-—静态区域存储" class="headerlink" title="static —静态区域存储"></a>static —静态区域存储</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>修饰全局变量，限制作用域</li><li>修饰局部变量，延长生命周期（只会被初始化一次）</li><li>修饰函数，限制作用域</li></ul><h4 id="extern-—-调用外部文件变量"><a href="#extern-—-调用外部文件变量" class="headerlink" title="extern — 调用外部文件变量"></a>extern — 调用外部文件变量</h4><ul><li>只能调用全局变量</li><li>编译的时候要和调用的文件一起编译</li></ul><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">#extern2.c</span><br><span class="line"><span class="type">int</span> a=<span class="number">88</span>;</span><br><span class="line"></span><br><span class="line">#extern1.c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">#编译时要同时都要编译</span><br><span class="line">gcc exten1.c extern2.c</span><br><span class="line">./a.out</span><br><span class="line">#输出结果为</span><br><span class="line"><span class="number">88</span></span><br></pre></td></tr></tbody></table></figure><h3 id="struct-—-结构体"><a href="#struct-—-结构体" class="headerlink" title="struct — 结构体"></a>struct — 结构体</h3><ul><li><p>本质还是一个数据类型，只是里面可以放很多成员，这些成员数据类型可以医院也可以不一样，也可以是已知的数据类型，也可以是构造类型</p></li><li><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> 结构体名<span class="token punctuation">{</span>    数据类型 成员<span class="token number">1</span><span class="token punctuation">;</span>    数据类型 成员<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">-</span>分号不能省</code></pre></li><li><p>全局初始化：在头文件下，主函数上，就是在构造完这个结构体后立马初始化</p></li><li><p>局部初始化：在函数体中定义一个结构体变量</p><p><img src="https://typora-1304577690.cos.ap-chengdu.myqcloud.com/image-20230316154934228.png" alt="image-20230316154934228"></p></li><li><p>结构体赋值</p><ol><li>结构体赋结构体</li><li>成员单独赋值<ul><li>注意给字符数组赋值用strcpy()赋值</li></ul></li></ol></li><li><p><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>结构体大小(笔试会考)</p><ul><li>如果是64位系统系统默认安装8byte对齐，但是如果最大的数据类型小于8byte，就按照最大成员的数据类型的长度去计算（就是最大成员变量的倍数）</li><li>如果是32位系统系统默认安装4byte对齐，但是如果最大的数据类型小于4byte，就按照最大成员的数据类型的长度去计算（就是最大成员变量的倍数）</li><li>偶数地址存储</li><li>如果对齐自己能够放下后面的成员，就会在当前字节放，否则就空出来重新开辟</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell的基本运算符</title>
      <link href="/2023/03/15/shell%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2023/03/15/shell%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-基本运算符"><a href="#Shell-基本运算符" class="headerlink" title="Shell 基本运算符"></a>Shell 基本运算符</h1><p>Shell 和其他编程语言一样，支持多种运算符，包括：</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 <code>awk</code> 和 <code>expr</code>，<code>expr</code> 最常用。</p><p><code>expr</code> 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><p>例如，两个数相加(<strong>注意使用的是反引号 *<em>`*</em> 而不是单引号 *<em>‘*</em></strong>)：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> 2 + 2`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"两数之和为 : <span class="variable">$val</span>"</span></span><br></pre></td></tr></tbody></table></figure><p>执行脚本，输出结果如下所示：</p><blockquote><p>两数之和为 : 4</p></blockquote><p>两点注意：</p><ul><li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li><li>完整的表达式要被 <strong>`</strong> 包含，注意这个字符不是常用的单引号 <strong>'</strong>，在 Esc 键下边。</li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td><td align="left">`expr $a + $b` 结果为 30。</td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left">`expr $a - $b` 结果为 -10。</td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left">`expr $a * $b` 结果为  200。</td></tr><tr><td align="left">/</td><td align="left">除法</td><td align="left">`expr $b / $a` 结果为 2。</td></tr><tr><td align="left">%</td><td align="left">取余</td><td align="left">`expr $b % $a` 结果为 0。</td></tr><tr><td align="left">=</td><td align="left">赋值</td><td align="left">a=$b 把变量 b 的值赋给 a。</td></tr><tr><td align="left">==</td><td align="left">相等。用于比较两个数字，相同则返回 true。</td><td align="left">[ $a == $b ] 返回 false。</td></tr><tr><td align="left">!=</td><td align="left">不相等。用于比较两个数字，不相同则返回 true。</td><td align="left">[ $a != $b ] 返回 true。</td></tr></tbody></table><p><strong>注意：</strong>条件表达式要放在方括号之间，并且要有空格，例如: <strong><code>[$a==$b]</code></strong> 是错误的，必须写成<code>[ $a == $b ]</code>。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>算术运算符实例如下：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">*<span class="comment">#!/bin/bash*</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> + <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"a + b : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> - <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"a - b : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> \* <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"a * b : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$b</span> / <span class="variable">$a</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"b / a : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$b</span> % <span class="variable">$a</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"b % a : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 不等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure><p>执行脚本，输出结果如下所示：</p><blockquote><p>a + b : 30<br>a - b : -10<br>a * b : 200<br>b / a : 2<br>b % a : 0<br>a 不等于 b</p></blockquote><blockquote><p><strong>注意：</strong></p><ul><li>乘号(*)前边必须加反斜杠(\)才能实现乘法运算；</li><li>if…then…fi 是条件语句，后续将会讲解。</li><li>在 MAC 中 shell 的 expr 语法是：<code>$((表达式))</code>，此处表达式中的 “*“ 不需要转义符号 “\“ 。</li></ul></blockquote><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">检测两个数是否相等，相等返回 true。</td><td align="left">[ $a -eq $b ] 返回 false。</td></tr><tr><td align="left">-ne</td><td align="left">检测两个数是否不相等，不相等返回 true。</td><td align="left">[ $a -ne $b ] 返回 true。</td></tr><tr><td align="left">-gt</td><td align="left">检测左边的数是否大于右边的，如果是，则返回 true。</td><td align="left">[ $a -gt $b ] 返回 false。</td></tr><tr><td align="left">-lt</td><td align="left">检测左边的数是否小于右边的，如果是，则返回 true。</td><td align="left">[ $a -lt $b ] 返回 true。</td></tr><tr><td align="left">-ge</td><td align="left">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -ge $b ] 返回 false。</td></tr><tr><td align="left">-le</td><td align="left">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -le $b ] 返回 true。</td></tr></tbody></table><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>关系运算符实例如下：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -eq <span class="variable">$b</span> : a 等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -eq <span class="variable">$b</span>: a 不等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -ne <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -ne <span class="variable">$b</span>: a 不等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -ne <span class="variable">$b</span> : a 等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -gt <span class="variable">$b</span>: a 大于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -gt <span class="variable">$b</span>: a 不大于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -lt <span class="variable">$b</span>: a 小于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -lt <span class="variable">$b</span>: a 不小于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -ge <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -ge <span class="variable">$b</span>: a 大于或等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -ge <span class="variable">$b</span>: a 小于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -le <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -le <span class="variable">$b</span>: a 小于或等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -le <span class="variable">$b</span>: a 大于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure><p>执行脚本，输出结果如下所示：</p><blockquote><p>10 -eq 20: a 不等于 b<br>10 -ne 20: a 不等于 b<br>10 -gt 20: a 不大于 b<br>10 -lt 20: a 小于 b<br>10 -ge 20: a 小于 b<br>10 -le 20: a 小于或等于 b</p></blockquote><h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">!</td><td align="left">非运算，表达式为 true 则返回 false，否则返回 true。</td><td align="left">[ ! false ] 返回 true。</td></tr><tr><td align="left">-o</td><td align="left">或运算，有一个表达式为 true 则返回 true。</td><td align="left">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td align="left">-a</td><td align="left">与运算，两个表达式都为 true 才返回 true。</td><td align="left">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>布尔运算符实例如下：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> == <span class="variable">$b</span>: a 等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 100 -a <span class="variable">$b</span> -gt 15 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> 小于 100 且 <span class="variable">$b</span> 大于 15 : 返回 true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> 小于 100 且 <span class="variable">$b</span> 大于 15 : 返回 false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 100 -o <span class="variable">$b</span> -gt 100 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> 小于 100 或 <span class="variable">$b</span> 大于 100 : 返回 true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> 小于 100 或 <span class="variable">$b</span> 大于 100 : 返回 false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 5 -o <span class="variable">$b</span> -gt 100 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> 小于 5 或 <span class="variable">$b</span> 大于 100 : 返回 true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> 小于 5 或 <span class="variable">$b</span> 大于 100 : 返回 false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure><p>执行脚本，输出结果如下所示：</p><blockquote><p>10 != 20 : a 不等于 b<br>10 小于 100 且 20 大于 15 : 返回 true<br>10 小于 100 或 20 大于 100 : 返回 true<br>10 小于 5 或 20 大于 100 : 返回 false</p></blockquote><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑的 AND</td><td align="left">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td align="left">||</td><td align="left">逻辑的 OR</td><td align="left">[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td></tr></tbody></table><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>逻辑运算符实例如下：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$a</span> -lt 100 &amp;&amp; <span class="variable">$b</span> -gt 100 ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"返回 true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"返回 false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$a</span> -lt 100 || <span class="variable">$b</span> -gt 100 ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"返回 true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"返回 false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure><p>执行脚本，输出结果如下所示：</p><blockquote><p>返回 false<br>返回 true</p></blockquote><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">检测两个字符串是否相等，相等返回 true。</td><td align="left">[ $a = $b ] 返回 false。</td></tr><tr><td align="left">!=</td><td align="left">检测两个字符串是否不相等，不相等返回 true。</td><td align="left">[ $a != $b ] 返回 true。</td></tr><tr><td align="left">-z</td><td align="left">检测字符串长度是否为0，为0返回 true。</td><td align="left">[ -z $a ] 返回 false。</td></tr><tr><td align="left">-n</td><td align="left">检测字符串长度是否不为 0，不为 0 返回 true。</td><td align="left">[ -n “$a” ] 返回 true。</td></tr><tr><td align="left">$</td><td align="left">检测字符串是否不为空，不为空返回 true。</td><td align="left">[ $a ] 返回 true。</td></tr></tbody></table><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>字符串运算符实例如下：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">"abc"</span></span><br><span class="line">b=<span class="string">"efg"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> = <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> = <span class="variable">$b</span> : a 等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> = <span class="variable">$b</span>: a 不等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span>: a 等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-z <span class="variable">$a</span> : 字符串长度为 0"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-z <span class="variable">$a</span> : 字符串长度不为 0"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$a</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-n <span class="variable">$a</span> : 字符串长度不为 0"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-n <span class="variable">$a</span> : 字符串长度为 0"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> : 字符串不为空"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> : 字符串为空"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure><p>执行脚本，输出结果如下所示：</p><blockquote><p>abc = efg: a 不等于 b<br>abc != efg : a 不等于 b<br>-z abc : 字符串长度不为 0<br>-n abc : 字符串长度不为 0<br>abc : 字符串不为空</p></blockquote><h2 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h2><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-b file</td><td align="left">检测文件是否是块设备文件，如果是，则返回 true。</td><td align="left">[ -b $file ] 返回 false。</td></tr><tr><td align="left">-c file</td><td align="left">检测文件是否是字符设备文件，如果是，则返回 true。</td><td align="left">[ -c $file ] 返回 false。</td></tr><tr><td align="left">-d file</td><td align="left">检测文件是否是目录，如果是，则返回 true。</td><td align="left">[ -d $file ] 返回 false。</td></tr><tr><td align="left">-f file</td><td align="left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td align="left">[ -f $file ] 返回 true。</td></tr><tr><td align="left">-g file</td><td align="left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td align="left">[ -g $file ] 返回 false。</td></tr><tr><td align="left">-k file</td><td align="left">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td align="left">[ -k $file ] 返回 false。</td></tr><tr><td align="left">-p file</td><td align="left">检测文件是否是有名管道，如果是，则返回 true。</td><td align="left">[ -p $file ] 返回 false。</td></tr><tr><td align="left">-u file</td><td align="left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td align="left">[ -u $file ] 返回 false。</td></tr><tr><td align="left">-r file</td><td align="left">检测文件是否可读，如果是，则返回 true。</td><td align="left">[ -r $file ] 返回 true。</td></tr><tr><td align="left">-w file</td><td align="left">检测文件是否可写，如果是，则返回 true。</td><td align="left">[ -w $file ] 返回 true。</td></tr><tr><td align="left">-x file</td><td align="left">检测文件是否可执行，如果是，则返回 true。</td><td align="left">[ -x $file ] 返回 true。</td></tr><tr><td align="left">-s file</td><td align="left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td align="left">[ -s $file ] 返回 true。</td></tr><tr><td align="left">-e file</td><td align="left">检测文件（包括目录）是否存在，如果是，则返回 true。</td><td align="left">[ -e $file ] 返回 true</td></tr></tbody></table><p>其他检查符：</p><ul><li><strong>-S</strong>: 判断某文件是否 socket。</li><li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</li></ul><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>变量 file 表示文件 <strong>/var/www/runoob/test.sh</strong>，它的大小为 100 字节，具有 <strong>rwx</strong> 权限。下面的代码，将检测该文件的各种属性：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file=<span class="string">"/var/www/runoob/test.sh"</span></span><br><span class="line"><span class="keyword">if</span> [ -r <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件可读"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件不可读"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -w <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件可写"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件不可写"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -x <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件可执行"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件不可执行"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件为普通文件"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件为特殊文件"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件是个目录"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件不是个目录"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -s <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件不为空"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件为空"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件存在"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件不存在"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure><p>执行脚本，输出结果如下所示：</p><blockquote><p>文件可读<br>文件可写<br>文件可执行<br>文件为普通文件<br>文件不是个目录<br>文件不为空<br>文件存在</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
            <tag> sh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础</title>
      <link href="/2023/03/13/linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/03/13/linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><h6 id="底行模式"><a href="#底行模式" class="headerlink" title="底行模式"></a>底行模式</h6><ul><li><strong><font style="color : #95ba ">s/字符串1/字符串2</font></strong><ul><li>只替换这行中的第一个字符串1</li></ul></li><li><strong><font style="color : #95ba ">%s/字符串1/字符串2</font></strong><ul><li>替换文件每行的第一个字符串1</li></ul></li><li><strong><font style="color : #95ba ">%s/字符串1/字符串2/g</font></strong><ul><li>替换文件中的所有字符串1</li></ul></li><li><strong><font style="color : #95ba ">set mouse=a </font></strong><ul><li>让光标跟着鼠标移动</li></ul></li><li><strong><font style="color : #95ba ">set mouse-=a</font></strong><ul><li>让贯标不要跟着鼠标移动</li></ul></li></ul><h6 id="vsp"><a href="#vsp" class="headerlink" title="vsp"></a>vsp</h6><ul><li>vsp +文件名<ul><li>在窗口的中再打开一个文件，两边同时打开</li></ul></li><li>ctrl+w<ul><li>切换窗口</li></ul></li></ul><h5 id="缩进："><a href="#缩进：" class="headerlink" title="缩进："></a>缩进：</h5><ul><li>命令行模式：gg=G</li><li>可视化模式：v，上下键选中要对齐的代码，按 =</li></ul><p>底行模式：set number 不显示行号，set number n 显示行号</p></blockquote><h4 id="gcc编译器"><a href="#gcc编译器" class="headerlink" title="gcc编译器"></a>gcc编译器</h4><blockquote><ol><li><strong><font style="color : #95ba ">预处理</font></strong> -E <ol><li>处理头文件和宏定义<ul><li>gcc -E 1.c -o 1.i</li></ul></li></ol></li><li><strong><font style="color : #95ba ">编译</font></strong> -S<ol><li>检查代码的错误<ul><li>gcc -S 1.i -o 1.s</li></ul></li></ol></li><li><strong><font style="color : #95ba ">汇编</font></strong> -c<ol><li>将文件编程计算机能够识别的二进制文件<ul><li>gcc -c 1.s -o 1.o</li></ul></li></ol></li><li><strong><font style="color : #95ba ">链接</font></strong><ol><li>生产执行文件<ul><li>gcc 1.o -o 1.out</li></ul></li></ol></li><li><strong><font style="color : #95ba ">选项</font></strong><ul><li>-o<ul><li>修改执行文件名</li></ul></li><li>-Wall<ul><li>显示所有警告</li></ul></li><li>-w<ul><li>隐藏所有警告</li></ul></li></ul></li></ol></blockquote><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><blockquote><ol><li><p><strong><font style="color : #95ba ">chmod —修改文件权限</font></strong></p><ul><li>u  –用户自己</li><li>g  – 用户组</li><li>o  –其他用户</li></ul><ol><li>chmod u+x 文件名   —给当前用户增加执行权限</li><li>chmod +x 文件名   —给所有用户增加执行权限</li><li>chmod -x 文件名    —给所有用户减去执行权限</li></ol></li><li><p><strong><font style="color : #95ba ">硬链接</font></strong></p><ol><li><p>用法</p><ul><li>ln 文件名 连接文件名<ul><li>如果把本体文件删掉，依旧可以单独试用，类型和原文件一模一样，移动源文件也依旧可以</li></ul></li></ul></li><li><p>选项 -s  —改成软连接</p><ul><li>ln -s 文件名 软连接文件名<ul><li>如果本体文件删除或者移动，软连接失效；大大缩小了文件的大小</li></ul></li></ul></li></ol></li></ol></blockquote><h4 id="文件的压缩和解压"><a href="#文件的压缩和解压" class="headerlink" title="文件的压缩和解压"></a>文件的压缩和解压</h4><blockquote><ol><li><p><strong><font style="color : #95ba ">gzip和gunzip</font></strong></p><ul><li>源文件被替换成之后的文件，会生成一个.gz的压缩文件，用vi能看到源文件内容，用cat在终端查看乱码</li></ul></li><li><p><strong><font style="color : #95ba ">bzip2和bunzip2</font></strong></p><ul><li>相比于gzip，压缩性能较弱，但是时间快</li></ul></li><li><p><strong><font style="color : #95ba ">xz和unxz</font></strong></p><ul><li>同第二个</li></ul></li></ol></blockquote><h4 id="tar-归档和释放"><a href="#tar-归档和释放" class="headerlink" title="tar-归档和释放"></a>tar-归档和释放</h4><blockquote><p><strong><font style="color : #95ba ">tar</font></strong></p><ul><li>选项<ul><li>-c   创建归档文件</li><li>-v   显示归档或者释放过程</li><li>-x   释放归档文件</li><li>-f   用户指定归档文件的文件名，否则使用默认名称   .tar</li><li>-j   以bzip2方式压缩</li><li>-z   以gzip方式压缩</li></ul></li><li>使用<ul><li>tar -czvf 压缩或归档之后的文件名 目标文件名</li><li>tar -xvf  要释放之后的文件名 目标文件名</li></ul></li></ul></blockquote><h4 id="diff（没啥用）"><a href="#diff（没啥用）" class="headerlink" title="diff（没啥用）"></a>diff（没啥用）</h4><blockquote><p>作用：判断两个文件是否相同，相同没有输出结构。</p></blockquote><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><blockquote><ul><li><p>作用：查询的字符串，查询文件名—查询特定文件的内容</p></li><li><p>选项</p><ul><li>grep -r 查询的字符串  路径 — 查询一个路径下所有文件的内容</li></ul></li></ul></blockquote><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><blockquote><ul><li>作用：查看文件信息</li><li>选项：<ul><li>-l：查看行数</li><li>-w：查看单词个数</li><li>-c：查看字符个数</li></ul></li></ul><p><img src="https://typora-1304577690.cos.ap-chengdu.myqcloud.com/image-20230314101405099.png" alt="image-20230314101405099"></p></blockquote><h4 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h4><blockquote><ol><li><strong><font style="color : #95ba ">dpkg工具</font></strong><ul><li>离线下载</li><li>下载<ul><li>sudo dpkg -i 安装包</li></ul></li><li>卸载<ul><li>sudo dpkg -r 软件名</li></ul></li></ul></li><li><strong><font style="color : #95ba ">apt工具</font></strong><ul><li>在线下载<ul><li>apt install cmatrix —- 代码雨</li><li>apt install lolcat —- 彩色文字</li><li>apt install fortunes-zh — 文章</li></ul></li></ul></li></ol></blockquote><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><blockquote><ol><li><strong><font style="color : #95ba ">切换用户</font></strong><ul><li>su 用户名</li></ul></li><li><strong><font style="color : #95ba ">查看用户</font></strong><ul><li>vi /etc/passwd</li></ul></li><li><strong><font style="color : #95ba ">查看用户组</font></strong><ul><li>vi /etc/group</li></ul></li><li><strong><font style="color : #95ba ">添加用户</font></strong><ul><li>adduser 用户名</li></ul></li><li><strong><font style="color : #95ba ">删除用户</font></strong><ul><li>deluser 用户名</li><li>但是我们一般进入passwd和group两个文件去删除</li></ul></li></ol></blockquote><h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><blockquote><ol><li><strong><font style="color : #95ba ">ps</font></strong><ul><li>作用：前台进程</li><li>选项<ul><li>ps -aux 查看所有进程</li></ul></li></ul></li><li><strong><font style="color : #95ba ">pstree</font></strong><ul><li>作用：树形展示</li></ul></li><li><strong><font style="color : #95ba ">kill -9 &lt;进程号&gt;</font></strong><ul><li>作用：结束进程</li></ul></li><li><strong><font style="color : #95ba ">top</font></strong><ul><li>作用：查看进程（从占用cpu最大的开始展示)，类似于任务管理器</li></ul></li></ol></blockquote><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><blockquote><ul><li>shutdown <ul><li>作用：关机</li><li>shutdown -r now 重启</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字电路</title>
      <link href="/2023/03/08/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
      <url>/2023/03/08/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2021/09/21/SpringMVC/"/>
      <url>/2021/09/21/SpringMVC/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>ssm：mybatis + Spring + SpringMVC <strong>MVC三层架构</strong></p><p>JavaSE：认真学习， 老师带，入门快</p><p>JavaWeb：认真学习，老师带，入门快</p><p>SSM框架：研究官方文档,锻炼自学能力，锻炼笔记能力，锻炼项目能力</p><p>SpringMVC + Vue +SpringBoot + SpringCloud + Linux</p><p>SSM = javaWeb做项目</p><p>Spring：IOC和AOP</p><p>SpringMVC：SpringMVC的执行流程！</p><p>SpringMVC ：SSM框架整合！</p><p>MVC：模型（dao，service） 视图 （jsp）控制器（Servlet）</p><p>dao</p><p>service</p><p>servlet：转发，重定向</p><p>jsp/html</p><p>JSP ：本质上就是一个Servlet</p><p>假设：你的项目的架构，是设计好的，还是演进的？</p><p>一定是演进的</p><h2 id="回顾servlet"><a href="#回顾servlet" class="headerlink" title="回顾servlet"></a>回顾servlet</h2><p><strong>导入依赖</strong></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>有一个jsp-api没有</p><p><strong>建立servlet</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);<span class="comment">//解决中文乱码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取前端参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getParameter(<span class="string">"method"</span> );</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">"add"</span>)) {</span><br><span class="line">            req.getSession().setAttribute(<span class="string">"msg"</span>, <span class="string">"执行了add方法"</span>);</span><br><span class="line">            <span class="keyword">if</span> (method.equals(<span class="string">"delete"</span>)) {</span><br><span class="line">                req.getSession().setAttribute(<span class="string">"msg"</span>, <span class="string">"执行了delete方法"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.调用业务层</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.视图转发或者重定向</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/test.jsp"</span>).forward(req,resp);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>web.xml中注册servlet</strong></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.miaobuyi.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>在前端中发起请求</strong></p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 杨宇</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">9</span>/<span class="number">13</span></span><br><span class="line">  Time: <span class="number">9</span>:<span class="number">55</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"/hello"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"method"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>MVC框架要做哪些事情</strong></p><ol><li>将ur|映射到java类或java类的方法</li><li>封装用户提交的数据</li><li>处理请求–调用相关的业务处理–封装响应数据</li><li>将响应的数据进行渲染. jsp/ html等表示层数据</li></ol><p><strong>SrpingMVC的特点</strong>：</p><ol><li>轻量级，简单易学</li><li>高效，基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝集合</li><li>约定优于配置</li><li>功能强大：RESTful，数据验证，格式化，本地化，主题等</li><li>简介灵活</li></ol><h2 id="一、第一个MVC程序"><a href="#一、第一个MVC程序" class="headerlink" title="一、第一个MVC程序"></a>一、第一个MVC程序</h2><h3 id="配置版"><a href="#配置版" class="headerlink" title="配置版"></a>配置版</h3><p>1、新建一个Moudle ， springmvc-02-hello ， 添加web的支持！</p><p>2、确定导入了SpringMVC 的依赖！</p><p>3、配置web.xml  ， 注册DispatcherServlet</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>4、编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml  : [servletname]-servlet.xml</p><p>说明，这里的名称要求是按照官方来的</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>5、添加 处理器映射器</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>6、添加 处理器适配器</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>7、添加 视图解析器</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>8、编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：这里我们先导入Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> {</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">       mv.addObject(<span class="string">"msg"</span>,<span class="string">"HelloSpringMVC!"</span>);</span><br><span class="line">       <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">       mv.setViewName(<span class="string">"hello"</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>9、将自己的类交给SpringIOC容器，注册bean</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.kuang.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>10、写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">${msg}</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>11、配置Tomcat 启动测试！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IicxBZbkh0D4dJJiaXSzGEXyMkHnqOKmXfLlOAOV7vFBtsDVX1libCnlXwtCN3BGIxWkic8QVe9wD2nA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li>查看控制台输出，看一下是不是缺少了什么jar包。</li><li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li><li>重启Tomcat 即可解决！</li></ol><p>小结：看这个估计大部分同学都能理解其中的原理了，但是我们实际开发才不会这么写，不然就疯了，还学这个玩意干嘛！我们来看个注解版实现，这才是SpringMVC的精髓，到底有多么简单，看这个图就知道了。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IicxBZbkh0D4dJJiaXSzGEXyoSJbC4E1L3euOFzcEzSF0fn4gzjNbpwyXLQCrbLYarJ46HxwC8qz5w/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h3 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h3><p>1、新建一个Moudle，springmvc-03-hello-annotation 。添加web支持！</p><p>2、由于Maven可能存在资源过滤的问题，我们将配置完善</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3、在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p><p>4、配置web.xml</p><p>注意点：</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>/ 和 /* 的区别：</strong>&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</p><ol><li><ul><li>注意web.xml版本问题，要最新版！</li><li>注册DispatcherServlet</li><li>关联SpringMVC的配置文件</li><li>启动级别为1</li><li>映射路径为 / 【不要用/*，会404】</li></ul></li></ol><p>5、添加Spring MVC配置文件</p><p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p><ol><li><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 让Spring MVC不处理静态资源 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--   支持mvc注解驱动       在spring中一般采用@RequestMapping注解来完成映射关系       要想使@RequestMapping注解生效       必须向上下文中注册DefaultAnnotationHandlerMapping       和一个AnnotationMethodHandlerAdapter实例       这两个实例分别在类级别和方法级别处理。       而annotation-driven配置帮助我们自动完成上述两个实例的注入。    --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 前缀 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 后缀 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>highlight plaintext<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2. 在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3. - 让IOC的注解生效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   - 静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 .....<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   - MVC的注解驱动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   - 配置视图解析器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6、创建Controller<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1. 编写一个Java控制类：com.kuang.controller.HelloController , 注意编码规范<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2. ```java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   package com.kuang.controller;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   import org.springframework.stereotype.Controller;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   import org.springframework.ui.Model;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   import org.springframework.web.bind.annotation.RequestMapping;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   @Controller<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   @RequestMapping("/HelloController")<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   public class HelloController {<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      //真实访问地址 : 项目名/HelloController/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      @RequestMapping("/hello")<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      public String sayHello(Model model){<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          //向模型中添加属性msg与值，可以在JSP页面中取出并渲染<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          model.addAttribute("msg","hello,SpringMVC");<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          //web-inf/jsp/hello.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          return "hello";<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span></code></pre></li><li><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp。</li></ul></li></ol><p>7、创建视图层</p><ol><li><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p></li><li><p>可以通过EL表示取出Model中存放的值，或者对象；</p></li><li><p>```html<br>&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;</p>   <title></title>${msg}<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">**8、配置Tomcat运行**</span><br><span class="line"></span><br><span class="line">配置Tomcat ，  开启服务器 ， 访问 对应的请求路径！</span><br><span class="line"></span><br><span class="line">![图片](https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IicxBZbkh0D4dJJiaXSzGEXy3eJXYyibMOnIWqqye9RYfu4zdnE5oYmxiaUHaxAnvZkVEXlyXysRMhTg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1)</span><br><span class="line"></span><br><span class="line">**OK，运行成功！**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 小结</span><br><span class="line"></span><br><span class="line">实现步骤其实非常的简单：</span><br><span class="line"></span><br><span class="line">1. 新建一个web项目</span><br><span class="line">2. 导入相关jar包</span><br><span class="line">3. 编写web.xml , 注册DispatcherServlet</span><br><span class="line">4. 编写springmvc配置文件</span><br><span class="line">5. 接下来就是去创建对应的控制类 , controller</span><br><span class="line">6. 最后完善前端视图和controller之间的对应</span><br><span class="line">7. 测试运行调试.</span><br><span class="line"></span><br><span class="line">使用springMVC必须配置的三大件：</span><br><span class="line"></span><br><span class="line">**处理器映射器、处理器适配器、视图解析器**</span><br><span class="line"></span><br><span class="line">通常，我们只需要**手动配置视图解析器**，而**处理器映射器**和**处理器适配器**只需要开启**注解驱动**即可，而省去了大段的xml配置</span><br><span class="line"></span><br><span class="line">再来回顾下原理吧~</span><br><span class="line"></span><br><span class="line">![图片](https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IicxBZbkh0D4dJJiaXSzGEXyzsXDPy7oAJFsBvvBibiaFWpSp75vFIEOCBm7wnt4JKXJCHB9MflUycKw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1)</span><br><span class="line"></span><br><span class="line">简要分析执行流程</span><br><span class="line"></span><br><span class="line">1. DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。户发出请求,</span><br><span class="line">DispatcherServlet接收请求并拦截请求。</span><br><span class="line">* 我们假设请求的url为: http://localhost:8080/SpringMVC/hello</span><br><span class="line">*  如上url拆分成三部分:</span><br><span class="line">*  http://localhost:8080服务器域名</span><br><span class="line">*  SpringMVC部署在服务器.上的web站点</span><br><span class="line">* hello表示控制器</span><br><span class="line">*  通过分析，如上urI表示为:请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</span><br><span class="line">2. HandlerMapping为处理器映射。DispatcherServlet调用</span><br><span class="line">HandlerMa pping, HandlerMapping根据请求url查找Handler。</span><br><span class="line">3. HandlerExecution表示具体的Handler,其主要作用是根据ur|查找控制器，如， 上url被查找控制器</span><br><span class="line">为: hello。</span><br><span class="line">4. HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</span><br><span class="line">5. HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</span><br><span class="line">6. Handler让具体的Controller执行。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 二、Controller及RestFul风格</span><br><span class="line"></span><br><span class="line">### 控制器Controller</span><br><span class="line"></span><br><span class="line">- 控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</span><br><span class="line"></span><br><span class="line">- 控制器负责解析用户的请求并将其转换为一个模型。</span><br><span class="line"></span><br><span class="line">- 在Spring MVC中一个控制器类可以包含多个方法</span><br><span class="line"></span><br><span class="line">- 在Spring MVC中，对于Controller的配置方式有很多种</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">### 实现Controller接口</span><br><span class="line"></span><br><span class="line">Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//实现该接口的类获得控制器功能</span><br><span class="line">public interface Controller {</span><br><span class="line">   //处理请求且返回一个模型与视图对象</span><br><span class="line">   ModelAndView handleRequest(HttpServletRequest var1, HttpServletResponse var2) throws Exception;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p><strong>测试</strong></p><ol><li><p>新建一个Moudle，springmvc-04-controller 。将刚才的03 拷贝一份, 我们进行操作！</p></li><li><ul><li>删掉HelloController</li><li>mvc的配置文件只留下 视图解析器！</li></ul></li><li><p>编写一个Controller类，ControllerTest1</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//定义控制器</span></span><br><span class="line"><span class="comment">//注意点：不要导错包，实现Controller接口，重写方法；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest1</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> {</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">       mv.addObject(<span class="string">"msg"</span>,<span class="string">"Test1Controller"</span>);</span><br><span class="line">       mv.setViewName(<span class="string">"test"</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/t1"</span> <span class="attr">class</span>=<span class="string">"com.kuang.controller.ControllerTest1"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Kuangshen&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">${msg}</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 / ，所以请求不用加项目名，OK！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JOmNdhqNbrRK9XaseXIDsuEHNOK76U1NldDnfJupK4VyyRv7CqWibIz7iccC8vDXSwpHYxicl30dDYQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p></li></ol><p><strong>说明：</strong></p><ul><li><p>实现接口Controller定义控制器是较老的办法</p></li><li><p>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</p></li></ul><h3 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h3><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.kuang.controller"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>增加一个ControllerTest2类，使用注解实现；</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//@Controller注解的类会自动添加到Spring上下文中</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest2</span>{</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping("/t2")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span>{</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">"msg"</span>, <span class="string">"ControllerTest2"</span>);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>运行tomcat测试</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JOmNdhqNbrRK9XaseXIDsuOfarw6u03VH0lJg4tnml6mspCRTKGuwzQQy7rx7NMia7t5Xu1DYOQiag/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p></li></ul><p><strong>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p><p><strong>注解方式是平时使用的最多的方式！</strong></p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p><strong>@RequestMapping</strong></p><ul><li><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p></li><li><p>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</p></li><li><p>只注解在方法上面</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> {</span><br><span class="line">   <span class="meta">@RequestMapping("/h1")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名 / h1</p></li><li><p>同时注解类与方法</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/admin")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> {</span><br><span class="line">   <span class="meta">@RequestMapping("/h1")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名/ admin /h1  , 需要先指定类的路径再指定方法的路径；</p></li></ul><h3 id="RestFul-风格"><a href="#RestFul-风格" class="headerlink" title="RestFul 风格"></a>RestFul 风格</h3><p><strong>概念</strong></p><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>功能</strong></p><p>资源：互联网所有的事物都可以被抽象为资源</p><p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p><p>分别对应 添加、 删除、修改、查询。</p><p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p>​<a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p><p>​<a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p><p>​<a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p><p>​<a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p><p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><p>​<a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</p><p>​<a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</p><p>​<a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</p><p>​<a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</p><p><strong>学习测试</strong></p><ol><li><p>在新建一个类 RestFulController</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestFulController</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>在Spring MVC中可以使用  @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestFulController</span> {</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping("/commit/{p1}/{p2}")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> p1, <span class="meta">@PathVariable</span> <span class="type">int</span> p2, Model model)</span>{</span><br><span class="line">       </span><br><span class="line">       <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> p1+p2;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">"msg"</span>, <span class="string">"结果："</span>+result);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">       </span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>我们来测试请求查看下</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JOmNdhqNbrRK9XaseXIDsu5BqyAspPK6GlhgxeV1nS0RWPnUfVBuaiadicaicQepibic2EVkyDflUh3qQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p></li><li><p>思考：使用路径变量的好处？</p></li><li><ul><li><p>使路径变得更加简洁；</p></li><li><p>获得参数更加方便，框架会自动进行类型转换。</p></li><li><p>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JOmNdhqNbrRK9XaseXIDsumkKQDDBx9D7E67IK9dmVtHnjn0WjPSOZxKnwz9AXrTPRLy6Xu42yrg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p></li></ul></li><li><p>我们来修改下对应的参数类型，再次测试</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径</span></span><br><span class="line"><span class="meta">@RequestMapping("/commit/{p1}/{p2}")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> p1, <span class="meta">@PathVariable</span> String p2, Model model)</span>{</span><br><span class="line"></span><br><span class="line">   <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> p1+p2;</span><br><span class="line">   <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">   model.addAttribute(<span class="string">"msg"</span>, <span class="string">"结果："</span>+result);</span><br><span class="line">   <span class="comment">//返回视图位置</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JOmNdhqNbrRK9XaseXIDsuJXyVjg5EaXZiaO78ibGzhUXnEz5UlbRTRDKzGNh0t5WspXrpvSLe9y9w/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p></li></ol><p><strong>使用method属性指定请求类型</strong></p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><p>我们来测试一下：</p><ul><li><p>增加一个方法</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/hello",method = {RequestMethod.POST})</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index2</span><span class="params">(Model model)</span>{</span><br><span class="line">   model.addAttribute(<span class="string">"msg"</span>, <span class="string">"hello!"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JOmNdhqNbrRK9XaseXIDsucZBtV1jA2Clpa2utiajS6zkWWoYIo8VhqlUGIOSiacAjCsiaJEOeVvNUQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p></li><li><p>如果将POST修改为GET则正常了；</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是Get请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/hello",method = {RequestMethod.GET})</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index2</span><span class="params">(Model model)</span>{</span><br><span class="line">   model.addAttribute(<span class="string">"msg"</span>, <span class="string">"hello!"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JOmNdhqNbrRK9XaseXIDsua1f90EJnCRJxuBoeSWiaTmdVfjIDgUo5v6ENY5N307GfoXUp4PxYu0g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p></li></ul><p><strong>小结：</strong></p><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p><p>方法级别的注解变体有如下几个：组合注解</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@GetMapping</span><br><span class="line">@PostMapping</span><br><span class="line">@PutMapping</span><br><span class="line">@DeleteMapping</span><br><span class="line">@PatchMapping</span><br></pre></td></tr></tbody></table></figure><p>@GetMapping 是一个组合注解，平时使用的会比较多！</p><p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p><h3 id="扩展：小黄鸭调试法"><a href="#扩展：小黄鸭调试法" class="headerlink" title="扩展：小黄鸭调试法"></a>扩展：小黄鸭调试法</h3><p>场景一：<em>我们都有过向别人（甚至可能向完全不会编程的人）提问及解释编程问题的经历，但是很多时候就在我们解释的过程中自己却想到了问题的解决方案，然后对方却一脸茫然。</em></p><p>场景二：你的同行跑来问你一个问题，但是当他自己把问题说完，或说到一半的时候就想出答案走了，留下一脸茫然的你。</p><p>其实上面两种场景现象就是所谓的小黄鸭调试法（Rubber Duck Debuging），又称橡皮鸭调试法，它是我们软件工程中最常使用调试方法之一。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JOmNdhqNbrRK9XaseXIDsu4MibRVpZicicSVRRjb0lAblXjlHHppY3gSBn8iaTsa2oLEMO9S3bPCDHoA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>此概念据说来自《程序员修炼之道》书中的一个故事，传说程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码，然后很快就将问题定位修复了。</p><h2 id="三、数据处理及跳转"><a href="#三、数据处理及跳转" class="headerlink" title="三、数据处理及跳转"></a>三、数据处理及跳转</h2><h3 id="结果跳转方式"><a href="#结果跳转方式" class="headerlink" title="结果跳转方式"></a>结果跳转方式</h3><h4 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h4><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>对应的controller类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest1</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> {</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">       mv.addObject(<span class="string">"msg"</span>,<span class="string">"ControllerTest1"</span>);</span><br><span class="line">       mv.setViewName(<span class="string">"test"</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h4><p>通过设置ServletAPI , 不需要视图解析器 .</p><p>1、通过HttpServletResponse进行输出</p><p>2、通过HttpServletResponse实现重定向</p><p>3、通过HttpServletResponse实现转发</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultGo</span> {</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping("/result/t1")</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">       rsp.getWriter().println(<span class="string">"Hello,Spring BY servlet API"</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping("/result/t2")</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">       rsp.sendRedirect(<span class="string">"/index.jsp"</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping("/result/t3")</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       req.setAttribute(<span class="string">"msg"</span>,<span class="string">"/result/t3"</span>);</span><br><span class="line">       req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/test.jsp"</span>).forward(req,rsp);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="SpringMVC-1"><a href="#SpringMVC-1" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class ResultSpringMVC {</span><br><span class="line">   @RequestMapping("/rsm/t1")</span><br><span class="line">   public String test1(){</span><br><span class="line">       //转发</span><br><span class="line">       return "/index.jsp";</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   @RequestMapping("/rsm/t2")</span><br><span class="line">   public String test2(){</span><br><span class="line">       //转发二</span><br><span class="line">       return "forward:/index.jsp";</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   @RequestMapping("/rsm/t3")</span><br><span class="line">   public String test3(){</span><br><span class="line">       //重定向</span><br><span class="line">       return "redirect:/index.jsp";</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSpringMVC2</span> {</span><br><span class="line">   <span class="meta">@RequestMapping("/rsm2/t1")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping("/rsm2/t2")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">()</span>{</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">       <span class="comment">//return "redirect:hello.do"; //hello.do为另一个请求/</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="处理提交数据"><a href="#处理提交数据" class="headerlink" title="处理提交数据"></a>处理提交数据</h4><p><strong>1、提交的域名称和处理方法的参数名一致</strong></p><p>提交数据 : <a href="http://localhost:8080/hello?name=kuangshen">http://localhost:8080/hello?name=kuangshen</a></p><p>处理方法 :</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/hello")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String name)</span>{</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>后台输出 : kuangshen</p><p><strong>2、提交的域名称和处理方法的参数名不一致</strong></p><p>提交数据 : <a href="http://localhost:8080/hello?username=kuangshen">http://localhost:8080/hello?username=kuangshen</a></p><p>处理方法 :</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestParam("username") : username提交的域的名称 .</span></span><br><span class="line"><span class="meta">@RequestMapping("/hello")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam("username")</span> String name)</span>{</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>后台输出 : kuangshen</p><p><strong>3、提交的是一个对象</strong></p><p>要求提交的表单域和对象的属性名一致  , 参数使用对象即可</p><p>1、实体类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="comment">//构造</span></span><br><span class="line">   <span class="comment">//get/set</span></span><br><span class="line">   <span class="comment">//tostring()</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、提交数据 : <a href="http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15">http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15</a></p><p>3、处理方法 :</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">user</span><span class="params">(User user)</span>{</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>后台输出 : User { id=1, name=’kuangshen’, age=15 }</p><p>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</p><h4 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h4><p><strong>第一种 : 通过ModelAndView</strong></p><p>我们前面一直都是如此 . 就不过多解释</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest1</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> {</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">       mv.addObject(<span class="string">"msg"</span>,<span class="string">"ControllerTest1"</span>);</span><br><span class="line">       mv.setViewName(<span class="string">"test"</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>第二种 : 通过ModelMap</strong></p><p>ModelMap</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/hello")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam("username")</span> String name, ModelMap model)</span>{</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute("name",name);</span></span><br><span class="line">   model.addAttribute(<span class="string">"name"</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>第三种 : 通过Model</strong></p><p>Model</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/ct2/hello")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam("username")</span> String name, Model model)</span>{</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute("name",name);</span></span><br><span class="line">   model.addAttribute(<span class="string">"msg"</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>就对于新手而言简单来说使用区别就是：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</span><br><span class="line"></span><br><span class="line">ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</span><br><span class="line"></span><br><span class="line">ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</span><br></pre></td></tr></tbody></table></figure><p>当然更多的以后开发考虑的更多的是性能和优化，就不能单单仅限于此的了解。</p><p><strong>请使用80%的时间打好扎实的基础，剩下18%的时间研究框架，2%的时间去学点英文，框架的官方文档永远是最好的教程。</strong></p><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><p>测试步骤：</p><p>1、我们可以在首页编写一个提交的表单</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/e/t"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、后台编写对应的处理类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encoding</span> {</span><br><span class="line">   <span class="meta">@RequestMapping("/e/t")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Model model,String name)</span>{</span><br><span class="line">       model.addAttribute(<span class="string">"msg"</span>,name); <span class="comment">//获取表单提交的值</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"test"</span>; <span class="comment">//跳转到test页面显示输入的值</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>3、输入中文测试，发现乱码</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IY4LDnTZkk5dLWKMlUlx0gqJOSOA4PQnmhg0rYQYexQXAvUWXvBRf8kN3hk6dDzHxC3w97QicX9XQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p><p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p><p>修改了xml文件需要重启服务器！</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>但是我们发现 , 有些极端情况下.这个过滤器对get的支持不好 .</p><p>处理方法 :</p><p>1、修改tomcat配置文件 ：设置编码！</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">"utf-8"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、自定义过滤器</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 解决get和post请求 全部乱码的过滤器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> {</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> {</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException {</span><br><span class="line">       <span class="comment">//处理response的字符编码</span></span><br><span class="line">       HttpServletResponse myResponse=(HttpServletResponse) response;</span><br><span class="line">       myResponse.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">       <span class="comment">// 对request包装增强</span></span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">myrequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRequest</span>(httpServletRequest);</span><br><span class="line">       chain.doFilter(myrequest, response);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException {</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义request对象，HttpServletRequest的包装类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRequest</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> {</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">   <span class="comment">//是否编码的标记</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> hasEncode;</span><br><span class="line">   <span class="comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MyRequest</span><span class="params">(HttpServletRequest request)</span> {</span><br><span class="line">       <span class="built_in">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">       <span class="built_in">this</span>.request = request;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Map <span class="title function_">getParameterMap</span><span class="params">()</span> {</span><br><span class="line">       <span class="comment">// 先获得请求方式</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">       <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"post"</span>)) {</span><br><span class="line">           <span class="comment">// post请求</span></span><br><span class="line">           <span class="keyword">try</span> {</span><br><span class="line">               <span class="comment">// 处理post乱码</span></span><br><span class="line">               request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">               <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">          } <span class="keyword">catch</span> (UnsupportedEncodingException e) {</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">          }</span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"get"</span>)) {</span><br><span class="line">           <span class="comment">// get请求</span></span><br><span class="line">           Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">           <span class="keyword">if</span> (!hasEncode) { <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">               <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) {</span><br><span class="line">                   String[] values = parameterMap.get(parameterName);</span><br><span class="line">                   <span class="keyword">if</span> (values != <span class="literal">null</span>) {</span><br><span class="line">                       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) {</span><br><span class="line">                           <span class="keyword">try</span> {</span><br><span class="line">                               <span class="comment">// 处理get乱码</span></span><br><span class="line">                               values[i] = <span class="keyword">new</span> <span class="title class_">String</span>(values[i]</span><br><span class="line">                                      .getBytes(<span class="string">"ISO-8859-1"</span>), <span class="string">"utf-8"</span>);</span><br><span class="line">                          } <span class="keyword">catch</span> (UnsupportedEncodingException e) {</span><br><span class="line">                               e.printStackTrace();</span><br><span class="line">                          }</span><br><span class="line">                      }</span><br><span class="line">                  }</span><br><span class="line">              }</span><br><span class="line">               hasEncode = <span class="literal">true</span>;</span><br><span class="line">          }</span><br><span class="line">           <span class="keyword">return</span> parameterMap;</span><br><span class="line">      }</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">super</span>.getParameterMap();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取一个值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">(String name)</span> {</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">if</span> (values == <span class="literal">null</span>) {</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      }</span><br><span class="line">       <span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取所有值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] getParameterValues(String name) {</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">return</span> values;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个也是我在网上找的一些大神写的，一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p><p><strong>然后在web.xml中配置这个过滤器即可！</strong></p><p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p><h2 id="四、Json交互处理"><a href="#四、Json交互处理" class="headerlink" title="四、Json交互处理"></a>四、Json交互处理</h2><h3 id="什么是JSON？"><a href="#什么是JSON？" class="headerlink" title="什么是JSON？"></a>什么是JSON？</h3><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span><span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"QinJiang"</span><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span><span class="attr">"age"</span><span class="punctuation">:</span> <span class="string">"3"</span><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">{</span><span class="attr">"sex"</span><span class="punctuation">:</span> <span class="string">"男"</span><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {<span class="attr">a</span>: <span class="string">'Hello'</span>, <span class="attr">b</span>: <span class="string">'World'</span>}; <span class="comment">//这是一个对象，注意键名也是可以使用引号包裹的</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">'{"a": "Hello", "b": "World"}'</span>; <span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></span><br></pre></td></tr></tbody></table></figure><h3 id="JSON-和-JavaScript-对象互转"><a href="#JSON-和-JavaScript-对象互转" class="headerlink" title="JSON 和 JavaScript 对象互转"></a><strong>JSON 和 JavaScript 对象互转</strong></h3><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">'{"a": "Hello", "b": "World"}'</span>);</span><br><span class="line"><span class="comment">//结果是 {a: 'Hello', b: 'World'}</span></span><br></pre></td></tr></tbody></table></figure><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>({<span class="attr">a</span>: <span class="string">'Hello'</span>, <span class="attr">b</span>: <span class="string">'World'</span>});</span><br><span class="line"><span class="comment">//结果是 '{"a": "Hello", "b": "World"}'</span></span><br></pre></td></tr></tbody></table></figure><p><strong>代码测试</strong></p><p>1、新建一个module ，springmvc-05-json ， 添加web的支持</p><p>2、在web目录下新建一个 json-1.html ， 编写测试内容</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSON_秦疆<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//编写一个js的对象</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> user = {</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">name</span>:<span class="string">"秦疆"</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">age</span>:<span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">sex</span>:<span class="string">"男"</span></span></span><br><span class="line"><span class="language-javascript">  };</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//将js对象转换成json字符串</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user);</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//将json字符串转换为js对象</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> user2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">console</span>.<span class="title function_">log</span>(user2.<span class="property">age</span>,user2.<span class="property">name</span>,user2.<span class="property">sex</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3、在IDEA中使用浏览器打开，查看控制台输出！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Kr2Q3b19mdVPRfiaSSR0OQ2Q8qXVmDPs7ZNuhAueQdj9ibOh9O9lw1535ibtKD0R7VAwPjUQ2kXmVHg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><blockquote><p>Controller返回JSON数据</p></blockquote><p>Jackson应该是目前比较好的json解析工具了</p><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p><p>我们这里使用Jackson，使用它需要导入它的jar包；</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>配置SpringMVC需要的配置</p><p>web.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.kuang.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要导入lombok</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line">   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</p><p>编写一个Controller；</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping("/json1")</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException {</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆1号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>配置Tomcat ， 启动测试一下！</p><p><a href="http://localhost:8080/json1">http://localhost:8080/json1</a></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Kr2Q3b19mdVPRfiaSSR0OQ2QCNxRSJebDzgryI1iapfrwBWibv6Ww2CgofjS5K59zdO02OvpoRXCz2w/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；</p><p>通过@RequestMaping的produces属性来实现，修改下代码</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/json1",produces = "application/json;charset=utf-8")</span></span><br></pre></td></tr></tbody></table></figure><p>再次测试， <a href="http://localhost:8080/json1">http://localhost:8080/json1</a> ， 乱码问题OK！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Kr2Q3b19mdVPRfiaSSR0OQ2Dib7IK6ugTmbm4JhqphKhoeEh2wyjzj4CWCjpibSh0Lge5zcxxJOib3hQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>【注意：使用json记得处理乱码问题】</p><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p><strong>乱码统一解决</strong></p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"failOnEmptyBeans"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>返回json字符串统一解决</strong></p><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">   <span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = "/json1")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException {</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆1号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>启动tomcat测试，结果都正常输出！</p><blockquote><p>测试集合输出</p></blockquote><p>增加一个新的方法</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/json2")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException {</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">   <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">   <span class="comment">//创建一个对象</span></span><br><span class="line">   <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆1号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">   <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆2号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">   <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆3号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">   <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆4号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">   List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">   list.add(user1);</span><br><span class="line">   list.add(user2);</span><br><span class="line">   list.add(user3);</span><br><span class="line">   list.add(user4);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(list);</span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果 : 十分完美，没有任何问题！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Kr2Q3b19mdVPRfiaSSR0OQ28xBricP4KKliaicvQJJlG989xjEUftuqcibuRPWGHjOZfEA3HiaVTq4GDRw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><blockquote><p>输出时间对象</p></blockquote><p>增加一个新的方法</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/json3")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException {</span><br><span class="line"></span><br><span class="line">   <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建时间一个对象，java.util.Date</span></span><br><span class="line">   <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">   <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(date);</span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果 :</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Kr2Q3b19mdVPRfiaSSR0OQ2wC0G9p8rYjxUNdyVK8oCUicN5LJ9XVsLJddll3tYr28kVaXoUfO0LaQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><ul><li>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！</li><li>Jackson 默认是会把时间转成timestamps形式</li></ul><p><strong>解决方案：取消timestamps形式 ， 自定义时间格式</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/json4")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json4</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException {</span><br><span class="line"></span><br><span class="line">   <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//不使用时间戳的方式</span></span><br><span class="line">   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">   <span class="comment">//自定义日期格式对象</span></span><br><span class="line">   <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">   <span class="comment">//指定日期格式</span></span><br><span class="line">   mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">   <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">   <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(date);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果 : 成功的输出了时间！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Kr2Q3b19mdVPRfiaSSR0OQ2AVT1icKIk8UDdWlERvmsWdgcOPvsEUr3s0lIRVzPd6IhrjiaPCDSibt2Q/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><blockquote><p>抽取为工具类</p></blockquote><p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUtils</span> {</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object)</span> {</span><br><span class="line">       <span class="keyword">return</span> getJson(object,<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object,String dateFormat)</span> {</span><br><span class="line">       <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">       <span class="comment">//不使用时间差的方式</span></span><br><span class="line">       mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">       <span class="comment">//自定义日期格式对象</span></span><br><span class="line">       <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(dateFormat);</span><br><span class="line">       <span class="comment">//指定日期格式</span></span><br><span class="line">       mapper.setDateFormat(sdf);</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">      } <span class="keyword">catch</span> (JsonProcessingException e) {</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">      }</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们使用工具类，代码就更加简洁了！</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/json5")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json5</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException {</span><br><span class="line">   <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">   <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JsonUtils.getJson(date);</span><br><span class="line">   <span class="keyword">return</span> json;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>大功告成！完美！</p><blockquote><p>FastJson</p></blockquote><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>fastjson 三个主要的类：</p><p><strong>JSONObject  代表 json 对象</strong> </p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul><p><strong>JSONArray  代表 json 对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul><p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul><p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonDemo</span> {</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆1号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆2号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆3号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆4号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">       List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">       list.add(user1);</span><br><span class="line">       list.add(user2);</span><br><span class="line">       list.add(user3);</span><br><span class="line">       list.add(user4);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"*******Java对象 转 JSON字符串*******"</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> JSON.toJSONString(list);</span><br><span class="line">       System.out.println(<span class="string">"JSON.toJSONString(list)==&gt;"</span>+str1);</span><br><span class="line">       <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> JSON.toJSONString(user1);</span><br><span class="line">       System.out.println(<span class="string">"JSON.toJSONString(user1)==&gt;"</span>+str2);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"\n****** JSON字符串 转 Java对象*******"</span>);</span><br><span class="line">       User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line">       System.out.println(<span class="string">"JSON.parseObject(str2,User.class)==&gt;"</span>+jp_user1);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"\n****** Java对象 转 JSON对象 ******"</span>);</span><br><span class="line">       <span class="type">JSONObject</span> <span class="variable">jsonObject1</span> <span class="operator">=</span> (JSONObject) JSON.toJSON(user2);</span><br><span class="line">       System.out.println(<span class="string">"(JSONObject) JSON.toJSON(user2)==&gt;"</span>+jsonObject1.getString(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"\n****** JSON对象 转 Java对象 ******"</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">to_java_user</span> <span class="operator">=</span> JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">       System.out.println(<span class="string">"JSON.toJavaObject(jsonObject1, User.class)==&gt;"</span>+to_java_user);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了！</p><h2 id="五、整合SSM"><a href="#五、整合SSM" class="headerlink" title="五、整合SSM"></a>五、整合SSM</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><p>环境：</p><ul><li>IDEA</li><li>MySQL 5.7.19</li><li>Tomcat 9</li><li>Maven 3.6</li></ul><p> 要求：</p><ul><li>需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；</li></ul><h4 id="数据库环境"><a href="#数据库环境" class="headerlink" title="数据库环境"></a>数据库环境</h4><p>创建一个存放书籍数据的数据库表</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `ssmbuild`;</span><br><span class="line"></span><br><span class="line">USE `ssmbuild`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `books`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `books` (</span><br><span class="line">`bookID` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">'书id'</span>,</span><br><span class="line">`bookName` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'书名'</span>,</span><br><span class="line">`bookCounts` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'数量'</span>,</span><br><span class="line">`detail` <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'描述'</span>,</span><br><span class="line">KEY `bookID` (`bookID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `books`(`bookID`,`bookName`,`bookCounts`,`detail`)<span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'Java'</span>,<span class="number">1</span>,<span class="string">'从入门到放弃'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'MySQL'</span>,<span class="number">10</span>,<span class="string">'从删库到跑路'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'Linux'</span>,<span class="number">5</span>,<span class="string">'从进门到进牢'</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h4><p>1、新建一Maven项目！ssmbuild ， 添加web的支持</p><p>2、导入相关的pom依赖！</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3、Maven资源过滤设置</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>4、建立基本结构和配置框架！</p><ul><li><p>com.kuang.pojo</p></li><li><p>com.kuang.dao</p></li><li><p>com.kuang.service</p></li><li><p>com.kuang.controller</p></li><li><p>mybatis-config.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>applicationContext.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="Mybatis层编写"><a href="#Mybatis层编写" class="headerlink" title="Mybatis层编写"></a>Mybatis层编写</h4><p>1、数据库配置文件 <strong>database.properties</strong></p><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#如果使用的是Mysql8.0+需要增加一个时区的配置</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;ServerTimezone=Asia/Chongqing</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure><p>2、IDEA关联数据库</p><p>3、编写MyBatis的核心配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.kuang.pojo"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/kuang/dao/BookMapper.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>4、编写数据库对应的实体类 com.kuang.pojo.Books</p><p>使用lombok插件！</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Books</span> {</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> bookID;</span><br><span class="line">   <span class="keyword">private</span> String bookName;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> bookCounts;</span><br><span class="line">   <span class="keyword">private</span> String detail;</span><br><span class="line">   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>5、编写Dao层的 Mapper接口！</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookMapper</span> {</span><br><span class="line"></span><br><span class="line">   <span class="comment">//增加一个Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books book)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id删除一个Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//更新Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">   Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">   List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>6、编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.kuang.dao.BookMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--增加一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">      insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">      values (#{bookName}, #{bookCounts}, #{detail})</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id删除一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBookById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">      delete from ssmbuild.books where bookID=#{bookID}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--更新Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">      update ssmbuild.books</span><br><span class="line">      set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}</span><br><span class="line">      where bookID = #{bookID}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id查询,返回一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBookById"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">      select * from ssmbuild.books</span><br><span class="line">      where bookID = #{bookID}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--查询全部Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAllBook"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">      SELECT * from ssmbuild.books</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>7、编写Service层的接口和实现类</p><p>接口：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BookService:底下需要去实现,调用dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> {</span><br><span class="line">   <span class="comment">//增加一个Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books book)</span>;</span><br><span class="line">   <span class="comment">//根据id删除一个Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">   <span class="comment">//更新Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span>;</span><br><span class="line">   <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">   Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">   <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">   List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实现类：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> {</span><br><span class="line"></span><br><span class="line">   <span class="comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class="line">   <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> {</span><br><span class="line">       <span class="built_in">this</span>.bookMapper = bookMapper;</span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books book)</span> {</span><br><span class="line">       <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span> {</span><br><span class="line">       <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span> {</span><br><span class="line">       <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span> {</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span> {</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>OK，到此，底层需求操作编写完毕！</strong></p><h4 id="Spring层"><a href="#Spring层" class="headerlink" title="Spring层"></a>Spring层</h4><p>1、配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</p><p>2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">       dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.kuang.dao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3、Spring整合service层</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.kuang.service"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"BookServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.kuang.service.BookServiceImpl"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookMapper"</span> <span class="attr">ref</span>=<span class="string">"bookMapper"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！</p><h4 id="SpringMVC层"><a href="#SpringMVC层" class="headerlink" title="SpringMVC层"></a>SpringMVC层</h4><p>1、<strong>web.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">          org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">       <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、<strong>spring-mvc.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.kuang.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3、<strong>Spring配置整合文件，applicationContext.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dao.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-service.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-mvc.xml"</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>配置文件，暂时结束！</strong></p><h4 id="Controller-和-视图层编写"><a href="#Controller-和-视图层编写" class="headerlink" title="Controller 和 视图层编写"></a><strong>Controller 和 视图层编写</strong></h4><p>1、BookController 类编写 ， 方法一：查询全部书籍</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/book")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> {</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier("BookServiceImpl")</span></span><br><span class="line">   <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping("/allBook")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(Model model)</span> {</span><br><span class="line">       List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">       model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"allBook"</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、编写首页 <strong>index.jsp</strong></p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">   &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">       a {</span><br><span class="line">           text-decoration: none;</span><br><span class="line">           color: black;</span><br><span class="line">           font-size: 18px;</span><br><span class="line">      }</span><br><span class="line">       h3 {</span><br><span class="line">           width: 180px;</span><br><span class="line">           height: 38px;</span><br><span class="line">           margin: 100px auto;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: 38px;</span><br><span class="line">           background: deepskyblue;</span><br><span class="line">           border-radius: 4px;</span><br><span class="line">      }</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line">   &lt;a href=<span class="string">"${pageContext.request.contextPath}/book/allBook"</span>&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>3、书籍列表页面 <strong>allbook.jsp</strong></p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;书籍列表&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line">           &lt;div class=<span class="string">"page-header"</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">"row"</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">"col-md-4 column"</span>&gt;</span><br><span class="line">           &lt;a class=<span class="string">"btn btn-primary"</span> href=<span class="string">"${pageContext.request.contextPath}/book/toAddBook"</span>&gt;新增&lt;/a&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line">           &lt;table class=<span class="string">"table table-hover table-striped"</span>&gt;</span><br><span class="line">               &lt;thead&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                   &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍名字&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">               &lt;/tr&gt;</span><br><span class="line">               &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">               &lt;tbody&gt;</span><br><span class="line">               &lt;c:forEach <span class="keyword">var</span>=<span class="string">"book"</span> items=<span class="string">"${requestScope.get('list')}"</span>&gt;</span><br><span class="line">                   &lt;tr&gt;</span><br><span class="line">                       &lt;td&gt;${book.getBookID()}&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;${book.getBookName()}&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;${book.getBookCounts()}&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;${book.getDetail()}&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;</span><br><span class="line">                           &lt;a href=<span class="string">"${pageContext.request.contextPath}/book/toUpdateBook?id=${book.getBookID()}"</span>&gt;更改&lt;/a&gt; |</span><br><span class="line">                           &lt;a href=<span class="string">"${pageContext.request.contextPath}/book/del/${book.getBookID()}"</span>&gt;删除&lt;/a&gt;</span><br><span class="line">                       &lt;/td&gt;</span><br><span class="line">                   &lt;/tr&gt;</span><br><span class="line">               &lt;/c:forEach&gt;</span><br><span class="line">               &lt;/tbody&gt;</span><br><span class="line">           &lt;/table&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>4、BookController 类编写 ， 方法二：添加书籍</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/toAddBook")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toAddPaper</span><span class="params">()</span> {</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"addBook"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping("/addBook")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addPaper</span><span class="params">(Books books)</span> {</span><br><span class="line">   System.out.println(books);</span><br><span class="line">   bookService.addBook(books);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"redirect:/book/allBook"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>5、添加书籍页面：<strong>addBook.jsp</strong></p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;新增书籍&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line">           &lt;div class=<span class="string">"page-header"</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;form action=<span class="string">"${pageContext.request.contextPath}/book/addBook"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">      书籍名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"bookName"</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      书籍数量：&lt;input type=<span class="string">"text"</span> name=<span class="string">"bookCounts"</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      书籍详情：&lt;input type=<span class="string">"text"</span> name=<span class="string">"detail"</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">       &lt;input type=<span class="string">"submit"</span> value=<span class="string">"添加"</span>&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>6、BookController 类编写 ， 方法三：修改书籍</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/toUpdateBook")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toUpdateBook</span><span class="params">(Model model, <span class="type">int</span> id)</span> {</span><br><span class="line">   <span class="type">Books</span> <span class="variable">books</span> <span class="operator">=</span> bookService.queryBookById(id);</span><br><span class="line">   System.out.println(books);</span><br><span class="line">   model.addAttribute(<span class="string">"book"</span>,books );</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"updateBook"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping("/updateBook")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateBook</span><span class="params">(Model model, Books book)</span> {</span><br><span class="line">   System.out.println(book);</span><br><span class="line">   bookService.updateBook(book);</span><br><span class="line">   <span class="type">Books</span> <span class="variable">books</span> <span class="operator">=</span> bookService.queryBookById(book.getBookID());</span><br><span class="line">   model.addAttribute(<span class="string">"books"</span>, books);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"redirect:/book/allBook"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>7、修改书籍页面  <strong>updateBook.jsp</strong></p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;修改信息&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line">           &lt;div class=<span class="string">"page-header"</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;修改信息&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;form action=<span class="string">"${pageContext.request.contextPath}/book/updateBook"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">       &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"bookID"</span> value=<span class="string">"${book.getBookID()}"</span>/&gt;</span><br><span class="line">      书籍名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"bookName"</span> value=<span class="string">"${book.getBookName()}"</span>/&gt;</span><br><span class="line">      书籍数量：&lt;input type=<span class="string">"text"</span> name=<span class="string">"bookCounts"</span> value=<span class="string">"${book.getBookCounts()}"</span>/&gt;</span><br><span class="line">      书籍详情：&lt;input type=<span class="string">"text"</span> name=<span class="string">"detail"</span> value=<span class="string">"${book.getDetail() }"</span>/&gt;</span><br><span class="line">       &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>8、BookController 类编写 ， 方法四：删除书籍</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/del/{bookId}")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteBook</span><span class="params">(<span class="meta">@PathVariable("bookId")</span> <span class="type">int</span> id)</span> {</span><br><span class="line">   bookService.deleteBookById(id);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"redirect:/book/allBook"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>配置Tomcat，进行运行！</strong></p><p>到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！</p><h4 id="项目结构图"><a href="#项目结构图" class="headerlink" title="项目结构图"></a><strong>项目结构图</strong></h4><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ia40lmtNCqoTzA58pI46q4FvRpJa5kiaGm2TSfRhrLZQonS28jGsBb3WEGe5uqJVosLrB64X7AVSQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ia40lmtNCqoTzA58pI46q4Zf0Z4iabyfgc9OPrZnOhctwGM99LzkicKctNoXM7nq45VShnMdhbZ4KA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h2 id="六、Ajax"><a href="#六、Ajax" class="headerlink" title="六、Ajax"></a>六、Ajax</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p></li><li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p></li><li><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p></li><li><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p></li><li><p>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p></li><li><p>就和国内百度的搜索框一样!</p></li><li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p></li><li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p></li><li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p></li></ul><h3 id="伪造Ajax"><a href="#伪造Ajax" class="headerlink" title="伪造Ajax"></a>伪造Ajax</h3><p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p><p>1、新建一个module ：sspringmvc-06-ajax ， 导入web支持！</p><p>2、编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=<span class="string">"en"</span>&gt;</span><br><span class="line">   &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">   &lt;title&gt;kuangshen&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">   window.onload = function(){</span><br><span class="line">       <span class="type">var</span> <span class="variable">myDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">       document.getElementById(<span class="string">'currentTime'</span>).innerText = myDate.getTime();</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">   function <span class="title function_">LoadPage</span><span class="params">()</span>{</span><br><span class="line">       <span class="type">var</span> <span class="variable">targetUrl</span> <span class="operator">=</span>  document.getElementById(<span class="string">'url'</span>).value;</span><br><span class="line">       console.log(targetUrl);</span><br><span class="line">       document.getElementById(<span class="string">"iframePosition"</span>).src = targetUrl;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;p&gt;请输入要加载的地址：&lt;span id=<span class="string">"currentTime"</span>&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">   &lt;p&gt;</span><br><span class="line">       &lt;input id=<span class="string">"url"</span> type=<span class="string">"text"</span> value=<span class="string">"https://www.baidu.com/"</span>/&gt;</span><br><span class="line">       &lt;input type=<span class="string">"button"</span> value=<span class="string">"提交"</span> onclick=<span class="string">"LoadPage()"</span>&gt;</span><br><span class="line">   &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;h3&gt;加载页面位置：&lt;/h3&gt;</span><br><span class="line">   &lt;iframe id=<span class="string">"iframePosition"</span> style=<span class="string">"width: 100%;height: 500px;"</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>3、使用IDEA开浏览器测试一下！</p><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>….等等</li></ul><h3 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h3><p>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</p><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p><p>jQuery 提供多个与 AJAX 有关的方法。</p><p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p><p>jQuery 不是生产者，而是大自然搬运工。</p><p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">      部分参数：</span><br><span class="line">            url：请求地址</span><br><span class="line">            type：请求方式，GET、POST（<span class="number">1.9</span><span class="number">.0</span>之后用method）</span><br><span class="line">        headers：请求头</span><br><span class="line">            data：要发送的数据</span><br><span class="line">    contentType：即将发送信息至服务器的内容编码类型(默认: <span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span>)</span><br><span class="line">          async：是否异步</span><br><span class="line">        timeout：设置请求超时时间（毫秒）</span><br><span class="line">      beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">        complete：完成之后执行的回调函数(全局)</span><br><span class="line">        success：成功之后执行的回调函数(全局)</span><br><span class="line">          error：失败之后执行的回调函数(全局)</span><br><span class="line">        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型</span><br><span class="line">        dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">          <span class="string">"xml"</span>: 将服务器端返回的内容转换成xml格式</span><br><span class="line">          <span class="string">"text"</span>: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          <span class="string">"html"</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><br><span class="line">        <span class="string">"script"</span>: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          <span class="string">"json"</span>: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">        <span class="string">"jsonp"</span>: JSONP 格式使用 JSONP 形式调用函数时，如 <span class="string">"myurl?callback=?"</span> jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></tbody></table></figure><p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p><p>1、配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.kuang.controller"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、编写一个AjaxController</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxController</span> {</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping("/a1")</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ajax1</span><span class="params">(String name , HttpServletResponse response)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name)){</span><br><span class="line">           response.getWriter().print(<span class="string">"true"</span>);</span><br><span class="line">      }<span class="keyword">else</span>{</span><br><span class="line">           response.getWriter().print(<span class="string">"false"</span>);</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script src="https://code.jquery.com/jquery-3.1.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>4、编写index.jsp测试</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;%--&lt;script src=<span class="string">"https://code.jquery.com/jquery-3.1.1.min.js"</span>&gt;&lt;/script&gt;--%&gt;</span><br><span class="line">   &lt;script src=<span class="string">"${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       function <span class="title function_">a1</span><span class="params">()</span>{</span><br><span class="line">           $.post({</span><br><span class="line">               url:<span class="string">"${pageContext.request.contextPath}/a1"</span>,</span><br><span class="line">               data:{<span class="string">'name'</span>:$(<span class="string">"#txtName"</span>).val()},</span><br><span class="line">               success:function (data,status) {</span><br><span class="line">                   alert(data);</span><br><span class="line">                   alert(status);</span><br><span class="line">              }</span><br><span class="line">          });</span><br><span class="line">      }</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--onblur：失去焦点触发事件--%&gt;</span><br><span class="line">用户名:&lt;input type=<span class="string">"text"</span> id=<span class="string">"txtName"</span> onblur=<span class="string">"a1()"</span>/&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p><p><strong>Springmvc实现</strong></p><p>实体类user</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们来获取一个集合对象，展示到前端页面</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/a2")</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">ajax2</span><span class="params">()</span>{</span><br><span class="line">   List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">   list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆1号"</span>,<span class="number">3</span>,<span class="string">"男"</span>));</span><br><span class="line">   list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆2号"</span>,<span class="number">3</span>,<span class="string">"男"</span>));</span><br><span class="line">   list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"秦疆3号"</span>,<span class="number">3</span>,<span class="string">"男"</span>));</span><br><span class="line">   <span class="keyword">return</span> list; <span class="comment">//由于@RestController注解，将list转成json格式返回</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>前端页面</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"获取数据"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"80%"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   $(<span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">       $(<span class="string">"#btn"</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">           $.<span class="title function_">post</span>(<span class="string">"${pageContext.request.contextPath}/a2"</span>,<span class="keyword">function</span> (<span class="params">data</span>) {</span></span><br><span class="line"><span class="language-javascript">               <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">var</span> html=<span class="string">""</span>;</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;data.<span class="property">length</span> ; i++) {</span></span><br><span class="line"><span class="language-javascript">                   html+= <span class="string">"&lt;tr&gt;"</span> +</span></span><br><span class="line"><span class="language-javascript">                       <span class="string">"&lt;td&gt;"</span> + data[i].<span class="property">name</span> + <span class="string">"&lt;/td&gt;"</span> +</span></span><br><span class="line"><span class="language-javascript">                       <span class="string">"&lt;td&gt;"</span> + data[i].<span class="property">age</span> + <span class="string">"&lt;/td&gt;"</span> +</span></span><br><span class="line"><span class="language-javascript">                       <span class="string">"&lt;td&gt;"</span> + data[i].<span class="property">sex</span> + <span class="string">"&lt;/td&gt;"</span> +</span></span><br><span class="line"><span class="language-javascript">                       <span class="string">"&lt;/tr&gt;"</span></span></span><br><span class="line"><span class="language-javascript">              }</span></span><br><span class="line"><span class="language-javascript">               $(<span class="string">"#content"</span>).<span class="title function_">html</span>(html);</span></span><br><span class="line"><span class="language-javascript">          });</span></span><br><span class="line"><span class="language-javascript">      })</span></span><br><span class="line"><span class="language-javascript">  })</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p><blockquote><p>注册提示效果</p></blockquote><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p><p>我们写一个Controller</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/a3")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">ajax3</span><span class="params">(String name,String pwd)</span>{</span><br><span class="line">   <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">""</span>;</span><br><span class="line">   <span class="comment">//模拟数据库中存在数据</span></span><br><span class="line">   <span class="keyword">if</span> (name!=<span class="literal">null</span>){</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name)){</span><br><span class="line">           msg = <span class="string">"OK"</span>;</span><br><span class="line">      }<span class="keyword">else</span> {</span><br><span class="line">           msg = <span class="string">"用户名输入错误"</span>;</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">   <span class="keyword">if</span> (pwd!=<span class="literal">null</span>){</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">"123456"</span>.equals(pwd)){</span><br><span class="line">           msg = <span class="string">"OK"</span>;</span><br><span class="line">      }<span class="keyword">else</span> {</span><br><span class="line">           msg = <span class="string">"密码输入有误"</span>;</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">   <span class="keyword">return</span> msg; <span class="comment">//由于@RestController注解，将msg转成json格式返回</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>前端页面 login.jsp</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">a1</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript">           $.<span class="title function_">post</span>({</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">url</span>:<span class="string">"${pageContext.request.contextPath}/a3"</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">data</span>:{<span class="string">'name'</span>:$(<span class="string">"#name"</span>).<span class="title function_">val</span>()},</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) {</span></span><br><span class="line"><span class="language-javascript">                   <span class="keyword">if</span> (data.<span class="title function_">toString</span>()==<span class="string">'OK'</span>){</span></span><br><span class="line"><span class="language-javascript">                       $(<span class="string">"#userInfo"</span>).<span class="title function_">css</span>(<span class="string">"color"</span>,<span class="string">"green"</span>);</span></span><br><span class="line"><span class="language-javascript">                  }<span class="keyword">else</span> {</span></span><br><span class="line"><span class="language-javascript">                       $(<span class="string">"#userInfo"</span>).<span class="title function_">css</span>(<span class="string">"color"</span>,<span class="string">"red"</span>);</span></span><br><span class="line"><span class="language-javascript">                  }</span></span><br><span class="line"><span class="language-javascript">                   $(<span class="string">"#userInfo"</span>).<span class="title function_">html</span>(data);</span></span><br><span class="line"><span class="language-javascript">              }</span></span><br><span class="line"><span class="language-javascript">          });</span></span><br><span class="line"><span class="language-javascript">      }</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">a2</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript">           $.<span class="title function_">post</span>({</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">url</span>:<span class="string">"${pageContext.request.contextPath}/a3"</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">data</span>:{<span class="string">'pwd'</span>:$(<span class="string">"#pwd"</span>).<span class="title function_">val</span>()},</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) {</span></span><br><span class="line"><span class="language-javascript">                   <span class="keyword">if</span> (data.<span class="title function_">toString</span>()==<span class="string">'OK'</span>){</span></span><br><span class="line"><span class="language-javascript">                       $(<span class="string">"#pwdInfo"</span>).<span class="title function_">css</span>(<span class="string">"color"</span>,<span class="string">"green"</span>);</span></span><br><span class="line"><span class="language-javascript">                  }<span class="keyword">else</span> {</span></span><br><span class="line"><span class="language-javascript">                       $(<span class="string">"#pwdInfo"</span>).<span class="title function_">css</span>(<span class="string">"color"</span>,<span class="string">"red"</span>);</span></span><br><span class="line"><span class="language-javascript">                  }</span></span><br><span class="line"><span class="language-javascript">                   $(<span class="string">"#pwdInfo"</span>).<span class="title function_">html</span>(data);</span></span><br><span class="line"><span class="language-javascript">              }</span></span><br><span class="line"><span class="language-javascript">          });</span></span><br><span class="line"><span class="language-javascript">      }</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">onblur</span>=<span class="string">"a1()"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"userInfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"pwd"</span> <span class="attr">onblur</span>=<span class="string">"a2()"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"pwdInfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>【记得处理json乱码问题】</p><p>测试一下效果，动态请求响应，局部刷新，就是如此！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KZibKx8mbpgp9uicB6eJRNyNtU7ek8sJ1kpbFia5e5IoMRtGFwBiaylw7iakYBws0icEAqyH22l6Y7FMzQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><blockquote><p>获取baidu接口Demo</p></blockquote><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>&gt;</span><br><span class="line">   &lt;title&gt;JSONP百度搜索&lt;/title&gt;</span><br><span class="line">   &lt;style&gt;</span><br><span class="line">       #q{</span><br><span class="line">           width: 500px;</span><br><span class="line">           height: 30px;</span><br><span class="line">           border:1px solid #ddd;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           display: block;</span><br><span class="line">           margin: <span class="number">0</span> auto;</span><br><span class="line">           padding: <span class="number">0</span> 10px;</span><br><span class="line">           font-size: 14px;</span><br><span class="line">      }</span><br><span class="line">       #ul{</span><br><span class="line">           width: 520px;</span><br><span class="line">           list-style: none;</span><br><span class="line">           margin: <span class="number">0</span> auto;</span><br><span class="line">           padding: <span class="number">0</span>;</span><br><span class="line">           border:1px solid #ddd;</span><br><span class="line">           margin-top: -1px;</span><br><span class="line">           display: none;</span><br><span class="line">      }</span><br><span class="line">       #ul li{</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           padding: <span class="number">0</span> 10px;</span><br><span class="line">      }</span><br><span class="line">       #ul li:hover{</span><br><span class="line">           background-color: #f60;</span><br><span class="line">           color: #fff;</span><br><span class="line">      }</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.步骤二</span></span><br><span class="line">       <span class="comment">// 定义demo函数 (分析接口、数据)</span></span><br><span class="line">       function <span class="title function_">demo</span><span class="params">(data)</span>{</span><br><span class="line">           <span class="type">var</span> <span class="variable">Ul</span> <span class="operator">=</span> document.getElementById(<span class="string">'ul'</span>);</span><br><span class="line">           <span class="type">var</span> <span class="variable">html</span> <span class="operator">=</span> <span class="string">''</span>;</span><br><span class="line">           <span class="comment">// 如果搜索数据存在 把内容添加进去</span></span><br><span class="line">           <span class="keyword">if</span> (data.s.length) {</span><br><span class="line">               <span class="comment">// 隐藏掉的ul显示出来</span></span><br><span class="line">               Ul.style.display = <span class="string">'block'</span>;</span><br><span class="line">               <span class="comment">// 搜索到的数据循环追加到li里</span></span><br><span class="line">               <span class="keyword">for</span>(<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;data.s.length;i++){</span><br><span class="line">                   html += <span class="string">'&lt;li&gt;'</span>+data.s[i]+<span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">              }</span><br><span class="line">               <span class="comment">// 循环的li写入ul</span></span><br><span class="line">               Ul.innerHTML = html;</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 1.步骤一</span></span><br><span class="line">       window.onload = function(){</span><br><span class="line">           <span class="comment">// 获取输入框和ul</span></span><br><span class="line">           <span class="type">var</span> <span class="variable">Q</span> <span class="operator">=</span> document.getElementById(<span class="string">'q'</span>);</span><br><span class="line">           <span class="type">var</span> <span class="variable">Ul</span> <span class="operator">=</span> document.getElementById(<span class="string">'ul'</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 事件鼠标抬起时候</span></span><br><span class="line">           Q.onkeyup = function(){</span><br><span class="line">               <span class="comment">// 如果输入框不等于空</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="built_in">this</span>.value != <span class="string">''</span>) {</span><br><span class="line">                   <span class="comment">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span></span><br><span class="line">                   <span class="comment">// 创建标签</span></span><br><span class="line">                   <span class="type">var</span> <span class="variable">script</span> <span class="operator">=</span> document.createElement(<span class="string">'script'</span>);</span><br><span class="line">                   <span class="comment">//给定要跨域的地址 赋值给src</span></span><br><span class="line">                   <span class="comment">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span></span><br><span class="line">                   script.src = <span class="string">'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd='</span>+<span class="built_in">this</span>.value+<span class="string">'&amp;cb=demo'</span>;</span><br><span class="line">                   <span class="comment">// 将组合好的带src的script标签追加到body里</span></span><br><span class="line">                   document.body.appendChild(script);</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"q"</span> /&gt;</span><br><span class="line">&lt;ul id=<span class="string">"ul"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="七、拦截器"><a href="#七、拦截器" class="headerlink" title="七、拦截器"></a>七、拦截器</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><p><strong>拦截器</strong> </p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li></ul><h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><p>那如何实现拦截器呢？</p><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p><p>1、新建一个Moudule ， springmvc-07-Interceptor  ， 添加web支持</p><p>2、配置web.xml 和 springmvc-servlet.xml 文件</p><p>3、编写一个拦截器</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> {</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在请求处理的方法之前执行</span></span><br><span class="line">   <span class="comment">//如果返回true执行下一个拦截器</span></span><br><span class="line">   <span class="comment">//如果返回false就不执行下一个拦截器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       System.out.println(<span class="string">"------------处理前------------"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在请求处理方法执行之后执行</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       System.out.println(<span class="string">"------------处理后------------"</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在dispatcherServlet处理后执行,做清理工作.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       System.out.println(<span class="string">"------------清理------------"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>4、在springmvc的配置文件中配置拦截器</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/** 包括路径及其子路径--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.kuang.interceptor.MyInterceptor"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>5、编写一个Controller，接收请求</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试拦截器的控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorController</span> {</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping("/interceptor")</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">testFunction</span><span class="params">()</span> {</span><br><span class="line">       System.out.println(<span class="string">"控制器中的方法执行了"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>6、前端 index.jsp</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;a href="${pageContext.request.contextPath}/interceptor"&gt;拦截器测试&lt;/a&gt;</span><br></pre></td></tr></tbody></table></figure><p>7、启动tomcat 测试一下！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KshicHhIPa51icXVueiaMfB0HtJH2NsHDlcibyEJuibgomZzDNpHiammcSRt2V87uPMYGC7h0gt5KS2Dcw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h3 id="验证用户是否登录-认证用户"><a href="#验证用户是否登录-认证用户" class="headerlink" title="验证用户是否登录 (认证用户)"></a>验证用户是否登录 (认证用户)</h3><p><strong>实现思路</strong></p><p>1、有一个登陆页面，需要写一个controller访问页面。</p><p>2、登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></p><p>3、拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</p><p><strong>测试：</strong></p><p>1、编写一个登陆页面  login.jsp</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"${pageContext.request.contextPath}/user/login"</span>&gt;</span><br><span class="line">  用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt; &lt;br&gt;</span><br><span class="line">  密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"pwd"</span>&gt; &lt;br&gt;</span><br><span class="line">   &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>2、编写一个Controller处理请求</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">   <span class="comment">//跳转到登陆页面</span></span><br><span class="line">   <span class="meta">@RequestMapping("/jumplogin")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">jumpLogin</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//跳转到成功页面</span></span><br><span class="line">   <span class="meta">@RequestMapping("/jumpSuccess")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">jumpSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//登陆提交</span></span><br><span class="line">   <span class="meta">@RequestMapping("/login")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(HttpSession session, String username, String pwd)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="comment">// 向session记录用户身份信息</span></span><br><span class="line">       System.out.println(<span class="string">"接收前端==="</span>+username);</span><br><span class="line">       session.setAttribute(<span class="string">"user"</span>, username);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//退出登陆</span></span><br><span class="line">   <span class="meta">@RequestMapping("logout")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">(HttpSession session)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">       <span class="comment">// session 过期</span></span><br><span class="line">       session.invalidate();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>3、编写一个登陆成功的页面 success.jsp</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;登录成功页面&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">${user}</span><br><span class="line">&lt;a href=<span class="string">"${pageContext.request.contextPath}/user/logout"</span>&gt;注销&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>4、在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line"> &lt;hr&gt;</span><br><span class="line">&lt;%--登录--%&gt;</span><br><span class="line"> &lt;a href=<span class="string">"${pageContext.request.contextPath}/user/jumplogin"</span>&gt;登录&lt;/a&gt;</span><br><span class="line"> &lt;a href=<span class="string">"${pageContext.request.contextPath}/user/jumpSuccess"</span>&gt;成功页面&lt;/a&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>5、编写用户登录拦截器</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> {</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">       <span class="comment">// 如果是登陆页面则放行</span></span><br><span class="line">       System.out.println(<span class="string">"uri: "</span> + request.getRequestURI());</span><br><span class="line">       <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">"login"</span>)) {</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">       <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 如果用户已登陆也放行</span></span><br><span class="line">       <span class="keyword">if</span>(session.getAttribute(<span class="string">"user"</span>) != <span class="literal">null</span>) {</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 用户没有登陆跳转到登陆页面</span></span><br><span class="line">       request.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/login.jsp"</span>).forward(request, response);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>6、在Springmvc的配置文件中注册拦截器</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loginInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.kuang.interceptor.LoginInterceptor"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>7、再次重启Tomcat测试！</p><p><strong>OK，测试登录拦截功能无误.</strong></p><h2 id="八、文件上传和下载"><a href="#八、文件上传和下载" class="headerlink" title="八、文件上传和下载"></a>八、文件上传和下载</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p><p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p><p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p><ul><li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li><li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>/&gt;</span><br><span class="line">   &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></tbody></table></figure><p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。</p><ul><li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li><li>而Spring MVC则提供了更简单的封装。</li><li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li><li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：</li><li>CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</li></ul><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>1、导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api导入高版本的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、配置bean：multipartResolver</p><p>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span>  <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>CommonsMultipartFile 的 常用方法：</p><ul><li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li><li><strong>InputStream getInputStream()：获取文件流</strong></li><li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li></ul><p> 我们去实际测试一下</p><p>3、编写前端页面</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/upload"</span> enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>/&gt;</span><br><span class="line"> &lt;input type=<span class="string">"submit"</span> value=<span class="string">"upload"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></tbody></table></figure><p>4、<strong>Controller</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> {</span><br><span class="line">   <span class="comment">//@RequestParam("file") 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span><br><span class="line">   <span class="comment">//批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line">   <span class="meta">@RequestMapping("/upload")</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">fileUpload</span><span class="params">(<span class="meta">@RequestParam("file")</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取文件名 : file.getOriginalFilename();</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">uploadFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//如果文件名为空，直接回到首页！</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="string">""</span>.equals(uploadFileName)){</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">      }</span><br><span class="line">       System.out.println(<span class="string">"上传文件名 : "</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//上传路径保存设置</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">       <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">       <span class="keyword">if</span> (!realPath.exists()){</span><br><span class="line">           realPath.mkdir();</span><br><span class="line">      }</span><br><span class="line">       System.out.println(<span class="string">"上传文件保存地址："</span>+realPath);</span><br><span class="line"></span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> file.getInputStream(); <span class="comment">//文件输入流</span></span><br><span class="line">       <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(realPath,uploadFileName)); <span class="comment">//文件输出流</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//读取写出</span></span><br><span class="line">       <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">       <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>){</span><br><span class="line">           os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">           os.flush();</span><br><span class="line">      }</span><br><span class="line">       os.close();</span><br><span class="line">       is.close();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>5、测试上传文件，OK！</p><p><strong>采用file.Transto 来保存上传的文件</strong></p><p>1、编写Controller</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 采用file.Transto 来保存上传的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping("/upload2")</span></span><br><span class="line"><span class="keyword">public</span> String  <span class="title function_">fileUpload2</span><span class="params">(<span class="meta">@RequestParam("file")</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line"></span><br><span class="line">   <span class="comment">//上传路径保存设置</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">   <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">   <span class="keyword">if</span> (!realPath.exists()){</span><br><span class="line">       realPath.mkdir();</span><br><span class="line">  }</span><br><span class="line">   <span class="comment">//上传文件地址</span></span><br><span class="line">   System.out.println(<span class="string">"上传文件保存地址："</span>+realPath);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">   file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(realPath +<span class="string">"/"</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、前端表单提交地址修改</p><p>3、访问提交测试，OK！</p><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p><strong>文件下载步骤：</strong></p><p>1、设置 response 响应头</p><p>2、读取文件 – InputStream</p><p>3、写出文件 – OutputStream</p><p>4、执行操作</p><p>5、关闭流 （先开后关）</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value="/download")</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">downloads</span><span class="params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="keyword">throws</span> Exception{</span><br><span class="line">   <span class="comment">//要下载的图片地址</span></span><br><span class="line">   <span class="type">String</span>  <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">   <span class="type">String</span>  <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">"基础语法.jpg"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//1、设置response 响应头</span></span><br><span class="line">   response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">   response.setCharacterEncoding(<span class="string">"UTF-8"</span>); <span class="comment">//字符编码</span></span><br><span class="line">   response.setContentType(<span class="string">"multipart/form-data"</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">   <span class="comment">//设置响应头</span></span><br><span class="line">   response.setHeader(<span class="string">"Content-Disposition"</span>,</span><br><span class="line">           <span class="string">"attachment;fileName="</span>+URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">   <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,fileName);</span><br><span class="line">   <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">   InputStream input=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">   <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">   <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">   <span class="type">byte</span>[] buff =<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">   <span class="comment">//4、执行 写出操作</span></span><br><span class="line">   <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>){</span><br><span class="line">       out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">       out.flush();</span><br><span class="line">  }</span><br><span class="line">   out.close();</span><br><span class="line">   input.close();</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>前端</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"/download"</span>&gt;点击下载&lt;/a&gt;</span><br></pre></td></tr></tbody></table></figure><p>测试，文件下载OK，大家可以和我们之前学习的JavaWeb原生的方式对比一下，就可以知道这个便捷多了!</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
            <tag> SSM整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2021/09/21/mybatis/"/>
      <url>/2021/09/21/mybatis/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h2 id="1、第一个Mybatis程序"><a href="#1、第一个Mybatis程序" class="headerlink" title="1、第一个Mybatis程序"></a>1、第一个Mybatis程序</h2><h3 id="导入maven依赖"><a href="#导入maven依赖" class="headerlink" title="导入maven依赖"></a>导入maven依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      父工程  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.miaobuyi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="便携mybatis的核心配置文件"><a href="#便携mybatis的核心配置文件" class="headerlink" title="便携mybatis的核心配置文件"></a>便携mybatis的核心配置文件</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  每一个Mapper.XML都需要在Mybatis核心配置文件中注册！  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span>  <span class="attr">resource</span>=<span class="string">"com/miaobuyi/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="编写mybatis工具类"><a href="#编写mybatis工具类" class="headerlink" title="编写mybatis工具类"></a>编写mybatis工具类</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> {</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           <span class="comment">//使用Mybatis第一步：获取sqlSessionFactory对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//既然有了 ，顾名思义，我们就可以从中获得SqlSession的实例了。</span></span><br><span class="line">    <span class="comment">//SqlSession 完全包含了面向数据库执行SQL命令所需的所有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSeesion</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span>  sqlSessionFactory.openSession();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name, String pwd)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> {</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="Mapper-接口"><a href="#Mapper-接口" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.miaobuyi.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="XML文件里不要写中文注释要报错"><a href="#XML文件里不要写中文注释要报错" class="headerlink" title="XML文件里不要写中文注释要报错"></a>XML文件里不要写中文注释要报错</h3><p>接口实现类 由原来的UserMapperImpl转变成为一个Mapper配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个对应的Dao/Mappser接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.miaobuyi.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--selecte查询语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"com.miaobuyi.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><p>maven由于他的约定大于配置，我们之后可能遇到我们配置文件，无法被到处或者生效的问题；解决方案pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在build中配置resource。来防止我们资源导出失败的问题   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resource<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.miaobuyi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.miaobuyi.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">        <span class="comment">//第一步获取SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">//执行sql  方式1：getMapper</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getUserList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2 老方式</span></span><br><span class="line">        <span class="comment">//userList =  sqlSession.selectList("com.miaobuyi.mapper.UserMapper.getUserList");</span></span><br><span class="line">        <span class="keyword">for</span> (User user :userList){</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭SqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2、CRUD"><a href="#2、CRUD" class="headerlink" title="2、CRUD"></a>2、CRUD</h2><h3 id="1、namesapce"><a href="#1、namesapce" class="headerlink" title="1、namesapce"></a>1、namesapce</h3><p>namespace中的包名要和Dao/mapper接口中的包名一致！</p><h3 id="2、select"><a href="#2、select" class="headerlink" title="2、select"></a>2、select</h3><p>选择，查询一句：</p><ul><li>id：就是对应namespace中的方法名</li><li>resultType：sql语句执行的返回值</li><li>parameterTpey：参数类型</li></ul><ol><li><p>编写接口</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//根据ID查询用户</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>编写对应mapper中的sql语句</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.miaobuyi.pojo.User"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById</span><span class="params">()</span>{</span><br><span class="line">       <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">       <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">       System.out.println(user);</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="3、insert"><a href="#3、insert" class="headerlink" title="3、insert"></a>3、insert</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.miaobuyi.pojo.User"</span>&gt;</span></span><br><span class="line">        insert  into mybatis.user (id,name,pwd)values (#{id},#{name},#{pwd})</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4、update"><a href="#4、update" class="headerlink" title="4、update"></a>4、update</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.miaobuyi.pojo.User"</span>&gt;</span></span><br><span class="line">        update mybatis.user set name = #{name},pwd=#{pwd} where id=#{id};</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5、delete"><a href="#5、delete" class="headerlink" title="5、delete"></a>5、delete</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    delete from mybatis.user where id=#{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意：增删改需要提交事务</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">sqlSessionFactory.openSession(<span class="literal">true</span>);<span class="comment">//工具类中  自动开启提交事务</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">sqlSession.commit();</span><br></pre></td></tr></tbody></table></figure><h3 id="6、分析错误"><a href="#6、分析错误" class="headerlink" title="6、分析错误"></a>6、分析错误</h3><ul><li><p>标签不要匹配错误</p></li><li><p>resource绑定mapper，需要使用路径</p></li><li><p>程序配置文件必须符合规范</p></li><li><p>NullPointerException，没有注册到资源</p></li><li><p>输出的xml文件中存在中文乱码问题（最好不要写注释）</p></li><li><p>maven资源没有导出问题</p></li></ul><h3 id="7、万能map"><a href="#7、万能map" class="headerlink" title="7、万能map"></a>7、万能map</h3><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用map！</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//万能map</span></span><br><span class="line">User <span class="title function_">addUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser2"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        insert  into mybatis.user (id,name,pwd)values (#{userid},#{uerName},#{password})</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser2</span><span class="params">()</span>{</span><br><span class="line">       <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">       <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">       Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">       map.put(<span class="string">"userid"</span>,<span class="string">"2"</span>);</span><br><span class="line">       map.put(<span class="string">"userName"</span>,<span class="string">"2"</span>);</span><br><span class="line">       map.put(<span class="string">"password"</span>,<span class="string">"2"</span>);</span><br><span class="line">       mapper.addUser2(map);</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>Map传递参数时，在sql中直接取出key即可</p><p>对象传递参数，直接在sql中取对象属性即可</p><p>只有一个基本类型参数的情况下，可以直接在sql中取到</p><p>多个参数用Map，或者<strong>注解</strong></p><h3 id="8、思考题"><a href="#8、思考题" class="headerlink" title="8、思考题"></a>8、思考题</h3><p>模糊查询怎么写？</p><ol><li><p>java代码执行的时候，传递通配符% %</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">"%李%"</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>在sql拼接中使用通配符！</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mybatis.user <span class="keyword">where</span> name <span class="keyword">like</span> "%"#{<span class="keyword">value</span>}"%"</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="3、配置解析"><a href="#3、配置解析" class="headerlink" title="3、配置解析"></a>3、配置解析</h2><h3 id="1、核心配置文件"><a href="#1、核心配置文件" class="headerlink" title="1、核心配置文件"></a>1、核心配置文件</h3><ul><li><p>mybatis-config.xml</p></li><li><p>Mybatis的配置文件包含了会深深影响Mybatis行为的设置和属性信息</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="2、环境配置（environments）"><a href="#2、环境配置（environments）" class="headerlink" title="2、环境配置（environments）"></a>2、环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>学会使用多套配置运行环境</p><p>mybatis默认的食物管理器就是JDBC，连接池：POOLED</p><h3 id="3、属性（properties）"><a href="#3、属性（properties）" class="headerlink" title="3、属性（properties）"></a>3、属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件</p><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。</p><p>db.properties</p><p>编写一个配置文件</p><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure><p>在核心配置文件中引用</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>可以直接引入外部文件</li><li>可以在其中增加一些配置属性</li><li>如果两个文件有同一个字段，先读取properties元素体内指定的属性，然后根据properties元素中resource属性读取类路径下属性文件，或根据url属性指定的路径读取属性文件，并覆盖之前读取过得同名属性，最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性</li></ul><h3 id="4、类型别名-typeAliases"><a href="#4、类型别名-typeAliases" class="headerlink" title="4、类型别名(typeAliases)"></a>4、类型别名(typeAliases)</h3><ul><li>类型别名是java类型设置一个短的名字</li><li>它仅用于 XML 配置，意在降低冗余的全限定类名书写</li></ul><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.miaobuyi.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean</p><p>扫描实体类的包，它的默认别名就为这个类的类名，首字母小写！</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.miaobuyi.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在实体类比较少的时候使用第一种方式</p><p>如果实体类十分多，建议使用第二种</p><p>第一种可以DIY别名，第二种不行，如果非要改，需要在实体上增加注解</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Alias("user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {}</span><br></pre></td></tr></tbody></table></figure><h3 id="5、设置"><a href="#5、设置" class="headerlink" title="5、设置"></a>5、设置</h3><p>这是MyBatis中极为重要的调整设置，它们会改变MyBatis的运行时行为。</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210714190420538.png" alt="image-20210714190420538"></p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210714190451330.png" alt="image-20210714190451330"></p><h4 id="6、其他设置"><a href="#6、其他设置" class="headerlink" title="6、其他设置"></a>6、其他设置</h4><ul><li><p>typeHandlers（类型处理器）</p></li><li><p>objectFactory（对象工厂）</p></li><li><p>plugins（插件）</p></li><li><p>mybatis-generator-core</p></li><li><p>mybatis-plus</p></li><li><p>通用mapper</p></li></ul><h3 id="7、映射器（mappers）"><a href="#7、映射器（mappers）" class="headerlink" title="7、映射器（mappers）"></a>7、映射器（mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p><p>方式一：【推荐使用】</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  每一个Mapper.XML都需要在Mybatis核心配置文件中注册！  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span>  <span class="attr">resource</span>=<span class="string">"com/miaobuyi/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>方式二：使用class文件绑定注册</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><p>方式三：</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.miaobuyi.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>接口和他的Mapper配置文件必须同名！（UserMapper接口和UserMapper.xml）</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><h3 id="8、生命周期和作用域"><a href="#8、生命周期和作用域" class="headerlink" title="8、生命周期和作用域"></a>8、生命周期和作用域</h3><p>作用域和生命周期是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p><strong>SqlSessionFactoryBuilder</strong>：</p><ul><li>一旦创建了 SqlSessionFactory，就不再需要它了</li><li>局部变量</li></ul><p><strong>SqlSessionFactory</strong>：</p><ul><li>说白了就是可以想象为：数据链接池</li><li>SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例</strong></li><li>因此 SqlSessionFactory 的最佳作用域是应用作用域。 </li><li>有很多方法可以做到，最简单的就是使用<strong>单例模式</strong>或者静态单例模式</li></ul><p><strong>SqlSession</strong></p><ul><li>链接到连接池的一个请求！</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</li><li>用完之后需要赶紧关闭，否则资源被占用！</li></ul><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210714194447645.png" alt="image-20210714194447645"></p><p>这里面的每一个Mapper，就代表一个具体的业务！</p><h2 id="4、解决属性名和字段名不一致的问题"><a href="#4、解决属性名和字段名不一致的问题" class="headerlink" title="4、解决属性名和字段名不一致的问题"></a>4、解决属性名和字段名不一致的问题</h2><h3 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h3><p>数据库中的字段</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210714194722061.png" alt="image-20210714194722061"></p><p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试出现问题</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210714195944486.png" alt="image-20210714195944486"></p><p>解决办法</p><ul><li><p>起别名</p>  <figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mybatis.user <span class="keyword">where</span> id <span class="operator">=</span> #{id}</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>类型处理器</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">select</span> id,name,pwd <span class="keyword">from</span> mybatis.user <span class="keyword">where</span> id <span class="operator">=</span> #{id}```</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="2、resultMap"><a href="#2、resultMap" class="headerlink" title="2、resultMap"></a>2、resultMap</h3><p>结果集映射</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">id name pwd</span><br><span class="line">id name password</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li><li><code>ResultMap</code> 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li><li><code>ResultMap</code>的优秀之处,虽然你已经对他相当了解了，但是根本就不需要显式地配置它们。</li></ul><h2 id="5、日志"><a href="#5、日志" class="headerlink" title="5、日志"></a>5、日志</h2><h3 id="1、日志工程"><a href="#1、日志工程" class="headerlink" title="1、日志工程"></a>1、日志工程</h3><p>如果一个数据库操作，出现了异常，我们需要配错，日志就是最好的助手</p><p>曾经：sout，debug</p><p>现在：日志工厂！</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210715124954090.png" alt="image-20210715124954090"></p><ul><li>SLF4J </li><li>LOG4J 【掌握】</li><li>LOG4J2 </li><li>JDK_LOGGING </li><li>COMMONS_LOGGING </li><li>STDOUT_LOGGING 【掌握】</li><li>NO_LOGGING</li></ul><p>在mybatis中具体使用哪一个日志实现，在设置中设定</p><p><strong>STDOUT_LOGGING标准日志输出</strong></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210715125831931.png" alt="image-20210715125831931"></p><h3 id="2、LOG4J"><a href="#2、LOG4J" class="headerlink" title="2、LOG4J"></a>2、LOG4J</h3><p>什么是LOG4J ？</p><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li><li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li></ul><ol><li><p>先导入LOG4J 的包、</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>log4j.properties</p><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">./log/miaobuyi.log</span></span><br><span class="line"><span class="attr">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d{yy-MM-dd}][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>配置log4j为日志的实现</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>log4j的使用！直接运行刚才的查询</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210715132513047.png" alt="image-20210715132513047"></p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210715132537236.png" alt="image-20210715132537236"></p></li></ol><p><strong>简单使用</strong></p><ol><li><p>在要使用log4j类中，导入包 import org.apache.log4j.Logger;</p></li><li><p>日志对象，参数为当前类的class</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(UserMapperTest.class);</span><br></pre></td></tr></tbody></table></figure></li><li><p>日志级别</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">logger.info(<span class="string">"info:进入了testLog4j"</span>);</span><br><span class="line">logger.debug(<span class="string">"debug:进入了testLog4j"</span>);</span><br><span class="line">logger.error(<span class="string">"error:进入了testLog4j"</span>);</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="6、分页"><a href="#6、分页" class="headerlink" title="6、分页"></a>6、分页</h2><p><strong>思考：为什么要分页</strong></p><ul><li>减少以数据的处理量</li></ul><h3 id="1、使用Limit分页"><a href="#1、使用Limit分页" class="headerlink" title="1、使用Limit分页"></a>1、使用Limit分页</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">语法：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit startIndex,pageSize</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mybatis.user limit <span class="number">3</span>; #[<span class="number">0</span>,n]</span><br></pre></td></tr></tbody></table></figure><p>使用Mybatis分页，核心SQL</p><ol><li><p>接口</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">List<span class="tag">&lt;<span class="name">User</span>&gt;</span> getUserByLimit(Map&lt;String,Integer&gt; map);</span><br></pre></td></tr></tbody></table></figure></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByLimit"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user limit #{startIndex},#{pageSize}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByLimit</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;();</span><br><span class="line">    map.put(<span class="string">"startIndex"</span>,<span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">"pageSize"</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user:userList){</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    }</span><br><span class="line">    sqlSession.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="2、RowBounds【了解】"><a href="#2、RowBounds【了解】" class="headerlink" title="2、RowBounds【了解】"></a>2、RowBounds【了解】</h3><p>不再使用SQL实现分页</p><ol><li><p>接口</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getUserByRowBounds</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByRowBounds"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByRowBounds</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="comment">//RowBounds实现</span></span><br><span class="line">    <span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowBounds</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过java代码层面实现分页</span></span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"com.miaobuyi.mapper.UserMapper.getUserByRowBounds"</span>,<span class="literal">null</span>,rowBounds);</span><br><span class="line">    <span class="keyword">for</span> (User user:userList){</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    }</span><br><span class="line">    sqlSession.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="3、插件分页【了解】"><a href="#3、插件分页【了解】" class="headerlink" title="3、插件分页【了解】"></a>3、插件分页【了解】</h3><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210715165613496.png" alt="image-20210715165613496"></p><h2 id="7、使用注解开发"><a href="#7、使用注解开发" class="headerlink" title="7、使用注解开发"></a>7、使用注解开发</h2><h3 id="1、面向接口编程"><a href="#1、面向接口编程" class="headerlink" title="1、面向接口编程"></a>1、面向接口编程</h3><p>大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程</p><p><strong>-根本原因∶解耦，可拓展，提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好</strong></p><ul><li><p>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下.各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了;</p></li><li><p>而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p></li></ul><p><strong>关于接口的理解</strong></p><ul><li><p>接口从更深层次的理解，应是定义(规范，约束）与实现(名实分离的原则）的分离。</p></li><li><p>接口的本身反映了系统设计人员对系统的抽象理解。</p></li><li><p>接口应有两类:</p><ul><li>第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class);</li><li>第二类是对一个个体某一方面的抽象，即形成一个抽象面( interface) ;</li></ul></li><li><p>一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p></li></ul><p><strong>三个面向区别</strong></p><ul><li><p>面向对象是指，我们考虑问题时，以对象为单位,考虑它的属性及方法.</p></li><li><p>面向过程是指，我们考虑问题时，以一个具体的流程(事务过程)为单位，考虑它的实现.</p></li><li><p>接口设计与非接口设计是针对复用技术而言的，与面向对象(过程)不是一一个问题.更多的体现就是对系统整体的</p></li></ul><h3 id="2、使用注解开发"><a href="#2、使用注解开发" class="headerlink" title="2、使用注解开发"></a>2、使用注解开发</h3><ol><li><p>注解在接口上实现</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Select("select * from user")</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>需要在核心配置文件中绑定接口</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; userList = mapper.getUsers();</span><br><span class="line">    <span class="keyword">for</span>(User user:userList){</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    }</span><br><span class="line">    sqlSession.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>本质：反射机制实现</p><p>底层：动态代理！</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210715175854323.png" alt="image-20210715175854323"> </p><p><strong>Mybatis详细的执行流程！</strong></p><h2 id="8、Lombok"><a href="#8、Lombok" class="headerlink" title="8、Lombok"></a>8、Lombok</h2><p>使用步骤</p><ol><li><p>在IDEA中安装Lombok</p></li><li><p>在项目中导入Lombok的jar包</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log4j</span>, <span class="meta">@Log4j2</span>, <span class="meta">@Slf4j</span>, <span class="meta">@XSlf4j</span>, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span>, <span class="meta">@CustomLog</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@Singular</span></span><br><span class="line"><span class="meta">@Delegate</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Accessors</span></span><br><span class="line"><span class="meta">@Wither</span></span><br><span class="line"><span class="meta">@With</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@val</span></span><br><span class="line"><span class="meta">@var</span></span><br><span class="line">experimental <span class="meta">@var</span></span><br><span class="line"><span class="meta">@UtilityClass</span></span><br><span class="line"><span class="meta">@ExtensionMethod</span> (Experimental, activate manually in plugin settings)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>:无参构造，get，set，toString，hashcode，equals</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="9、多对一处理"><a href="#9、多对一处理" class="headerlink" title="9、多对一处理"></a>9、多对一处理</h2><p>多对一：</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210716171244575.png" alt="image-20210716171244575"></p><ul><li>多个学生，对应一个老师</li><li>对于学生这边而言，关联。。对个学生，关联一个老师</li><li>对于老师而言，集合，</li></ul><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210716174404362.png" alt="image-20210716174404362"></p><p>绿色：1   蓝色：∞</p><p>SQL：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher` (</span><br><span class="line">                           `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">                           `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">                           <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'秦老师'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">                           `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">                           `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">                           `tid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">                           <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">                           KEY `fktid` (`tid`),</span><br><span class="line">                           <span class="keyword">CONSTRAINT</span> `fktid` <span class="keyword">FOREIGN</span> KEY (`tid`) <span class="keyword">REFERENCES</span> `teacher` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'小明'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'小红'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'小张'''</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'小李'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">'小王'</span>, <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><ol><li>导入Lombok</li><li>新建实体类Teacher，Student</li><li>建立Mapper接口</li><li>建立Mapper.XML文件</li><li>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</li><li>测试查询是否能能够成功</li></ol><h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        思路:</span></span><br><span class="line"><span class="comment">            1.查询所有的学生信息</span></span><br><span class="line"><span class="comment">            2.根据查询出来的学生的tid，寻找对应的老师! 子查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent"</span> <span class="attr">resultmap</span>=<span class="string">"studentTeacher"</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">se1ect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resu1t</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resu1t</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理对象:association集合:collection --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resu1tMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent2"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher2"</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.name tname</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher2"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>回顾Mysql多对一查询方式</p><ul><li>子查询</li><li>联表查询</li></ul><h2 id="10、一对多处理"><a href="#10、一对多处理" class="headerlink" title="10、一对多处理"></a>10、一对多处理</h2><p>比如：一个老师拥有多个学生！</p><p>对于老师而言就是一对多的关系！</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li><p>环境搭建和刚才一样</p><p><strong>实体类</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tid;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="按照过嵌套处理"><a href="#按照过嵌套处理" class="headerlink" title="按照过嵌套处理"></a>按照过嵌套处理</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent"</span>&gt;</span></span><br><span class="line">    select s.id sid ,s.name sname,t.name tname,t.id tid</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id and t.id = #{tid}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tid"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="按查询嵌套处理"><a href="#按查询嵌套处理" class="headerlink" title="按查询嵌套处理"></a>按查询嵌套处理</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher2"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent2"</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher where id = #{tid}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent2"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span> <span class="attr">select</span>=<span class="string">"getStudentByTeacherId"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByTeacherId"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    select * from mybatis.student where tid=#{tid}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>小结</p><ol><li>关联 - association【多对一】</li><li>集合 - collection 【一对多】 </li><li>javaType &amp; ofType<ol><li>javaType用来指定实体类中的属性类型</li><li>ofType   用来指定映射到List或者集合中的pojo类型中，泛型中的约束类型</li></ol></li></ol><p>注意点：</p><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>注意一对多和多对一中，属性名和字段的问题</li><li>如果问题不好排查错误，可以使用日志。建议使用log4j</li></ul><p>面试高频</p><ul><li>Mysql引擎</li><li>InnoDB一层原理</li><li>索引</li><li>索引优化！</li></ul><h2 id="11、动态SQL"><a href="#11、动态SQL" class="headerlink" title="11、动态SQL"></a>11、动态SQL</h2><p><strong>什么是动态SQL：动态SQL就是根据不同条件生成不同的SQL语句</strong></p><p>利用动态SQL这一特性可以彻底摆脱这种痛苦。</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">动态SQL元素和JSTL或基于类似XML的文本处理器相似。在MyBatis 之前的版本中，有很多元素需要花时间</span><br><span class="line">了解。MyBatis 3大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis采用功能强大的基于OGNL</span><br><span class="line">的表达式来淘汰其它大部分元素。</span><br><span class="line">if</span><br><span class="line">choose (when， otherwise)</span><br><span class="line">trim (where， set)</span><br><span class="line">foreach</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog`(</span><br><span class="line">    `id` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'博客id'</span>,</span><br><span class="line">    `title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'博客标题'</span>,</span><br><span class="line">    `author` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'博客作者'</span>,</span><br><span class="line">    `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">    `views` <span class="type">int</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'浏览量'</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></tbody></table></figure><p>创建一个基础工程</p><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blog</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date creatTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> views;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>编写实体类对应的Mapper接口和Mapper.XML文件</p></li></ol><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIf"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        and title = #{title}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #{author}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="choose-when，-otherwise"><a href="#choose-when，-otherwise" class="headerlink" title="choose (when， otherwise)"></a>choose (when， otherwise)</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogChoose"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">                title = #{title}</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">                and authot = #{author}</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #{views}</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="trim-where，-set-【trim可以自定义】"><a href="#trim-where，-set-【trim可以自定义】" class="headerlink" title="trim (where， set)【trim可以自定义】"></a>trim (where， set)【trim可以自定义】</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBlog"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> &gt;</span></span><br><span class="line">    update mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            title = #{title},</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            author = #{author},</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;trim prefix="" prefixOverrides="" suffix="" suffixOverrides=""&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/trim&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>所谓动态SQL，本质还是SQL语句，只是我们可以再SQL层面去执行一些逻辑代码</strong></p><p>if </p><p>where set  choose  when</p><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可能会讲一些功能的部分抽取出来，方便复用</p><ol><li>使用SQL标签抽取的公共部分</li></ol><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"if-title-author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        title = #{title}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #{author}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>在需要使用的地方使用include标签引用即可</li></ol><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIf"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"if-title-author"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> </span><br><span class="line"><span class="operator">&lt;</span>foreach item<span class="operator">=</span>"id" index<span class="operator">=</span>"index" collection<span class="operator">=</span>"ids"</span><br><span class="line"><span class="keyword">open</span><span class="operator">=</span>"(" separator <span class="operator">=</span> "or"  <span class="keyword">close</span><span class="operator">=</span>")"</span><br><span class="line">#{id}</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>foreach<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">or</span> id <span class="operator">=</span><span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210717161103126.png" alt="image-20210717161103126"></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogForeach"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"and ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line">            id = #{id}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p> <strong>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了</strong></p><p>建议</p><ul><li>先在Mysql中写出完整的SQL，在对应的去修改成为我们的动态SQL实现通用</li></ul><h2 id="12、缓存"><a href="#12、缓存" class="headerlink" title="12、缓存"></a>12、缓存</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">查询 ：链接数据库 ，耗资源</span><br><span class="line">一次查询的结果，给他暂存一个可以直接取到的地方！--&gt;内存 ：缓存</span><br><span class="line"></span><br><span class="line">我们再次查询相同的数据的时候，直接走缓存，就不用走数据库了</span><br></pre></td></tr></tbody></table></figure><ol><li>什么是缓存[ Cache ]?<ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存(内存)中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率,解决了高并发系统的性能问题。</li></ul></li><li>为什么使用缓存?<ul><li>减少和数据库的交互次数,减少系统开销,提高系统效率。</li></ul></li><li>什么样的数据能使用缓存?<ul><li>经常查询并且不经常改变的数据。【可以使用缓存】</li></ul></li></ol><h3 id="2、Mybatis缓存"><a href="#2、Mybatis缓存" class="headerlink" title="2、Mybatis缓存"></a>2、Mybatis缓存</h3><ul><li>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效<br>率。</li><li>MyBatis系统中默认定义了两级缓存: <strong>一级缓存</strong>和<strong>二级缓存</strong><ul><li>默认情况下，只有一-级缓存开启。 (SqlSession级别的缓存， 也称为本地缓存)</li><li>二级缓存需要手动开启和配置， 他是基于namespace级别的缓存。</li><li>为了提高扩展性, MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li></ul></li></ul><h3 id="3、一级缓存"><a href="#3、一级缓存" class="headerlink" title="3、一级缓存"></a>3、一级缓存</h3><ul><li>一级缓存也叫本地缓存: SqlSession<ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库;</li></ul></li></ul><p>测试步骤：</p><ol><li><p>开启日志</p></li><li><p>测试在一个Session中查询两次相同的记录</p></li><li><p>查看日志输出</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210717175732648.png" alt="image-20210717175732648"></p></li></ol><p>缓存失效的情况</p><ol><li><p>查询不同的东西</p></li><li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210717180544621.png" alt="image-20210717180544621"></p></li><li><p>查询不同的Mapper.xml</p></li><li><p>手动清理缓存！</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    sqlSession.clearCache();<span class="comment">//手动清理缓存</span></span><br><span class="line">    System.out.println(<span class="string">"========================="</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>小结：一级缓存默认是开启的，只有在一次SqlSession中有效，也就是拿到链接到关闭连接这个区间段！</p><p>一级缓存就是一个Map</p><h3 id="4、-二级缓存"><a href="#4、-二级缓存" class="headerlink" title="4、 二级缓存"></a>4、 二级缓存</h3><ul><li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存， 一个名称空间，对应一 个二级缓存</li><li>工作机制<ul><li>个会话查询一条数据，这个数据就会被放在当前会话的- -级缓存中</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了;但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中</li><li>新的会话查询信息，就可以从二级缓存中获取内容;</li><li>不同的mapper查出的数据会放在自己对应的缓存(map)中</li></ul></li></ul><p>步骤：</p><ol><li><p>开启全局缓存</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        显示的开启全局缓存--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>xxxxxxxxxx2&nbsp;1<span class="comment">&lt;!-- &nbsp; &nbsp; &nbsp;  显示的开启全局缓存--&gt;</span>2 &nbsp; &nbsp; &nbsp; &nbsp;<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>再要使用deMapper中开启</p></li></ol>   <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        在当前xml中使用缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>   也可以自定义参数</p>   <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"FIFO"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">"60000"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">"512"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><p>测试</p></li><li><p>问题：我们需要将实体类序列化！否则就会报错！</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Caused by: java. io. NotSerializableExcepti on:com.miaobuyi.pojo.user</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中</li><li>只有当回话提交或者关闭的时候，才会提交到二级缓存中！</li></ul><h3 id="5、缓存原理"><a href="#5、缓存原理" class="headerlink" title="5、缓存原理"></a>5、缓存原理</h3><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210717191347109.png" alt="image-20210717191347109"></p><h3 id="6、自定义缓存-ehcache"><a href="#6、自定义缓存-ehcache" class="headerlink" title="6、自定义缓存-ehcache"></a>6、自定义缓存-ehcache</h3><p>Redis数据库来做缓存！ K-V</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2021/09/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/09/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p>饿汉式单例</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hungry</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可能会浪费空间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] datal = <span class="keyword">new</span> <span class="title class_">byte</span> [<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data2 = <span class="keyword">new</span> <span class="title class_">by</span> mte [<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data3 = <span class="keyword">new</span> <span class="title class_">byte</span> [<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data4 = <span class="keyword">new</span> <span class="title class_">byte</span> [<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Hungry</span><span class="params">()</span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> fina1 <span class="keyword">static</span> <span class="type">Hungry</span> <span class="variable">HUNGRY</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hungry</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> HUNGRY;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>DCL懒汉式</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMan</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">qinjiang</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="title function_">LazyMan</span><span class="params">()</span>{</span><br><span class="line"><span class="keyword">synchronized</span> (LazyMan. class){</span><br><span class="line">            <span class="keyword">if</span> (qinjiang == <span class="literal">false</span>){</span><br><span class="line">            qinjiang = <span class="literal">true</span>;</span><br><span class="line">            }<span class="keyword">else</span> {|</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"不 要试图使用反射破坏异常"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan LazyMan;</span><br><span class="line"><span class="comment">//双重检测锁模式的懒汉式单例DCL 懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title function_">getInstance</span><span class="params">( )</span>{</span><br><span class="line"><span class="keyword">if</span> (LazyMan==nu1l){</span><br><span class="line"><span class="keyword">synchronized</span> (LazyMan. class){</span><br><span class="line"><span class="keyword">if</span> (LazyMan==nu1l){</span><br><span class="line">lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>(); <span class="comment">//不是一个原子性操作</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> LazyMan;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射!</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"><span class="type">LazyMan</span> <span class="variable">instance</span> <span class="operator">=</span> LazyMan.getInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">qinjiang</span> <span class="operator">=</span> LazyMan.class.getDeclaredField( name: <span class="string">"qinjiang"</span>);</span><br><span class="line">        qinjiang. setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan. class. getDeclaredConstructor(<span class="literal">null</span>)</span><br><span class="line">        declaredConstructor . setAccessible(<span class="literal">true</span>);</span><br><span class="line">        LazyManτ instance = declaredConstructor.newInstance();</span><br><span class="line">        qinjiang. set(instance,<span class="literal">false</span>);</span><br><span class="line">        <span class="type">LazyMan</span> <span class="variable">instance2</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line">        System.out.print1n(instance);</span><br><span class="line">        System.out.print1n(instance2);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>静态内部类</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Holder</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Holder</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    pub1ic <span class="keyword">static</span> Holder <span class="title function_">getInstace</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> InnerClass. HOLDER;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    pub1ic <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span>{</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Holder</span> <span class="variable">HOLDER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Holder</span>();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>单例不安全，反射</p></blockquote><blockquote><p>枚举</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="comment">//enum是一个什么?本身也是 一个CLass类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingle</span> {</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">public</span> EnumSingle <span class="title function_">getInstance</span><span class="params">()</span>{</span><br><span class="line">    <span class="keyword">return</span> INS TANCE ;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Test</span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception{</span><br><span class="line">        <span class="type">EnumSingle</span> <span class="variable">instance1</span> <span class="operator">=</span> EnumSingle.INSTANCE;</span><br><span class="line">        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(String.class,<span class="type">int</span>.class)</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">EnumSingle</span> <span class="variable">instance2</span> <span class="operator">=</span> declaredConstructor . newInstance();</span><br><span class="line">        <span class="comment">// NoSuchMethodException: com. kuang. single. EnumSingle. &lt;init&gt;()</span></span><br><span class="line">        System.out.println( instance1);</span><br><span class="line">        System.out.println( instance2);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>枚举的最终反编译</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">pub1ic <span class="keyword">static</span> Enumsing1e[] values(){</span><br><span class="line">    <span class="keyword">return</span> (EnumSingle[]) $VALUES. clone();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> EnumSingle <span class="title function_">valueOf</span> <span class="params">(String name)</span>{</span><br><span class="line">    <span class="keyword">return</span> (EnumS ing1e)Enum. valueOf (com/kuang/s ing1e/Enumsingle, name);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Enumsingle</span><span class="params">(String S，<span class="type">int</span> i)</span>{</span><br><span class="line">    <span class="built_in">super</span>(s，i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> EnumSingle <span class="title function_">getInstance</span><span class="params">()</span>{</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> EnumSingle INSTANCE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> EnumSingle $VALUES[];</span><br><span class="line"><span class="keyword">static</span>{</span><br><span class="line">    INSTANCE = <span class="keyword">new</span> <span class="title class_">EnumSingle</span>(<span class="string">"INSTANCE"</span>，<span class="number">0</span>);</span><br><span class="line">    $VALUES = (<span class="keyword">new</span> <span class="title class_">EnumSing1e</span>[] {</span><br><span class="line">        INSTANCE</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2021/09/21/Spring/"/>
      <url>/2021/09/21/Spring/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><ul><li><p>2002 ，首次推出了Spring框架的雏形：<strong>interface21</strong>框架</p></li><li><p>2004-3-24正式发布1.0版本，Spring框架以interface21框架为基础，经过重新设计，并不对丰富其内涵</p></li><li><p>Rod Johnson，Spring框架的创始人</p></li><li><p>spring的理念：使现有的技术更加容易使用，本身是一个大杂烩，整合了现有的技术框架</p></li><li><p>SSH ： Struct + Spring + Hibernate！</p></li><li><p>SSM ： SpringMVC + Spring + Mybatis！</p></li></ul><p>maven</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="2-优点"><a href="#2-优点" class="headerlink" title="2.优点"></a>2.优点</h3><ul><li>Spring是一个开源的免费的框架（容器）！</li><li>Spring是一个轻量级，非入侵式的容器！</li><li>控制翻转（IOC），面向切面编程（AOP）</li><li>支持事务的处理，对框架整合的支持</li></ul><p>总结一句话：Spring就是一个轻量级的控制反转（IOC)和面向切面(AOP)的框架</p><h3 id="3、组成"><a href="#3、组成" class="headerlink" title="3、组成"></a>3、组成</h3><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210719152443040.png" alt="image-20210719152443040"></p><h3 id="4、拓展"><a href="#4、拓展" class="headerlink" title="4、拓展"></a>4、拓展</h3><p>在Spring的官网有这个介绍：现代化的java开发！说白了就是基于Spring开发</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210719152719225.png" alt="image-20210719152719225"></p><ul><li>Srping Boot<ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速的开发单个微服务</li><li>约定大于配置！</li></ul></li><li>Spring Cloud<ul><li>SpringCloud是基于SpringBoot实现的。</li></ul></li></ul><p>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Srping和SpringMVC</p><p><strong>弊端：发展了太久之后，违背了原来的理念！配置十分繁琐，人称“配置地狱！”</strong></p><h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><ol><li>UserDao接口</li><li>UserDaoImpl实现类</li><li>USerService业务接口</li><li>UserServiceUmpl业务实现类</li></ol><p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改源代码！如果程序代码量十分大，修改一次的代码代价十分昂贵！</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210719165232920.png" alt="image-20210719165232920"></p><p>我们使用一个Set接口实现</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserMapperImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用set进行动态实现值得注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserMapper</span><span class="params">(UserMapper userMapper)</span> {</span><br><span class="line">    <span class="built_in">this</span>.userMapper = userMapper; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>之前，程序是主动创建对象！控制权在程序猿手上</li><li>使用set注入后，程序不在具有主动性，而是变成了被动的接受对象</li></ul><p>这种思想，从本质上解决了问题，我们程序猿不再去管理对象的创建。系统的耦合性大大减低，可以更加专注地在业务的实现上！这是IOC的原型！ </p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210719165243411.png" alt="image-20210719165243411"></p><h3 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h3><p><strong>控制反转loC(Inversion of Control),是-种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。 没有IoC的程序中,我们使用面向对象编程,对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是:获得依赖对象的方式反转了。</p><p>采用XML方式配置Bean的时候，Bean的定 义信息是和实现分离的，而采用注解的方式可以把两者合为一体,Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p><strong>控制反转是一种通过描述(XML或注解) 并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入(Dependency Injection,DI)。</strong></p><p><strong>IOC实际上是对象由spring创建，管理，装配</strong></p><h2 id="3、HelloSpring"><a href="#3、HelloSpring" class="headerlink" title="3、HelloSpring"></a>3、HelloSpring</h2><h3 id="1-导入Spring相关的Jar包"><a href="#1-导入Spring相关的Jar包" class="headerlink" title="1.导入Spring相关的Jar包"></a>1.导入Spring相关的Jar包</h3><p>注：Spring需要导入commons-logging进行日志记录，我们利用maven，它会自动下载对应的依赖项</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、编写相关代码"><a href="#2、编写相关代码" class="headerlink" title="2、编写相关代码"></a>2、编写相关代码</h3><ol><li>编写一个Hello实体类</li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> {</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStr</span><span class="params">(String str)</span> {</span><br><span class="line">        <span class="built_in">this</span>.str = str;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello{"</span> +</span><br><span class="line">                <span class="string">"str='"</span> + str + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><p>在xml中注册</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    使用Spring来创建对洗那个，在Spring这些都成为Bean</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        类型 变量名 = new 类型();</span></span><br><span class="line"><span class="comment">        Hello hello = new Hello();</span></span><br><span class="line"><span class="comment">        bean = 对象    new Hello();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        id = 变量名</span></span><br><span class="line"><span class="comment">        class = new 的对象</span></span><br><span class="line"><span class="comment">        property 相当于给对象中的属性设置一个值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.Hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"Spring"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Spring的上下文对象！</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">//我们的对象都在Spring中管理了，我们要使用，直接去里面取出来就可以了！</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">hello</span> <span class="operator">=</span> context.getBean(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>思考问题?</p><ul><li>Hello对象是谁创建的?<ul><li>hello对象是由Spring创建的</li></ul></li><li>Hello 对象的属性是怎么设置的?<ul><li>hello对象的属性是由Spring容器设置的，</li></ul></li></ul><p>这个过程就叫控制反转 :</p><p>控制：谁来控制对象的创建,传统应用程序的对象是由程序本身控制创建的,使用Spring后,对象是由Spring来创建的.<br>反转：程序本身不创建对象,而变成被动的接收对象.<br>I依赖注入：就是利用set方法来进行注入的.<br>IOC是一种编程思想,由主动的编程变成被动的接收.<br>可以通过newClassPathXmlApplicationContext去浏览一下底层源码 .<br><strong>OK,到了现在,我们彻底不用再程序中去改动了,要实现不同的操作,只需要在xml配置文件中进行修改,所谓的loC,一句话搞定:对象由Spring来创建,管理,装配!</strong></p><h2 id="4、IOC创建对象的方式"><a href="#4、IOC创建对象的方式" class="headerlink" title="4、IOC创建对象的方式"></a>4、IOC创建对象的方式</h2><ol><li><p>使用无参构造创建对象，默认</p></li><li><p>假设我们要使用有参构造创建对象</p><ol><li><p>下标赋值</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.User"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"喵不易学java"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>类型</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"miaobuyi"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>参数名</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.User"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"喵不易"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol><p>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了</p><h2 id="5、Spring配置"><a href="#5、Spring配置" class="headerlink" title="5、Spring配置"></a>5、Spring配置</h2><h3 id="1、别名"><a href="#1、别名" class="headerlink" title="1、别名"></a>1、别名</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    别名，如果添加了别名，我们也可以使用别名获取到这个对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">alias</span>=<span class="string">"usernew"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、Bean的配置"><a href="#2、Bean的配置" class="headerlink" title="2、Bean的配置"></a>2、Bean的配置</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    id：bean的唯一标识符，也就是相当于我们学的对象名</span></span><br><span class="line"><span class="comment">    class：bean对选哪个所对应的全限定名：包名+类型</span></span><br><span class="line"><span class="comment">    name：也是别名，而且name更高级 可以同时取多个别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.User"</span> <span class="attr">name</span>=<span class="string">"userNew,u2"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"喵不易"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3、import"><a href="#3、import" class="headerlink" title="3、import"></a>3、import</h3><p>这个import，一般用于团队开发使用，他可以将多个配置文件导入合并为一个</p><p>假设，现在项目中有多个人开发，这三个人负责不同的类开发，不同的类需要注册在不同的bean中，我们可以利用import将所有人beans.xml合并为一个总的！</p><ul><li><p>张三</p></li><li><p>李四</p></li><li><p>王五</p></li><li><p>applicationContext.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"beans.xml"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><p>使用的时候直接使用总的配置就可以了</p><h2 id="6、DI依赖注入"><a href="#6、DI依赖注入" class="headerlink" title="6、DI依赖注入"></a>6、DI依赖注入</h2><h3 id="1、构造器注入"><a href="#1、构造器注入" class="headerlink" title="1、构造器注入"></a>1、构造器注入</h3><p> 前面有</p><h3 id="2、Set方式注入【重点-】"><a href="#2、Set方式注入【重点-】" class="headerlink" title="2、Set方式注入【重点 】"></a>2、Set方式注入【重点 】</h3><ul><li>依赖注入：Set注入<ul><li>依赖：bean对象的创建依赖于容器！</li><li>注入：bean对象中的所有属性，由容器注入</li></ul></li></ul><p>【环境搭建】</p><ol><li><p>复杂类型</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> {</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> {</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>真实测试对象</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address ;</span><br><span class="line">    <span class="keyword">private</span> String[] books ;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>beans.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.Student"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         第一种，普通值注入 value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"喵不易"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.miaobuyi.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>完善注入信息</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.Address"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"成都"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.Student"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         第一种，普通值注入 value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"喵不易"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        第二种，Bean注入 ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"books"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- List注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbys"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Map注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"省份证"</span> <span class="attr">value</span>=<span class="string">"1321321321"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"银行卡"</span> <span class="attr">value</span>=<span class="string">"64654654"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Set注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"games"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Null注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wife"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Properties注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"学号"</span>&gt;</span>15846532<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"性别"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"姓名"</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3、拓展方式注入"><a href="#3、拓展方式注入" class="headerlink" title="3、拓展方式注入"></a>3、拓展方式注入</h3><p>我们可以使用p命名空间和c命名空间进行注入</p><p>官方解释：</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210720195043436.png" alt="image-20210720195043436"></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值：properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.User"</span> <span class="attr">p:name</span>=<span class="string">"喵不易"</span> <span class="attr">p:age</span>=<span class="string">"18"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--c命名空间注入，可以直接注入属性的值：construct--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.User"</span> <span class="attr">c:age</span>=<span class="string">"18"</span> <span class="attr">c:name</span>=<span class="string">"喵不易"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"userbeans.xml"</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">"user2"</span>, User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意点：p命名和c命名不能直接使用，需要导入xml约束 </p><h3 id="4、Bean的作用域"><a href="#4、Bean的作用域" class="headerlink" title="4、Bean的作用域"></a>4、Bean的作用域</h3><p> <img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210720205700969.png" alt="image-20210720205700969"></p><ol><li><p>单例模式（Spring默认机制）</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.User"</span> <span class="attr">c:age</span>=<span class="string">"18"</span> <span class="attr">c:name</span>=<span class="string">"喵不易"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>原型模式：每次从容器中get的时候，都会产生一个新对象！</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.User"</span> <span class="attr">c:age</span>=<span class="string">"18"</span> <span class="attr">c:name</span>=<span class="string">"喵不易"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>其余的 request、session、application这些只能在web开放中使用</p></li></ol><h2 id="7、Bean的自动装配"><a href="#7、Bean的自动装配" class="headerlink" title="7、Bean的自动装配"></a>7、Bean的自动装配</h2><ul><li>自动装配是Spring满足Bean依赖的一种方式！</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性！</li></ul><p>在Spring中有三种装配的方式</p><ol><li>在xml中显示的配置</li><li>在Java中显示配置</li><li>隐式的自动装配bean【重要】</li></ol><h3 id="1、测试"><a href="#1、测试" class="headerlink" title="1、测试"></a>1、测试</h3><p>环境搭建：一个人有两个宠物！</p><h3 id="2、byName自动装配"><a href="#2、byName自动装配" class="headerlink" title="2、byName自动装配"></a>2、byName自动装配</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.Cat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.Dog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">byName:会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.People"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"喵不易"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3、byType自动装配"><a href="#3、byType自动装配" class="headerlink" title="3、byType自动装配"></a>3、byType自动装配</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.Cat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog11"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.Dog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">byType:会自动在容器上下文中查找，和自己对象属性类型相同的bean</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.pojo.People"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"喵不易"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>小结：</p><ul><li>byName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致！</li><li>byType的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致！</li></ul><h3 id="4、使用注解实现自动装配"><a href="#4、使用注解实现自动装配" class="headerlink" title="4、使用注解实现自动装配"></a>4、使用注解实现自动装配</h3><p>autowire 先byType，如果类型大于1，再byName</p><p>jdk1.5支持的注解，Spring2.5就支持注解了！</p><p>基于注释的配置的引入提出了一个问题，即这种方法是否比XML“更好”。</p><p>要使用注解须知：</p><ol><li>导入约束 context约束</li><li>配置注解的支持：==&lt;context: annotation-config/&gt;==</li></ol><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xm1 version="1. 0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xm7ns</span>=<span class="string">"http://www.springframework.org/ schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xm1ns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xm1ns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemalocati</span> <span class="attr">on</span>=<span class="string">"http: / /www. springf ramework. org/ schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springf ramework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    https://www.springf ramework.org/schema/context/spring-context. xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--开启注解的支持--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">context:</span> <span class="attr">annotation-config</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>|</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>@Autowired</p><p>直接在属性上使用即可！也可以在set方式上使用！</p><p>使用Autowired我们可以不用编写set方法了，前提是你这个自动装配的属性在IOC容器（Spring）容器中存在。且符合byName和byType</p><p>科普：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> 字段标记了这个注解，说明这个字段可以为<span class="literal">null</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired {</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果显示定义了Autowired的required属性为false,说明这个对象可以为null，否则不允许为空</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired(rerequired = false)</span></span><br></pre></td></tr></tbody></table></figure><p>测试代码</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> {</span><br><span class="line">    <span class="comment">//如果显示定义了Autowi red的requi red属性为false，说明这个对象可以为nu11，否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候、我们可以使用@Qualifier(value=”xxx”)去配置@Autowired的使用，指定一个唯一的bean对象注入! </p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">pub1ic <span class="keyword">class</span> <span class="title class_">People</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(va1ue="cat111")</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowi</span> red</span><br><span class="line">    <span class="meta">@Qualifier(va1ue="dog222")</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>@Resource注解</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">pub1ic <span class="keyword">class</span> <span class="title class_">Peop1e</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = "cat2")</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>jdk11没有@Resource</p><p>小结：</p><p>autowired是先byteType,如果唯一則注入，否则byName查找。</p><p>resource是先byname,不符合再继续byType</p><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><p><strong>注解说明</strong>：</p><ul><li><p>@Autowired :自动装配通过类型。名字如果Autowired不能唯一自动装配 上属性，则需要通过@Qualifier(value=” xxx” )</p></li><li><p>@Nu1lable字段标记 了这个注解，说明这个字段可以为nu11; .</p></li><li><p>@Resource:自动装配通过名字。类型。</p></li><li><p>@Component :组件，放在类上，说明这个类被Spring管理了，就是bean!</p></li></ul><p>在Spring4之后，要使用注解开发，AOP的包必须导入</p><p>使用注解需要导入context约束，增加注解的支持！</p><ol><li><p>bean</p></li><li><p>属性如何注入</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//等价于    &lt;bean id="user" class="com.miaobuyi.pojo.User"/&gt;</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="comment">//相当于&lt;property name="name" value="喵不易"/&gt;</span></span><br><span class="line">    <span class="meta">@Value("miaobuyi")</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></li><li><p>衍生的注解</p><p>@Component有几个衍生注解，我们在web开发中，会按照mvc三层架构分层</p><ul><li>dao【@Repository】</li><li>service【@Service】</li><li>controller【@Controller】</li></ul><p>这四个注解功能都是一样的，都是代表将某个类注册到Spring中，装配Bean</p></li><li><p>自动装配</p><ul><li>@Autowired :自动装配通过类型。名字如果Autowired不能唯一自动装配 上属性，则需要通过@Qualifier(value=” xxx” )</li><li>@Nu1lable字段标记 了这个注解，说明这个字段可以为nu11; .</li><li>@Resource:自动装配通过名字。类型。</li></ul></li><li><p>作用域</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope("prototype")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="comment">//相当于&lt;property name="name" value="喵不易"/&gt;</span></span><br><span class="line">    <span class="meta">@Value("miaobuyi")</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>小结</p></li></ol><p> xml与注解：</p><ul><li>xml更加万能，适用于任何场合！维护简单方便</li><li>注解，不是自己的类不能使用，维护相对复杂</li></ul><p>xml与注解最佳实践：</p><ul><li>xml用来管理bean；</li><li>注解只负责完成属性的注入；</li><li>我们在使用的过程中，只需要注意一个问题：必须让注解生效，就需要开启注解支持</li></ul><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.miaobuyi"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="9、使用java的方式配置Spring"><a href="#9、使用java的方式配置Spring" class="headerlink" title="9、使用java的方式配置Spring"></a>9、使用java的方式配置Spring</h2><p>我们现在要完全不使用Spring的xml配置了，全权交给java来做！</p><p>javaConfig是Spring的一个子项目，在Spring4之后，它成为了核心功能</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210722194702296.png" alt="image-20210722194702296"></p><p>实体类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里这个注解的意思，就是说明这个类被Spring接管了，注册到了容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("miaobuyi")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>配置文件</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.miaobuyi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个也会Spring容器托管，注册到容器中，应为他本来就是一个@Component，@Configuration代表这是一个配置类，就和我们之前看的beans.xml一样的</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan("com.miaobuyi")</span></span><br><span class="line"><span class="meta">@Import(MyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册一个bean，就相当于我们之前的一个bean标签</span></span><br><span class="line">    <span class="comment">//这个方法的名字，就相当于bean标签中的id属性</span></span><br><span class="line">    <span class="comment">//这个方法的返回值，就相当于bean标签中的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();<span class="comment">//就是要返回要注入到bean的对象</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>测试类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.miaobuyi.config.MyConfig;</span><br><span class="line"><span class="keyword">import</span> com.miaobuyi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> {</span><br><span class="line">    <span class="comment">//如果完全使用了配置类方式去做，我们就只能通过AnnotationConfig 上下文来获取容器，通过配置类的class对象加载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfig.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">"getUser"</span>, User.class);</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这种纯java的配置方式，在SpringBoot中随处可见！</p><h2 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h2><p>为什么要学习代理模式？因为这就是SpringAOP的底层！【SpringAOP和SpringMVC】</p><p>代理模式的分类：</p><ul><li>静态代理</li><li>动态代理</li></ul><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210722212902919.png" alt="image-20210722212902919"></p><h3 id="1、-静态代理"><a href="#1、-静态代理" class="headerlink" title="1、 静态代理"></a>1、 静态代理</h3><p>角色分析：</p><ul><li>抽象角色：一般使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，代理正式角色后，我们一般会做一些附属操作</li><li>客户：访问代理对象的人</li></ul><p>代码步骤：</p><ol><li><p>接口</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>真实角色</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>代理角色</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>{</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Host host)</span> {</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> {</span><br><span class="line">        seeHouse();</span><br><span class="line">        host.rent();</span><br><span class="line">        hetong();</span><br><span class="line">        fare();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"中介带你看房"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//签合同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hetong</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"签合同"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"收中介费"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>客户端访问代理角色</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">client</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//租客要租房子，需要一个房东</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">        <span class="comment">//代理，中介帮租客租房子，但是，代理角色一般会有一些附属操作</span></span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//你不用面对房东直接找中介租房</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>代理模式的好处：</p><ul><li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共也就交给了代理角色！实现了业务的分工！</li><li>公共业务防身个拓展的时候，方便集中管理！</li></ul><p>缺点：</p><ul><li>一个真实角色就会产生一个代理角色；代码量会翻~开发效率会贬变低</li></ul><h3 id="2、加深理解"><a href="#2、加深理解" class="headerlink" title="2、加深理解"></a>2、加深理解</h3><p>代码步骤：</p><ol><li><p>接口</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>真实角色</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.demo02;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"增加了一个用户"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"删除了一个用户"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"修改了一个用户"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"查询了一个用户"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.改动原有的业务代码，在公司中是大忌！</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>代理角色</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserServiceImpl userService)</span> {</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> {</span><br><span class="line">        log(<span class="string">"add"</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> {</span><br><span class="line">        log(<span class="string">"delete"</span>);</span><br><span class="line">        userService.delete();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> {</span><br><span class="line">        log(<span class="string">"update"</span>);</span><br><span class="line">        userService.update();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> {</span><br><span class="line">        log(<span class="string">"query"</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加一个日志方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String msg)</span>{</span><br><span class="line">        System.out.println(<span class="string">"[Debug] 使用了"</span>+msg+<span class="string">"方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>客户端访问代理角色</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        <span class="type">UserServiceProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceProxy</span>();</span><br><span class="line">        proxy.setUserService(userService);</span><br><span class="line">        proxy.add();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><p>聊聊AOP</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210722221543080.png" alt="image-20210722221543080"></p><h3 id="3、动态代理"><a href="#3、动态代理" class="headerlink" title="3、动态代理"></a>3、动态代理</h3><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的，不是我们写好的！</li><li>动态代理可以分为两大类：基于接口的动态代理，基于类的动态代理<ul><li>基于接口—JDK动态代理【我们在这里使用】</li><li>基于类—cglib</li><li>Java字节码实现：javassist</li></ul></li></ul><p>需要了解两个类：Proxy：代理，InvocationHandler：调用处理程序</p><p>动态代理的好处：</p><ul><li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共也就交给了代理角色！实现了业务的分工！</li><li>公共业务防身个拓展的时候，方便集中管理！</li><li>一个动态代理类代理的是一个接口，一般对应的一类业务</li><li>一个动态代理类可以代理多个类，只要实现了同一个接口即可</li></ul><h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><p><strong>横向编程的思想，在不影响原来业务类的情况下实现动态增强</strong></p><h3 id="1、什么是AOP"><a href="#1、什么是AOP" class="headerlink" title="1、什么是AOP"></a>1、什么是AOP</h3><p>AOP (Aspect Oriented Programming)意为:面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP 是OOP的延续,是软件开发中的一个热点,也是Spring框架中的一-个重要内容,是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210726160535693.png" alt="image-20210726160535693"></p><h3 id="2、Aop在Spring中的作用"><a href="#2、Aop在Spring中的作用" class="headerlink" title="2、Aop在Spring中的作用"></a>2、Aop在Spring中的作用</h3><p>==提供声明式事务;允许用户自定义切面==</p><ul><li>横切关注点:跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志，安全,缓存,事务等等…</li><li>切面(ASPECT) :横切关注点被模块化的特殊对象。即，它是一个类。</li><li>通知(Advice) :切面必须要完成的工作。即，它是类中的-一个方法。</li><li>目标(Target) :被通知对象。</li><li>代理(Proxy) :向目标对象应用通知之后创建的对象。</li><li>切入点(PointCut) :切面通知执行的“地点”的定义。</li><li>连接点(JointPoint) :与切入点匹配的执行点。</li></ul><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210726190134497.png" alt="image-20210726190134497"></p><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5中类型的Advice：</p><p><img src="C:\Users\杨宇\AppData\Roaming\Typora\typora-user-images\image-20210726203150571.png" alt="image-20210726203150571"></p><p>即AOP在不盖面原有代码的情况下，去增加新的功能</p><h3 id="3、使用Spring实现AOP"><a href="#3、使用Spring实现AOP" class="headerlink" title="3、使用Spring实现AOP"></a>3、使用Spring实现AOP</h3><p>【重点】使用AOP织入，需要一个依赖包</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="方式一：使用Spring的API接口【主要是SpringAPI接口实现】"><a href="#方式一：使用Spring的API接口【主要是SpringAPI接口实现】" class="headerlink" title="方式一：使用Spring的API接口【主要是SpringAPI接口实现】"></a>方式一：使用Spring的API接口【主要是SpringAPI接口实现】</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterLog</span>  <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnValue 返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">        System.out.println(<span class="string">"执行了"</span>+method.getName()+<span class="string">"方法，返回结果为："</span>+returnValue);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">log</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//method:要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//args：参数</span></span><br><span class="line">    <span class="comment">//target：目标对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] objects, Object target)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">        System.out.println(target.getClass().getName()+<span class="string">"的"</span>+method.getName()+<span class="string">"被执行了"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"增加了一个用户"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"删除了一个用户"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"更新了一个用户"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"查询了一个用户"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.log.log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterLog"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.log.AfterLog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一：使用Spring原生Spring API接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置aop:需要导入aop的约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点 expression:表达式,execution(要执行的位置！ * * * *)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.miaobuyi.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增强--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"log"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"afterLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="方式二：自定义类来实现AOP【主要是切面定义】"><a href="#方式二：自定义类来实现AOP【主要是切面定义】" class="headerlink" title="方式二：自定义类来实现AOP【主要是切面定义】"></a>方式二：自定义类来实现AOP【主要是切面定义】</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.diy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyPointCut</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"==========方法执行前=========="</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"==========方法执行后=========="</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.log.log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterLog"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.log.AfterLog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一：使用Spring原生Spring API接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置aop:需要导入aop的约束--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;aop:config&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;切入点 expression:表达式,execution(要执行的位置！ * * * *)&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;aop:pointcut id="pointcut" expression="execution(* com.miaobuyi.service.UserServiceImpl.*(..))"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;执行环绕增强&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;aop:advisor advice-ref="log" pointcut-ref="pointcut"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/aop:config&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式二：自定义类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"diyPointCut"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.diy.DiyPointCut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义切面，ref 要引用的类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"diyPointCut"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"point"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.miaobuyi.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="方式三：使用注解"><a href="#方式三：使用注解" class="headerlink" title="方式三：使用注解"></a>方式三：使用注解</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.log.log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterLog"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.log.AfterLog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一：使用Spring原生Spring API接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置aop:需要导入aop的约束--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;aop:config&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;切入点 expression:表达式,execution(要执行的位置！ * * * *)&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;aop:pointcut id="pointcut" expression="execution(* com.miaobuyi.service.UserServiceImpl.*(..))"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;执行环绕增强&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;aop:advisor advice-ref="log" pointcut-ref="pointcut"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/aop:config&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式二：自定义类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id="diyPointCut" class="com.miaobuyi.diy.DiyPointCut"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;aop:config&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;自定义切面，ref 要引用的类&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;aop:aspect ref="diyPointCut"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash;切入点&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:pointcut id="point" expression="execution(* com.miaobuyi.service.UserServiceImpl.*(..))"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash;通知&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:before method="before" pointcut-ref="point"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:after method="after" pointcut-ref="point"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/aop:aspect&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/aop:config&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式三--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"annotationPointCut"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.diy.AnnotationPointCut"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解支持  JDK(默认 proxy-target-class="false")  cglib（proxy-target-class="true"）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.diy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三 使用注解方式实现AOP</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标注这个类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPointCut</span> {</span><br><span class="line">    <span class="meta">@Before("execution(* com.miaobuyi.service.UserServiceImpl.*(..))")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"==========方法执行前=========="</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@After("execution(* com.miaobuyi.service.UserServiceImpl.*(..))")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"==========方法执行后=========="</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在环绕增强中，我们可以给定一个参数，代表我们要获取处理切入的点</span></span><br><span class="line">    <span class="meta">@Around("execution(* com.miaobuyi.service.UserServiceImpl.*(..))")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">        System.out.println(<span class="string">"环绕前"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();<span class="comment">//获得签名</span></span><br><span class="line">        System.out.println(signature);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(proceed);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="12、整合Mybatis"><a href="#12、整合Mybatis" class="headerlink" title="12、整合Mybatis"></a>12、整合Mybatis</h2><p>步骤：</p><ol><li><p>导入相关jar包</p><ul><li>junit</li><li>mybatis</li><li>mysql数据库</li><li>Spring相关的</li><li>aop织入</li><li>mybatis-Spring【new】</li></ul><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring操作数据库的话还需要一个spring-jdbc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>编写配置文件</p></li><li><p>测试</p></li></ol><h3 id="1、回忆Mybatis"><a href="#1、回忆Mybatis" class="headerlink" title="1、回忆Mybatis"></a>1、回忆Mybatis</h3><ol><li>编写实体类</li><li>编写核心配置文件</li><li>编写接口</li><li>编写Mapper.xml</li><li>测试</li></ol><h3 id="2、Mybatis-spring"><a href="#2、Mybatis-spring" class="headerlink" title="2、Mybatis-spring"></a>2、Mybatis-spring</h3><ol><li>编写数据源</li><li>sqlSessionFactory</li><li>sqlSessionTemplate</li><li>需要给接口加实现类【】</li><li>将自己写的实现类，注入到Spring中</li><li>测试使用即可</li></ol><p>spring-dao.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DataSource：使用Spring的数据源替换Mybatis的配置 c3p0 dbcp druid</span></span><br><span class="line"><span class="comment">    我们这里使用Spring提供的JDBC</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/miaobuyi/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionTemplate:就是我们使用的sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只能使用构造器注入sqlSessionFactory，因为他没有set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserMapper"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.mapper.UserMapperImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSession"</span> <span class="attr">ref</span>=<span class="string">"sqlSession"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dao.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserMapper"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.mapper.UserMapperImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSession"</span> <span class="attr">ref</span>=<span class="string">"sqlSession"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>UserMapperImpl.java</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.miaobuyi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们所有操作，在原来都使用sqlSession来执行，现在都使用SqlSessionTemplate</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> {</span><br><span class="line">        <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.miaobuyi.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>UserMapper.java</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.miaobuyi.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.miaobuyi.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.miaobuyi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"spring-dao.xml"</span>);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> context.getBean(<span class="string">"UserMapper"</span>, UserMapper.class);</span><br><span class="line">        <span class="keyword">for</span> (User user : userMapper.selectUser()) {</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>方式二</p><p>通过继承获取SqlSession</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miaobuyi.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.miaobuyi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl2</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).selectUser();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dao.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserMapper"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.mapper.UserMapperImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSession"</span> <span class="attr">ref</span>=<span class="string">"sqlSession"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserMapper2"</span> <span class="attr">class</span>=<span class="string">"com.miaobuyi.mapper.UserMapperImpl2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="13、声明式事务"><a href="#13、声明式事务" class="headerlink" title="13、声明式事务"></a>13、声明式事务</h2><h3 id="1、回顾事务"><a href="#1、回顾事务" class="headerlink" title="1、回顾事务"></a>1、回顾事务</h3><ul><li>把一组业务当成一个业务来做：要么都成功，要么都失败！</li><li>事务在项目开发中，十分的重要，涉及到数据的一致性问题，不能马虎！</li><li>确保完整性和一致性</li></ul><p>事务ACID原则：</p><ul><li>原子性</li><li>一致性</li><li>隔离性<ul><li>多个业务可能操作同一个资源，防止数据损坏</li></ul></li><li>持久性<ul><li>事务一旦体检，无论系统发生什么问题，结果都不会再被影响，被持久化的写到存储器中！</li></ul></li></ul><p>2、Spring当中的事务管理</p><ul><li>声明式事务：AOP</li><li>编程式事务：需要在代码中，进行事务的管理</li></ul><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DataSource：使用Spring的数据源替换Mybatis的配置 c3p0 dbcp druid</span></span><br><span class="line"><span class="comment">    我们这里使用Spring提供的JDBC</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/miaobuyi/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionTemplate:就是我们使用的sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只能使用构造器注入sqlSessionFactory，因为他没有set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置声明式事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结合AOP实现事务的织入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给那些方法配置事务--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置事务的传播特性：new  propagation= --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务切入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPoint"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.miaobuyi.mapper.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPoint"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>思考：</p><p>为什么需要事务？</p><ul><li>如果不配置事务，可能存在数据提交不一致的情况下；</li><li>如果我们不在Spring中去配置声明式事务，我们就需要在代码中手动配置事务！</li><li>事务在项目的开发中十分重要，涉及到数据的一致性和完整性问题，不容马虎</li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
